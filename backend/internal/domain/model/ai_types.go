package model

import (
	"time"
)

// AIMessage represents a single message in a conversation
type AIMessage struct {
	ID            string    `json:"id"`
	ConversationID string   `json:"conversation_id"`
	Role          string    `json:"role"` // "user" or "assistant"
	Content       string    `json:"content"`
	Timestamp     time.Time `json:"timestamp"`
	Metadata      map[string]interface{} `json:"metadata,omitempty"`
}

// AIConversation represents a conversation with the AI assistant
type AIConversation struct {
	ID          string      `json:"id"`
	UserID      string      `json:"user_id"`
	Title       string      `json:"title"`
	Messages    []AIMessage `json:"messages"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Tags        []string    `json:"tags,omitempty"`
}

// AIFunctionCall represents a function call from the AI
type AIFunctionCall struct {
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// AIFunctionResponse represents a response to a function call
type AIFunctionResponse struct {
	Name   string      `json:"name"`
	Result interface{} `json:"result"`
}

// AIInsight represents an insight generated by the AI
type AIInsight struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Type        string    `json:"type"` // "portfolio", "market", "opportunity", etc.
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	Confidence  float64   `json:"confidence"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

// AITradeRecommendation represents a trade recommendation from the AI
type AITradeRecommendation struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Symbol      string    `json:"symbol"`
	Action      string    `json:"action"` // "buy" or "sell"
	Quantity    float64   `json:"quantity"`
	Price       float64   `json:"price,omitempty"`
	Reasoning   string    `json:"reasoning"`
	CreatedAt   time.Time `json:"created_at"`
	ExpiresAt   time.Time `json:"expires_at"`
	Confidence  float64   `json:"confidence"`
	Status      string    `json:"status"` // "pending", "accepted", "rejected", "executed"
}

// AIEmbedding represents a vector embedding for similarity search
type AIEmbedding struct {
	ID        string    `json:"id"`
	SourceID  string    `json:"source_id"` // ID of the message or document
	SourceType string   `json:"source_type"` // "message", "document", etc.
	Vector    []float64 `json:"vector"`
	CreatedAt time.Time `json:"created_at"`
}
