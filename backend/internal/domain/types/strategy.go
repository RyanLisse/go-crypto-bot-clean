package types

import (
	"context"
	"time"

	"go-crypto-bot-clean/backend/internal/domain/models"
)

// Signal represents a trading signal generated by a strategy
type Signal struct {
	Symbol          string                 // The trading pair symbol
	Type            SignalType             // Buy, sell, or hold
	Confidence      float64                // Signal confidence score (0-1.0)
	Price           float64                // Current price when signal was generated
	TargetPrice     float64                // Target price if applicable
	StopLoss        float64                // Recommended stop-loss level
	TakeProfit      float64                // Recommended take-profit level
	Timeframe       string                 // Timeframe this signal is based on (e.g., "15m", "1h")
	Timestamp       time.Time              // When this signal was generated
	ExpirationTime  time.Time              // When this signal should be considered invalid
	Metadata        map[string]interface{} // Additional strategy-specific information
	RecommendedSize float64                // Recommended position size (0-1.0)
}

// SignalType represents the type of trading signal
type SignalType string

const (
	SignalBuy   SignalType = "BUY"
	SignalSell  SignalType = "SELL"
	SignalHold  SignalType = "HOLD"
	SignalClose SignalType = "CLOSE"
)

// Strategy defines the interface that all trading strategies must implement
type Strategy interface {
	// GetName returns the name of the strategy
	GetName() string

	// Initialize prepares the strategy with initial configuration
	Initialize(ctx context.Context, config map[string]interface{}) error

	// UpdateParameters updates the strategy parameters
	UpdateParameters(ctx context.Context, params map[string]interface{}) error

	// OnTickerUpdate processes a new ticker update and may generate a signal
	OnTickerUpdate(ctx context.Context, ticker *models.Ticker) (*Signal, error)

	// OnCandleUpdate processes a new candle and may generate a signal
	OnCandleUpdate(ctx context.Context, candle *models.Candle) (*Signal, error)

	// OnTradeUpdate processes a new trade and may generate a signal
	OnTradeUpdate(ctx context.Context, trade *models.Trade) (*Signal, error)

	// OnMarketDepthUpdate processes a new market depth update and may generate a signal
	OnMarketDepthUpdate(ctx context.Context, depth *models.OrderBook) (*Signal, error)

	// OnTimerEvent processes a scheduled timer event
	OnTimerEvent(ctx context.Context, eventType string) (*Signal, error)

	// GetTimeframes returns the timeframes this strategy requires
	GetTimeframes() []string

	// GetRequiredDataTypes returns the types of data this strategy needs
	GetRequiredDataTypes() []string

	// PerformBacktest runs a backtest of the strategy on historical data
	PerformBacktest(ctx context.Context, historicalData []*models.Candle, params map[string]interface{}) ([]*Signal, *models.BacktestResult, error)
}
