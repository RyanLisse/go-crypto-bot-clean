package mocks

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FunctionHandler is an autogenerated mock type for the FunctionHandler type
type FunctionHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, params
func (_m *FunctionHandler) Execute(ctx context.Context, params map[string]interface{}) (interface{}, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (interface{}, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) interface{}); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFunctionHandler creates a new instance of FunctionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFunctionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *FunctionHandler {
	mock := &FunctionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
