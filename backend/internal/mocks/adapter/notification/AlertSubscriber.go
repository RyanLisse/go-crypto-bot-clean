package mocks

package mocks

import (
	notification "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/adapter/notification"
	mock "github.com/stretchr/testify/mock"
)

// AlertSubscriber is an autogenerated mock type for the AlertSubscriber type
type AlertSubscriber struct {
	mock.Mock
}

// GetName provides a mock function with no fields
func (_m *AlertSubscriber) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HandleAlert provides a mock function with given fields: alert
func (_m *AlertSubscriber) HandleAlert(alert notification.Alert) error {
	ret := _m.Called(alert)

	if len(ret) == 0 {
		panic("no return value specified for HandleAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(notification.Alert) error); ok {
		r0 = rf(alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAlertSubscriber creates a new instance of AlertSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertSubscriber {
	mock := &AlertSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
