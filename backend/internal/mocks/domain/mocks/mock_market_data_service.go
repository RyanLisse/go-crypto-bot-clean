// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	market "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/market"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarketDataService is an autogenerated mock type for the MarketDataService type
type MarketDataService struct {
	mock.Mock
}

// GetAllSymbols provides a mock function with given fields: ctx
func (_m *MarketDataService) GetAllSymbols(ctx context.Context) ([]*market.Symbol, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSymbols")
	}

	var r0 []*market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*market.Symbol, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*market.Symbol); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandles provides a mock function with given fields: ctx, symbol, interval, limit
func (_m *MarketDataService) GetCandles(ctx context.Context, symbol string, interval string, limit int) ([]*market.Candle, error) {
	ret := _m.Called(ctx, symbol, interval, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCandles")
	}

	var r0 []*market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) ([]*market.Candle, error)); ok {
		return rf(ctx, symbol, interval, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) []*market.Candle); ok {
		r0 = rf(ctx, symbol, interval, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, symbol, interval, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoricalPrices provides a mock function with given fields: ctx, symbol, from, to, interval
func (_m *MarketDataService) GetHistoricalPrices(ctx context.Context, symbol string, from time.Time, to time.Time, interval string) ([]*market.Candle, error) {
	ret := _m.Called(ctx, symbol, from, to, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoricalPrices")
	}

	var r0 []*market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, string) ([]*market.Candle, error)); ok {
		return rf(ctx, symbol, from, to, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, string) []*market.Candle); ok {
		r0 = rf(ctx, symbol, from, to, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time, string) error); ok {
		r1 = rf(ctx, symbol, from, to, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: ctx, symbol, depth
func (_m *MarketDataService) GetOrderBook(ctx context.Context, symbol string, depth int) (*market.OrderBook, error) {
	ret := _m.Called(ctx, symbol, depth)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *market.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*market.OrderBook, error)); ok {
		return rf(ctx, symbol, depth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *market.OrderBook); ok {
		r0 = rf(ctx, symbol, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, symbol, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbolInfo provides a mock function with given fields: ctx, symbol
func (_m *MarketDataService) GetSymbolInfo(ctx context.Context, symbol string) (*market.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbolInfo")
	}

	var r0 *market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*market.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *market.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: ctx, symbol
func (_m *MarketDataService) GetTicker(ctx context.Context, symbol string) (*market.Ticker, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 *market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*market.Ticker, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *market.Ticker); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMarketDataService creates a new instance of MarketDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketDataService {
	mock := &MarketDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
