package mocks

import (
	context "context"
	time "time"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// AutoBuyExecutionRepository is an autogenerated mock type for the AutoBuyExecutionRepository type
type AutoBuyExecutionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, execution
func (_m *AutoBuyExecutionRepository) Create(ctx context.Context, execution *model.AutoBuyExecution) error {
	ret := _m.Called(ctx, execution)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AutoBuyExecution) error); ok {
		r0 = rf(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *AutoBuyExecutionRepository) GetByID(ctx context.Context, id string) (*model.AutoBuyExecution, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.AutoBuyExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AutoBuyExecution, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AutoBuyExecution); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AutoBuyExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRuleID provides a mock function with given fields: ctx, ruleID, limit, offset
func (_m *AutoBuyExecutionRepository) GetByRuleID(ctx context.Context, ruleID string, limit int, offset int) ([]*model.AutoBuyExecution, error) {
	ret := _m.Called(ctx, ruleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByRuleID")
	}

	var r0 []*model.AutoBuyExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.AutoBuyExecution, error)); ok {
		return rf(ctx, ruleID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.AutoBuyExecution); ok {
		r0 = rf(ctx, ruleID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AutoBuyExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, ruleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: ctx, symbol, limit, offset
func (_m *AutoBuyExecutionRepository) GetBySymbol(ctx context.Context, symbol string, limit int, offset int) ([]*model.AutoBuyExecution, error) {
	ret := _m.Called(ctx, symbol, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 []*model.AutoBuyExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.AutoBuyExecution, error)); ok {
		return rf(ctx, symbol, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.AutoBuyExecution); ok {
		r0 = rf(ctx, symbol, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AutoBuyExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, symbol, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTimeRange provides a mock function with given fields: ctx, from, to, limit, offset
func (_m *AutoBuyExecutionRepository) GetByTimeRange(ctx context.Context, from time.Time, to time.Time, limit int, offset int) ([]*model.AutoBuyExecution, error) {
	ret := _m.Called(ctx, from, to, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByTimeRange")
	}

	var r0 []*model.AutoBuyExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) ([]*model.AutoBuyExecution, error)); ok {
		return rf(ctx, from, to, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) []*model.AutoBuyExecution); ok {
		r0 = rf(ctx, from, to, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AutoBuyExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, from, to, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID, limit, offset
func (_m *AutoBuyExecutionRepository) GetByUserID(ctx context.Context, userID string, limit int, offset int) ([]*model.AutoBuyExecution, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.AutoBuyExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.AutoBuyExecution, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.AutoBuyExecution); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AutoBuyExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAutoBuyExecutionRepository creates a new instance of AutoBuyExecutionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAutoBuyExecutionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AutoBuyExecutionRepository {
	mock := &AutoBuyExecutionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
