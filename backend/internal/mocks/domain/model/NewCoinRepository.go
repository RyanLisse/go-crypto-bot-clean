package mocks

import (
	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NewCoinRepository is an autogenerated mock type for the NewCoinRepository type
type NewCoinRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: coin
func (_m *NewCoinRepository) Create(coin *model.NewCoin) error {
	ret := _m.Called(coin)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.NewCoin) error); ok {
		r0 = rf(coin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: event
func (_m *NewCoinRepository) CreateEvent(event *model.NewCoinEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.NewCoinEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *NewCoinRepository) GetByID(id string) (*model.NewCoin, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.NewCoin, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.NewCoin); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: symbol
func (_m *NewCoinRepository) GetBySymbol(symbol string) (*model.NewCoin, error) {
	ret := _m.Called(symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 *model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.NewCoin, error)); ok {
		return rf(symbol)
	}
	if rf, ok := ret.Get(0).(func(string) *model.NewCoin); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: coinID, limit, offset
func (_m *NewCoinRepository) GetEvents(coinID string, limit int, offset int) ([]*model.NewCoinEvent, error) {
	ret := _m.Called(coinID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []*model.NewCoinEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*model.NewCoinEvent, error)); ok {
		return rf(coinID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*model.NewCoinEvent); ok {
		r0 = rf(coinID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoinEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(coinID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecent provides a mock function with given fields: limit
func (_m *NewCoinRepository) GetRecent(limit int) ([]*model.NewCoin, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecent")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.NewCoin, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.NewCoin); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: status, limit, offset
func (_m *NewCoinRepository) List(status model.Status, limit int, offset int) ([]*model.NewCoin, error) {
	ret := _m.Called(status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Status, int, int) ([]*model.NewCoin, error)); ok {
		return rf(status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(model.Status, int, int) []*model.NewCoin); ok {
		r0 = rf(status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Status, int, int) error); ok {
		r1 = rf(status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: coin
func (_m *NewCoinRepository) Update(coin *model.NewCoin) error {
	ret := _m.Called(coin)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.NewCoin) error); ok {
		r0 = rf(coin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNewCoinRepository creates a new instance of NewCoinRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewCoinRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewCoinRepository {
	mock := &NewCoinRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
