package mocks

import (
	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NewCoinService is an autogenerated mock type for the NewCoinService type
type NewCoinService struct {
	mock.Mock
}

// DetectNewCoins provides a mock function with no fields
func (_m *NewCoinService) DetectNewCoins() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DetectNewCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCoinDetails provides a mock function with given fields: symbol
func (_m *NewCoinService) GetCoinDetails(symbol string) (*model.NewCoin, error) {
	ret := _m.Called(symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinDetails")
	}

	var r0 *model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.NewCoin, error)); ok {
		return rf(symbol)
	}
	if rf, ok := ret.Get(0).(func(string) *model.NewCoin); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentTradableCoins provides a mock function with given fields: limit
func (_m *NewCoinService) GetRecentTradableCoins(limit int) ([]*model.NewCoin, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentTradableCoins")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.NewCoin, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.NewCoin); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNewCoins provides a mock function with given fields: status, limit, offset
func (_m *NewCoinService) ListNewCoins(status model.Status, limit int, offset int) ([]*model.NewCoin, error) {
	ret := _m.Called(status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListNewCoins")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Status, int, int) ([]*model.NewCoin, error)); ok {
		return rf(status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(model.Status, int, int) []*model.NewCoin); ok {
		r0 = rf(status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Status, int, int) error); ok {
		r1 = rf(status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToEvents provides a mock function with given fields: callback
func (_m *NewCoinService) SubscribeToEvents(callback func(*model.NewCoinEvent)) error {
	ret := _m.Called(callback)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*model.NewCoinEvent)) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsubscribeFromEvents provides a mock function with given fields: callback
func (_m *NewCoinService) UnsubscribeFromEvents(callback func(*model.NewCoinEvent)) error {
	ret := _m.Called(callback)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeFromEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*model.NewCoinEvent)) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCoinStatus provides a mock function with given fields: coinID, newStatus
func (_m *NewCoinService) UpdateCoinStatus(coinID string, newStatus model.Status) error {
	ret := _m.Called(coinID, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCoinStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.Status) error); ok {
		r0 = rf(coinID, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNewCoinService creates a new instance of NewCoinService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewCoinService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewCoinService {
	mock := &NewCoinService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
