package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// Chat provides a mock function with given fields: ctx, message, conversationID
func (_m *AIService) Chat(ctx context.Context, message string, conversationID string) (*model.AIMessage, error) {
	ret := _m.Called(ctx, message, conversationID)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *model.AIMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.AIMessage, error)); ok {
		return rf(ctx, message, conversationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.AIMessage); ok {
		r0 = rf(ctx, message, conversationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, message, conversationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatWithHistory provides a mock function with given fields: ctx, messages
func (_m *AIService) ChatWithHistory(ctx context.Context, messages []model.AIMessage) (*model.AIMessage, error) {
	ret := _m.Called(ctx, messages)

	if len(ret) == 0 {
		panic("no return value specified for ChatWithHistory")
	}

	var r0 *model.AIMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.AIMessage) (*model.AIMessage, error)); ok {
		return rf(ctx, messages)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.AIMessage) *model.AIMessage); ok {
		r0 = rf(ctx, messages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.AIMessage) error); ok {
		r1 = rf(ctx, messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteFunction provides a mock function with given fields: ctx, functionCall
func (_m *AIService) ExecuteFunction(ctx context.Context, functionCall model.AIFunctionCall) (*model.AIFunctionResponse, error) {
	ret := _m.Called(ctx, functionCall)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteFunction")
	}

	var r0 *model.AIFunctionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AIFunctionCall) (*model.AIFunctionResponse, error)); ok {
		return rf(ctx, functionCall)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.AIFunctionCall) *model.AIFunctionResponse); ok {
		r0 = rf(ctx, functionCall)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIFunctionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.AIFunctionCall) error); ok {
		r1 = rf(ctx, functionCall)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbedding provides a mock function with given fields: ctx, text
func (_m *AIService) GenerateEmbedding(ctx context.Context, text string) (*model.AIEmbedding, error) {
	ret := _m.Called(ctx, text)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedding")
	}

	var r0 *model.AIEmbedding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AIEmbedding, error)); ok {
		return rf(ctx, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AIEmbedding); ok {
		r0 = rf(ctx, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIEmbedding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateInsight provides a mock function with given fields: ctx, insightType, data
func (_m *AIService) GenerateInsight(ctx context.Context, insightType string, data map[string]interface{}) (*model.AIInsight, error) {
	ret := _m.Called(ctx, insightType, data)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInsight")
	}

	var r0 *model.AIInsight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (*model.AIInsight, error)); ok {
		return rf(ctx, insightType, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) *model.AIInsight); ok {
		r0 = rf(ctx, insightType, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIInsight)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, insightType, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTradeRecommendation provides a mock function with given fields: ctx, data
func (_m *AIService) GenerateTradeRecommendation(ctx context.Context, data map[string]interface{}) (*model.AITradeRecommendation, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTradeRecommendation")
	}

	var r0 *model.AITradeRecommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (*model.AITradeRecommendation, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *model.AITradeRecommendation); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AITradeRecommendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
