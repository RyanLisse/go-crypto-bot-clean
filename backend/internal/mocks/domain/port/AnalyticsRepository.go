// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AnalyticsRepository is an autogenerated mock type for the AnalyticsRepository type
type AnalyticsRepository struct {
	mock.Mock
}

// GetMetrics provides a mock function with given fields: ctx, from, to
func (_m *AnalyticsRepository) GetMetrics(ctx context.Context, from time.Time, to time.Time) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]map[string]interface{}, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []map[string]interface{}); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerformanceByStrategy provides a mock function with given fields: ctx, strategyID, from, to
func (_m *AnalyticsRepository) GetPerformanceByStrategy(ctx context.Context, strategyID string, from time.Time, to time.Time) (map[string]interface{}, error) {
	ret := _m.Called(ctx, strategyID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetPerformanceByStrategy")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) (map[string]interface{}, error)); ok {
		return rf(ctx, strategyID, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) map[string]interface{}); ok {
		r0 = rf(ctx, strategyID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, strategyID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMetrics provides a mock function with given fields: ctx, metrics
func (_m *AnalyticsRepository) SaveMetrics(ctx context.Context, metrics map[string]interface{}) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for SaveMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAnalyticsRepository creates a new instance of AnalyticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyticsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyticsRepository {
	mock := &AnalyticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
