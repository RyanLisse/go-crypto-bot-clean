package mocks

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Cache is an autogenerated mock type for the Cache type
type Cache[T interface{}] struct {
	mock.Mock
}

// Get provides a mock function with no fields
func (_m *Cache[T]) Get() (*T, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *T
	var r1 bool
	if rf, ok := ret.Get(0).(func() (*T, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetOrSet provides a mock function with given fields: fetchFn
func (_m *Cache[T]) GetOrSet(fetchFn func() (*T, error)) (*T, error) {
	ret := _m.Called(fetchFn)

	if len(ret) == 0 {
		panic("no return value specified for GetOrSet")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(func() (*T, error)) (*T, error)); ok {
		return rf(fetchFn)
	}
	if rf, ok := ret.Get(0).(func(func() (*T, error)) *T); ok {
		r0 = rf(fetchFn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(func() (*T, error)) error); ok {
		r1 = rf(fetchFn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invalidate provides a mock function with no fields
func (_m *Cache[T]) Invalidate() {
	_m.Called()
}

// Set provides a mock function with given fields: value
func (_m *Cache[T]) Set(value *T) {
	_m.Called(value)
}

// UpdateTTL provides a mock function with given fields: ttl
func (_m *Cache[T]) UpdateTTL(ttl time.Duration) {
	_m.Called(ttl)
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache[T] {
	mock := &Cache[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
