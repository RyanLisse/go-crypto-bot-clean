package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// ConversationMemoryRepository is an autogenerated mock type for the ConversationMemoryRepository type
type ConversationMemoryRepository struct {
	mock.Mock
}

// DeleteConversation provides a mock function with given fields: ctx, id
func (_m *ConversationMemoryRepository) DeleteConversation(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConversation provides a mock function with given fields: ctx, id
func (_m *ConversationMemoryRepository) GetConversation(ctx context.Context, id string) (*model.AIConversation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConversation")
	}

	var r0 *model.AIConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AIConversation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AIConversation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx, conversationID, limit, offset
func (_m *ConversationMemoryRepository) GetMessages(ctx context.Context, conversationID string, limit int, offset int) ([]*model.AIMessage, error) {
	ret := _m.Called(ctx, conversationID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []*model.AIMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.AIMessage, error)); ok {
		return rf(ctx, conversationID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.AIMessage); ok {
		r0 = rf(ctx, conversationID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AIMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, conversationID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConversations provides a mock function with given fields: ctx, userID, limit, offset
func (_m *ConversationMemoryRepository) ListConversations(ctx context.Context, userID string, limit int, offset int) ([]*model.AIConversation, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListConversations")
	}

	var r0 []*model.AIConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.AIConversation, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.AIConversation); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AIConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveConversation provides a mock function with given fields: ctx, conversation
func (_m *ConversationMemoryRepository) SaveConversation(ctx context.Context, conversation *model.AIConversation) error {
	ret := _m.Called(ctx, conversation)

	if len(ret) == 0 {
		panic("no return value specified for SaveConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AIConversation) error); ok {
		r0 = rf(ctx, conversation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMessage provides a mock function with given fields: ctx, message
func (_m *ConversationMemoryRepository) SaveMessage(ctx context.Context, message *model.AIMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AIMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConversationMemoryRepository creates a new instance of ConversationMemoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConversationMemoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConversationMemoryRepository {
	mock := &ConversationMemoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
