package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// EmbeddingRepository is an autogenerated mock type for the EmbeddingRepository type
type EmbeddingRepository struct {
	mock.Mock
}

// DeleteEmbedding provides a mock function with given fields: ctx, id
func (_m *EmbeddingRepository) DeleteEmbedding(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmbedding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSimilar provides a mock function with given fields: ctx, vector, limit
func (_m *EmbeddingRepository) FindSimilar(ctx context.Context, vector []float64, limit int) ([]*model.AIEmbedding, error) {
	ret := _m.Called(ctx, vector, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindSimilar")
	}

	var r0 []*model.AIEmbedding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float64, int) ([]*model.AIEmbedding, error)); ok {
		return rf(ctx, vector, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float64, int) []*model.AIEmbedding); ok {
		r0 = rf(ctx, vector, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AIEmbedding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float64, int) error); ok {
		r1 = rf(ctx, vector, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmbedding provides a mock function with given fields: ctx, sourceID, sourceType
func (_m *EmbeddingRepository) GetEmbedding(ctx context.Context, sourceID string, sourceType string) (*model.AIEmbedding, error) {
	ret := _m.Called(ctx, sourceID, sourceType)

	if len(ret) == 0 {
		panic("no return value specified for GetEmbedding")
	}

	var r0 *model.AIEmbedding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.AIEmbedding, error)); ok {
		return rf(ctx, sourceID, sourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.AIEmbedding); ok {
		r0 = rf(ctx, sourceID, sourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AIEmbedding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sourceID, sourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEmbedding provides a mock function with given fields: ctx, embedding
func (_m *EmbeddingRepository) SaveEmbedding(ctx context.Context, embedding *model.AIEmbedding) error {
	ret := _m.Called(ctx, embedding)

	if len(ret) == 0 {
		panic("no return value specified for SaveEmbedding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AIEmbedding) error); ok {
		r0 = rf(ctx, embedding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmbeddingRepository creates a new instance of EmbeddingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmbeddingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmbeddingRepository {
	mock := &EmbeddingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
