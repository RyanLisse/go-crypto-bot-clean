// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// GetEvents provides a mock function with given fields: ctx, coinID, limit, offset
func (_m *EventRepository) GetEvents(ctx context.Context, coinID string, limit int, offset int) ([]*model.NewCoinEvent, error) {
	ret := _m.Called(ctx, coinID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []*model.NewCoinEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.NewCoinEvent, error)); ok {
		return rf(ctx, coinID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.NewCoinEvent); ok {
		r0 = rf(ctx, coinID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoinEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, coinID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEvent provides a mock function with given fields: ctx, event
func (_m *EventRepository) SaveEvent(ctx context.Context, event *model.NewCoinEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.NewCoinEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventRepository creates a new instance of EventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRepository {
	mock := &EventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
