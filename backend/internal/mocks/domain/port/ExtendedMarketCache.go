package mocks

package mocks

import (
	context "context"

	market "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/market"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ExtendedMarketCache is an autogenerated mock type for the ExtendedMarketCache type
type ExtendedMarketCache struct {
	mock.Mock
}

// CacheCandle provides a mock function with given fields: candle
func (_m *ExtendedMarketCache) CacheCandle(candle *market.Candle) {
	_m.Called(candle)
}

// CacheOrderBook provides a mock function with given fields: orderbook
func (_m *ExtendedMarketCache) CacheOrderBook(orderbook *market.OrderBook) {
	_m.Called(orderbook)
}

// CacheTicker provides a mock function with given fields: ticker
func (_m *ExtendedMarketCache) CacheTicker(ticker *market.Ticker) {
	_m.Called(ticker)
}

// CacheTickerWithCustomTTL provides a mock function with given fields: ticker, ttl
func (_m *ExtendedMarketCache) CacheTickerWithCustomTTL(ticker *market.Ticker, ttl time.Duration) {
	_m.Called(ticker, ttl)
}

// Clear provides a mock function with no fields
func (_m *ExtendedMarketCache) Clear() {
	_m.Called()
}

// GetAllTickers provides a mock function with given fields: ctx, exchange
func (_m *ExtendedMarketCache) GetAllTickers(ctx context.Context, exchange string) ([]*market.Ticker, bool) {
	ret := _m.Called(ctx, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTickers")
	}

	var r0 []*market.Ticker
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*market.Ticker, bool)); ok {
		return rf(ctx, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*market.Ticker); ok {
		r0 = rf(ctx, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, exchange)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAllTickersWithError provides a mock function with given fields: ctx, exchange
func (_m *ExtendedMarketCache) GetAllTickersWithError(ctx context.Context, exchange string) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTickersWithError")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*market.Ticker, error)); ok {
		return rf(ctx, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*market.Ticker); ok {
		r0 = rf(ctx, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandle provides a mock function with given fields: ctx, exchange, symbol, interval, openTime
func (_m *ExtendedMarketCache) GetCandle(ctx context.Context, exchange string, symbol string, interval market.Interval, openTime time.Time) (*market.Candle, bool) {
	ret := _m.Called(ctx, exchange, symbol, interval, openTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCandle")
	}

	var r0 *market.Candle
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) (*market.Candle, bool)); ok {
		return rf(ctx, exchange, symbol, interval, openTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) *market.Candle); ok {
		r0 = rf(ctx, exchange, symbol, interval, openTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval, time.Time) bool); ok {
		r1 = rf(ctx, exchange, symbol, interval, openTime)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCandleWithError provides a mock function with given fields: ctx, exchange, symbol, interval, openTime
func (_m *ExtendedMarketCache) GetCandleWithError(ctx context.Context, exchange string, symbol string, interval market.Interval, openTime time.Time) (*market.Candle, error) {
	ret := _m.Called(ctx, exchange, symbol, interval, openTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCandleWithError")
	}

	var r0 *market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) (*market.Candle, error)); ok {
		return rf(ctx, exchange, symbol, interval, openTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) *market.Candle); ok {
		r0 = rf(ctx, exchange, symbol, interval, openTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval, time.Time) error); ok {
		r1 = rf(ctx, exchange, symbol, interval, openTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCandle provides a mock function with given fields: ctx, exchange, symbol, interval
func (_m *ExtendedMarketCache) GetLatestCandle(ctx context.Context, exchange string, symbol string, interval market.Interval) (*market.Candle, bool) {
	ret := _m.Called(ctx, exchange, symbol, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCandle")
	}

	var r0 *market.Candle
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) (*market.Candle, bool)); ok {
		return rf(ctx, exchange, symbol, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) *market.Candle); ok {
		r0 = rf(ctx, exchange, symbol, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval) bool); ok {
		r1 = rf(ctx, exchange, symbol, interval)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetLatestCandleWithError provides a mock function with given fields: ctx, exchange, symbol, interval
func (_m *ExtendedMarketCache) GetLatestCandleWithError(ctx context.Context, exchange string, symbol string, interval market.Interval) (*market.Candle, error) {
	ret := _m.Called(ctx, exchange, symbol, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCandleWithError")
	}

	var r0 *market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) (*market.Candle, error)); ok {
		return rf(ctx, exchange, symbol, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) *market.Candle); ok {
		r0 = rf(ctx, exchange, symbol, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval) error); ok {
		r1 = rf(ctx, exchange, symbol, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestTickers provides a mock function with given fields: ctx
func (_m *ExtendedMarketCache) GetLatestTickers(ctx context.Context) ([]*market.Ticker, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTickers")
	}

	var r0 []*market.Ticker
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) ([]*market.Ticker, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*market.Ticker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetLatestTickersWithError provides a mock function with given fields: ctx
func (_m *ExtendedMarketCache) GetLatestTickersWithError(ctx context.Context) ([]*market.Ticker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTickersWithError")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*market.Ticker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*market.Ticker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: ctx, exchange, symbol
func (_m *ExtendedMarketCache) GetOrderBook(ctx context.Context, exchange string, symbol string) (*market.OrderBook, bool) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *market.OrderBook
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.OrderBook, bool)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.OrderBook); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetOrderBookWithError provides a mock function with given fields: ctx, exchange, symbol
func (_m *ExtendedMarketCache) GetOrderBookWithError(ctx context.Context, exchange string, symbol string) (*market.OrderBook, error) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBookWithError")
	}

	var r0 *market.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.OrderBook, error)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.OrderBook); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: ctx, exchange, symbol
func (_m *ExtendedMarketCache) GetTicker(ctx context.Context, exchange string, symbol string) (*market.Ticker, bool) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 *market.Ticker
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.Ticker, bool)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.Ticker); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTickerWithError provides a mock function with given fields: ctx, exchange, symbol
func (_m *ExtendedMarketCache) GetTickerWithError(ctx context.Context, exchange string, symbol string) (*market.Ticker, error) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetTickerWithError")
	}

	var r0 *market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.Ticker, error)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.Ticker); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExpired provides a mock function with given fields: cache, key
func (_m *ExtendedMarketCache) IsExpired(cache interface{}, key string) bool {
	ret := _m.Called(cache, key)

	if len(ret) == 0 {
		panic("no return value specified for IsExpired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, string) bool); ok {
		r0 = rf(cache, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetCandleExpiry provides a mock function with given fields: d
func (_m *ExtendedMarketCache) SetCandleExpiry(d time.Duration) {
	_m.Called(d)
}

// SetOrderbookExpiry provides a mock function with given fields: d
func (_m *ExtendedMarketCache) SetOrderbookExpiry(d time.Duration) {
	_m.Called(d)
}

// SetTickerExpiry provides a mock function with given fields: d
func (_m *ExtendedMarketCache) SetTickerExpiry(d time.Duration) {
	_m.Called(d)
}

// StartCleanupTask provides a mock function with given fields: ctx, interval
func (_m *ExtendedMarketCache) StartCleanupTask(ctx context.Context, interval time.Duration) {
	_m.Called(ctx, interval)
}

// NewExtendedMarketCache creates a new instance of ExtendedMarketCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtendedMarketCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtendedMarketCache {
	mock := &ExtendedMarketCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
