package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MEXCClient is an autogenerated mock type for the MEXCClient type
type MEXCClient struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, symbol, orderID
func (_m *MEXCClient) CancelOrder(ctx context.Context, symbol string, orderID string) error {
	ret := _m.Called(ctx, symbol, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, symbol, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx
func (_m *MEXCClient) GetAccount(ctx context.Context) (*model.Wallet, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *model.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Wallet, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Wallet); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExchangeInfo provides a mock function with given fields: ctx
func (_m *MEXCClient) GetExchangeInfo(ctx context.Context) (*model.ExchangeInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetExchangeInfo")
	}

	var r0 *model.ExchangeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.ExchangeInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.ExchangeInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExchangeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKlines provides a mock function with given fields: ctx, symbol, interval, limit
func (_m *MEXCClient) GetKlines(ctx context.Context, symbol string, interval model.KlineInterval, limit int) ([]*model.Kline, error) {
	ret := _m.Called(ctx, symbol, interval, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetKlines")
	}

	var r0 []*model.Kline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.KlineInterval, int) ([]*model.Kline, error)); ok {
		return rf(ctx, symbol, interval, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.KlineInterval, int) []*model.Kline); ok {
		r0 = rf(ctx, symbol, interval, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Kline)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.KlineInterval, int) error); ok {
		r1 = rf(ctx, symbol, interval, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketData provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetMarketData(ctx context.Context, symbol string) (*model.Ticker, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketData")
	}

	var r0 *model.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Ticker, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Ticker); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewListings provides a mock function with given fields: ctx
func (_m *MEXCClient) GetNewListings(ctx context.Context) ([]*model.NewCoin, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNewListings")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.NewCoin, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.NewCoin); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenOrders provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetOpenOrders(ctx context.Context, symbol string) ([]*model.Order, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenOrders")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Order, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Order); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: ctx, symbol, depth
func (_m *MEXCClient) GetOrderBook(ctx context.Context, symbol string, depth int) (*model.OrderBook, error) {
	ret := _m.Called(ctx, symbol, depth)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *model.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*model.OrderBook, error)); ok {
		return rf(ctx, symbol, depth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *model.OrderBook); ok {
		r0 = rf(ctx, symbol, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, symbol, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistory provides a mock function with given fields: ctx, symbol, limit, offset
func (_m *MEXCClient) GetOrderHistory(ctx context.Context, symbol string, limit int, offset int) ([]*model.Order, error) {
	ret := _m.Called(ctx, symbol, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistory")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Order, error)); ok {
		return rf(ctx, symbol, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Order); ok {
		r0 = rf(ctx, symbol, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, symbol, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: ctx, symbol, orderID
func (_m *MEXCClient) GetOrderStatus(ctx context.Context, symbol string, orderID string) (*model.Order, error) {
	ret := _m.Called(ctx, symbol, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Order, error)); ok {
		return rf(ctx, symbol, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Order); ok {
		r0 = rf(ctx, symbol, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, symbol, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbolConstraints provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetSymbolConstraints(ctx context.Context, symbol string) (float64, float64, float64, float64, int, int, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbolConstraints")
	}

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	var r4 int
	var r5 int
	var r6 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, float64, float64, float64, int, int, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) float64); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) float64); ok {
		r2 = rf(ctx, symbol)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) float64); ok {
		r3 = rf(ctx, symbol)
	} else {
		r3 = ret.Get(3).(float64)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string) int); ok {
		r4 = rf(ctx, symbol)
	} else {
		r4 = ret.Get(4).(int)
	}

	if rf, ok := ret.Get(5).(func(context.Context, string) int); ok {
		r5 = rf(ctx, symbol)
	} else {
		r5 = ret.Get(5).(int)
	}

	if rf, ok := ret.Get(6).(func(context.Context, string) error); ok {
		r6 = rf(ctx, symbol)
	} else {
		r6 = ret.Error(6)
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// GetSymbolInfo provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetSymbolInfo(ctx context.Context, symbol string) (*model.SymbolInfo, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbolInfo")
	}

	var r0 *model.SymbolInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.SymbolInfo, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.SymbolInfo); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SymbolInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbolStatus provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetSymbolStatus(ctx context.Context, symbol string) (model.Status, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbolStatus")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Status, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Status); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradingSchedule provides a mock function with given fields: ctx, symbol
func (_m *MEXCClient) GetTradingSchedule(ctx context.Context, symbol string) (time.Time, time.Time, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetTradingSchedule")
	}

	var r0 time.Time
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (time.Time, time.Time, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Time); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, symbol)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PlaceOrder provides a mock function with given fields: ctx, symbol, side, orderType, quantity, price, timeInForce
func (_m *MEXCClient) PlaceOrder(ctx context.Context, symbol string, side model.OrderSide, orderType model.OrderType, quantity float64, price float64, timeInForce model.TimeInForce) (*model.Order, error) {
	ret := _m.Called(ctx, symbol, side, orderType, quantity, price, timeInForce)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderSide, model.OrderType, float64, float64, model.TimeInForce) (*model.Order, error)); ok {
		return rf(ctx, symbol, side, orderType, quantity, price, timeInForce)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderSide, model.OrderType, float64, float64, model.TimeInForce) *model.Order); ok {
		r0 = rf(ctx, symbol, side, orderType, quantity, price, timeInForce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.OrderSide, model.OrderType, float64, float64, model.TimeInForce) error); ok {
		r1 = rf(ctx, symbol, side, orderType, quantity, price, timeInForce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMEXCClient creates a new instance of MEXCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMEXCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MEXCClient {
	mock := &MEXCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
