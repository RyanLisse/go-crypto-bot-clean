package mocks

package mocks

import (
	context "context"

	market "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/market"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarketDataUseCaseInterface is an autogenerated mock type for the MarketDataUseCaseInterface type
type MarketDataUseCaseInterface struct {
	mock.Mock
}

// GetAllTickers provides a mock function with given fields: ctx, exchange
func (_m *MarketDataUseCaseInterface) GetAllTickers(ctx context.Context, exchange string) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTickers")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*market.Ticker, error)); ok {
		return rf(ctx, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*market.Ticker); ok {
		r0 = rf(ctx, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandles provides a mock function with given fields: ctx, exchange, symbol, interval, start, end, limit
func (_m *MarketDataUseCaseInterface) GetCandles(ctx context.Context, exchange string, symbol string, interval market.Interval, start time.Time, end time.Time, limit int) ([]market.Candle, error) {
	ret := _m.Called(ctx, exchange, symbol, interval, start, end, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCandles")
	}

	var r0 []market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) ([]market.Candle, error)); ok {
		return rf(ctx, exchange, symbol, interval, start, end, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) []market.Candle); ok {
		r0 = rf(ctx, exchange, symbol, interval, start, end, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) error); ok {
		r1 = rf(ctx, exchange, symbol, interval, start, end, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestTickers provides a mock function with given fields: ctx
func (_m *MarketDataUseCaseInterface) GetLatestTickers(ctx context.Context) ([]market.Ticker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTickers")
	}

	var r0 []market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]market.Ticker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []market.Ticker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: ctx, exchange, symbol
func (_m *MarketDataUseCaseInterface) GetOrderBook(ctx context.Context, exchange string, symbol string) (*market.OrderBook, error) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *market.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.OrderBook, error)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.OrderBook); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbol provides a mock function with given fields: ctx, symbol
func (_m *MarketDataUseCaseInterface) GetSymbol(ctx context.Context, symbol string) (*market.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbol")
	}

	var r0 *market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*market.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *market.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbols provides a mock function with given fields: ctx
func (_m *MarketDataUseCaseInterface) GetSymbols(ctx context.Context) ([]*market.Symbol, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbols")
	}

	var r0 []*market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*market.Symbol, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*market.Symbol); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: ctx, exchange, symbol
func (_m *MarketDataUseCaseInterface) GetTicker(ctx context.Context, exchange string, symbol string) (*market.Ticker, error) {
	ret := _m.Called(ctx, exchange, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 *market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.Ticker, error)); ok {
		return rf(ctx, exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.Ticker); ok {
		r0 = rf(ctx, exchange, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, exchange, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMarketDataUseCaseInterface creates a new instance of MarketDataUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketDataUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketDataUseCaseInterface {
	mock := &MarketDataUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
