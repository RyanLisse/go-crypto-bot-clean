package mocks

package mocks

import (
	context "context"

	market "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/market"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarketRepository is an autogenerated mock type for the MarketRepository type
type MarketRepository struct {
	mock.Mock
}

// GetAllTickers provides a mock function with given fields: ctx, exchange
func (_m *MarketRepository) GetAllTickers(ctx context.Context, exchange string) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTickers")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*market.Ticker, error)); ok {
		return rf(ctx, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*market.Ticker); ok {
		r0 = rf(ctx, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandle provides a mock function with given fields: ctx, symbol, exchange, interval, openTime
func (_m *MarketRepository) GetCandle(ctx context.Context, symbol string, exchange string, interval market.Interval, openTime time.Time) (*market.Candle, error) {
	ret := _m.Called(ctx, symbol, exchange, interval, openTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCandle")
	}

	var r0 *market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) (*market.Candle, error)); ok {
		return rf(ctx, symbol, exchange, interval, openTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time) *market.Candle); ok {
		r0 = rf(ctx, symbol, exchange, interval, openTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval, time.Time) error); ok {
		r1 = rf(ctx, symbol, exchange, interval, openTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandles provides a mock function with given fields: ctx, symbol, exchange, interval, start, end, limit
func (_m *MarketRepository) GetCandles(ctx context.Context, symbol string, exchange string, interval market.Interval, start time.Time, end time.Time, limit int) ([]*market.Candle, error) {
	ret := _m.Called(ctx, symbol, exchange, interval, start, end, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCandles")
	}

	var r0 []*market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) ([]*market.Candle, error)); ok {
		return rf(ctx, symbol, exchange, interval, start, end, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) []*market.Candle); ok {
		r0 = rf(ctx, symbol, exchange, interval, start, end, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval, time.Time, time.Time, int) error); ok {
		r1 = rf(ctx, symbol, exchange, interval, start, end, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCandle provides a mock function with given fields: ctx, symbol, exchange, interval
func (_m *MarketRepository) GetLatestCandle(ctx context.Context, symbol string, exchange string, interval market.Interval) (*market.Candle, error) {
	ret := _m.Called(ctx, symbol, exchange, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCandle")
	}

	var r0 *market.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) (*market.Candle, error)); ok {
		return rf(ctx, symbol, exchange, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, market.Interval) *market.Candle); ok {
		r0 = rf(ctx, symbol, exchange, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, market.Interval) error); ok {
		r1 = rf(ctx, symbol, exchange, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestTickers provides a mock function with given fields: ctx, limit
func (_m *MarketRepository) GetLatestTickers(ctx context.Context, limit int) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTickers")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*market.Ticker, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*market.Ticker); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: ctx, symbol, exchange, depth
func (_m *MarketRepository) GetOrderBook(ctx context.Context, symbol string, exchange string, depth int) (*market.OrderBook, error) {
	ret := _m.Called(ctx, symbol, exchange, depth)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *market.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (*market.OrderBook, error)); ok {
		return rf(ctx, symbol, exchange, depth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *market.OrderBook); ok {
		r0 = rf(ctx, symbol, exchange, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, symbol, exchange, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: ctx, symbol, exchange
func (_m *MarketRepository) GetTicker(ctx context.Context, symbol string, exchange string) (*market.Ticker, error) {
	ret := _m.Called(ctx, symbol, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 *market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*market.Ticker, error)); ok {
		return rf(ctx, symbol, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *market.Ticker); ok {
		r0 = rf(ctx, symbol, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, symbol, exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTickerHistory provides a mock function with given fields: ctx, symbol, exchange, start, end
func (_m *MarketRepository) GetTickerHistory(ctx context.Context, symbol string, exchange string, start time.Time, end time.Time) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, symbol, exchange, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetTickerHistory")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) ([]*market.Ticker, error)); ok {
		return rf(ctx, symbol, exchange, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) []*market.Ticker); ok {
		r0 = rf(ctx, symbol, exchange, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, symbol, exchange, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTickersBySymbol provides a mock function with given fields: ctx, symbol, limit
func (_m *MarketRepository) GetTickersBySymbol(ctx context.Context, symbol string, limit int) ([]*market.Ticker, error) {
	ret := _m.Called(ctx, symbol, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTickersBySymbol")
	}

	var r0 []*market.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]*market.Ticker, error)); ok {
		return rf(ctx, symbol, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*market.Ticker); ok {
		r0 = rf(ctx, symbol, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, symbol, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeOldData provides a mock function with given fields: ctx, olderThan
func (_m *MarketRepository) PurgeOldData(ctx context.Context, olderThan time.Time) error {
	ret := _m.Called(ctx, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for PurgeOldData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, olderThan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCandle provides a mock function with given fields: ctx, candle
func (_m *MarketRepository) SaveCandle(ctx context.Context, candle *market.Candle) error {
	ret := _m.Called(ctx, candle)

	if len(ret) == 0 {
		panic("no return value specified for SaveCandle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *market.Candle) error); ok {
		r0 = rf(ctx, candle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCandles provides a mock function with given fields: ctx, candles
func (_m *MarketRepository) SaveCandles(ctx context.Context, candles []*market.Candle) error {
	ret := _m.Called(ctx, candles)

	if len(ret) == 0 {
		panic("no return value specified for SaveCandles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*market.Candle) error); ok {
		r0 = rf(ctx, candles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTicker provides a mock function with given fields: ctx, ticker
func (_m *MarketRepository) SaveTicker(ctx context.Context, ticker *market.Ticker) error {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for SaveTicker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *market.Ticker) error); ok {
		r0 = rf(ctx, ticker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMarketRepository creates a new instance of MarketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketRepository {
	mock := &MarketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
