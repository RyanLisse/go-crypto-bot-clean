package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// NewCoinRepository is an autogenerated mock type for the NewCoinRepository type
type NewCoinRepository struct {
	mock.Mock
}

// FindRecentlyListed provides a mock function with given fields: ctx, thresholdTime
func (_m *NewCoinRepository) FindRecentlyListed(ctx context.Context, thresholdTime time.Time) ([]*model.NewCoin, error) {
	ret := _m.Called(ctx, thresholdTime)

	if len(ret) == 0 {
		panic("no return value specified for FindRecentlyListed")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*model.NewCoin, error)); ok {
		return rf(ctx, thresholdTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*model.NewCoin); ok {
		r0 = rf(ctx, thresholdTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, thresholdTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatus provides a mock function with given fields: ctx, status
func (_m *NewCoinRepository) GetByStatus(ctx context.Context, status model.Status) ([]*model.NewCoin, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Status) ([]*model.NewCoin, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Status) []*model.NewCoin); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: ctx, symbol
func (_m *NewCoinRepository) GetBySymbol(ctx context.Context, symbol string) (*model.NewCoin, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 *model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.NewCoin, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.NewCoin); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecent provides a mock function with given fields: ctx, limit
func (_m *NewCoinRepository) GetRecent(ctx context.Context, limit int) ([]*model.NewCoin, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecent")
	}

	var r0 []*model.NewCoin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.NewCoin, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.NewCoin); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NewCoin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, newCoin
func (_m *NewCoinRepository) Save(ctx context.Context, newCoin *model.NewCoin) error {
	ret := _m.Called(ctx, newCoin)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.NewCoin) error); ok {
		r0 = rf(ctx, newCoin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, newCoin
func (_m *NewCoinRepository) Update(ctx context.Context, newCoin *model.NewCoin) error {
	ret := _m.Called(ctx, newCoin)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.NewCoin) error); ok {
		r0 = rf(ctx, newCoin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNewCoinRepository creates a new instance of NewCoinRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewCoinRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewCoinRepository {
	mock := &NewCoinRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
