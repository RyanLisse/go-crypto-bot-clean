// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// GetNotifications provides a mock function with given fields: ctx, userID, limit, offset
func (_m *NotificationRepository) GetNotifications(ctx context.Context, userID string, limit int, offset int) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNotifications")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]map[string]interface{}, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []map[string]interface{}); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreferences provides a mock function with given fields: ctx, userID
func (_m *NotificationRepository) GetPreferences(ctx context.Context, userID string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferences")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNotification provides a mock function with given fields: ctx, notification
func (_m *NotificationRepository) SaveNotification(ctx context.Context, notification map[string]interface{}) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for SaveNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePreferences provides a mock function with given fields: ctx, userID, preferences
func (_m *NotificationRepository) SavePreferences(ctx context.Context, userID string, preferences map[string]interface{}) error {
	ret := _m.Called(ctx, userID, preferences)

	if len(ret) == 0 {
		panic("no return value specified for SavePreferences")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, userID, preferences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
