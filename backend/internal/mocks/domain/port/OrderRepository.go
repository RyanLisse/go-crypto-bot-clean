// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filters
func (_m *OrderRepository) Count(ctx context.Context, filters map[string]interface{}) (int64, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (int64, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) int64); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, order
func (_m *OrderRepository) Create(ctx context.Context, order *model.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *OrderRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByClientOrderID provides a mock function with given fields: ctx, clientOrderID
func (_m *OrderRepository) GetByClientOrderID(ctx context.Context, clientOrderID string) (*model.Order, error) {
	ret := _m.Called(ctx, clientOrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByClientOrderID")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Order, error)); ok {
		return rf(ctx, clientOrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, clientOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *OrderRepository) GetByID(ctx context.Context, id string) (*model.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatus provides a mock function with given fields: ctx, status, limit, offset
func (_m *OrderRepository) GetByStatus(ctx context.Context, status model.OrderStatus, limit int, offset int) ([]*model.Order, error) {
	ret := _m.Called(ctx, status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderStatus, int, int) ([]*model.Order, error)); ok {
		return rf(ctx, status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderStatus, int, int) []*model.Order); ok {
		r0 = rf(ctx, status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderStatus, int, int) error); ok {
		r1 = rf(ctx, status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: ctx, symbol, limit, offset
func (_m *OrderRepository) GetBySymbol(ctx context.Context, symbol string, limit int, offset int) ([]*model.Order, error) {
	ret := _m.Called(ctx, symbol, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Order, error)); ok {
		return rf(ctx, symbol, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Order); ok {
		r0 = rf(ctx, symbol, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, symbol, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID, limit, offset
func (_m *OrderRepository) GetByUserID(ctx context.Context, userID string, limit int, offset int) ([]*model.Order, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Order, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Order); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, order
func (_m *OrderRepository) Update(ctx context.Context, order *model.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
