package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// RiskConstraintRepository is an autogenerated mock type for the RiskConstraintRepository type
type RiskConstraintRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, constraint
func (_m *RiskConstraintRepository) Create(ctx context.Context, constraint *model.RiskConstraint) error {
	ret := _m.Called(ctx, constraint)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RiskConstraint) error); ok {
		r0 = rf(ctx, constraint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RiskConstraintRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveByUserID provides a mock function with given fields: ctx, userID
func (_m *RiskConstraintRepository) GetActiveByUserID(ctx context.Context, userID string) ([]*model.RiskConstraint, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveByUserID")
	}

	var r0 []*model.RiskConstraint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.RiskConstraint, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.RiskConstraint); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RiskConstraint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *RiskConstraintRepository) GetByID(ctx context.Context, id string) (*model.RiskConstraint, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.RiskConstraint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RiskConstraint, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RiskConstraint); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RiskConstraint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByType provides a mock function with given fields: ctx, userID, riskType
func (_m *RiskConstraintRepository) GetByType(ctx context.Context, userID string, riskType model.RiskType) ([]*model.RiskConstraint, error) {
	ret := _m.Called(ctx, userID, riskType)

	if len(ret) == 0 {
		panic("no return value specified for GetByType")
	}

	var r0 []*model.RiskConstraint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.RiskType) ([]*model.RiskConstraint, error)); ok {
		return rf(ctx, userID, riskType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.RiskType) []*model.RiskConstraint); ok {
		r0 = rf(ctx, userID, riskType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RiskConstraint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.RiskType) error); ok {
		r1 = rf(ctx, userID, riskType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *RiskConstraintRepository) GetByUserID(ctx context.Context, userID string) ([]*model.RiskConstraint, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.RiskConstraint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.RiskConstraint, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.RiskConstraint); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RiskConstraint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, constraint
func (_m *RiskConstraintRepository) Update(ctx context.Context, constraint *model.RiskConstraint) error {
	ret := _m.Called(ctx, constraint)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RiskConstraint) error); ok {
		r0 = rf(ctx, constraint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRiskConstraintRepository creates a new instance of RiskConstraintRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskConstraintRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskConstraintRepository {
	mock := &RiskConstraintRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
