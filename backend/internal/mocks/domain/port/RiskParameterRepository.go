// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// RiskParameterRepository is an autogenerated mock type for the RiskParameterRepository type
type RiskParameterRepository struct {
	mock.Mock
}

// GetParameters provides a mock function with given fields: ctx, userID
func (_m *RiskParameterRepository) GetParameters(ctx context.Context, userID string) (*model.RiskParameters, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetParameters")
	}

	var r0 *model.RiskParameters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RiskParameters, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RiskParameters); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RiskParameters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveParameters provides a mock function with given fields: ctx, params
func (_m *RiskParameterRepository) SaveParameters(ctx context.Context, params *model.RiskParameters) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SaveParameters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RiskParameters) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRiskParameterRepository creates a new instance of RiskParameterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskParameterRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskParameterRepository {
	mock := &RiskParameterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
