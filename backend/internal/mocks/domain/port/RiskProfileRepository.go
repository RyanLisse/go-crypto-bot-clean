package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// RiskProfileRepository is an autogenerated mock type for the RiskProfileRepository type
type RiskProfileRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RiskProfileRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *RiskProfileRepository) GetByUserID(ctx context.Context, userID string) (*model.RiskProfile, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *model.RiskProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RiskProfile, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RiskProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RiskProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, profile
func (_m *RiskProfileRepository) Save(ctx context.Context, profile *model.RiskProfile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RiskProfile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRiskProfileRepository creates a new instance of RiskProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskProfileRepository {
	mock := &RiskProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
