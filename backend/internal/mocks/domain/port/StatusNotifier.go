package mocks

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	status "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/status"
)

// StatusNotifier is an autogenerated mock type for the StatusNotifier type
type StatusNotifier struct {
	mock.Mock
}

// NotifyStatusChange provides a mock function with given fields: ctx, component, oldStatus, newStatus, message
func (_m *StatusNotifier) NotifyStatusChange(ctx context.Context, component string, oldStatus status.Status, newStatus status.Status, message string) error {
	ret := _m.Called(ctx, component, oldStatus, newStatus, message)

	if len(ret) == 0 {
		panic("no return value specified for NotifyStatusChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, status.Status, status.Status, string) error); ok {
		r0 = rf(ctx, component, oldStatus, newStatus, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifySystemStatusChange provides a mock function with given fields: ctx, oldStatus, newStatus, message
func (_m *StatusNotifier) NotifySystemStatusChange(ctx context.Context, oldStatus status.Status, newStatus status.Status, message string) error {
	ret := _m.Called(ctx, oldStatus, newStatus, message)

	if len(ret) == 0 {
		panic("no return value specified for NotifySystemStatusChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, status.Status, status.Status, string) error); ok {
		r0 = rf(ctx, oldStatus, newStatus, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStatusNotifier creates a new instance of StatusNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatusNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatusNotifier {
	mock := &StatusNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
