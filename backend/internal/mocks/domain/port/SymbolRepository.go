package mocks

package mocks

import (
	context "context"

	market "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/market"
	mock "github.com/stretchr/testify/mock"
)

// SymbolRepository is an autogenerated mock type for the SymbolRepository type
type SymbolRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, symbol
func (_m *SymbolRepository) Create(ctx context.Context, symbol *market.Symbol) error {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *market.Symbol) error); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, symbol
func (_m *SymbolRepository) Delete(ctx context.Context, symbol string) error {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *SymbolRepository) GetAll(ctx context.Context) ([]*market.Symbol, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*market.Symbol, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*market.Symbol); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExchange provides a mock function with given fields: ctx, exchange
func (_m *SymbolRepository) GetByExchange(ctx context.Context, exchange string) ([]*market.Symbol, error) {
	ret := _m.Called(ctx, exchange)

	if len(ret) == 0 {
		panic("no return value specified for GetByExchange")
	}

	var r0 []*market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*market.Symbol, error)); ok {
		return rf(ctx, exchange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*market.Symbol); ok {
		r0 = rf(ctx, exchange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: ctx, symbol
func (_m *SymbolRepository) GetBySymbol(ctx context.Context, symbol string) (*market.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 *market.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*market.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *market.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*market.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, symbol
func (_m *SymbolRepository) Update(ctx context.Context, symbol *market.Symbol) error {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *market.Symbol) error); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSymbolRepository creates a new instance of SymbolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSymbolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SymbolRepository {
	mock := &SymbolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
