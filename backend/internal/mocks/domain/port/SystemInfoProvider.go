package mocks

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	status "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/status"
)

// SystemInfoProvider is an autogenerated mock type for the SystemInfoProvider type
type SystemInfoProvider struct {
	mock.Mock
}

// GetSystemInfo provides a mock function with given fields: ctx
func (_m *SystemInfoProvider) GetSystemInfo(ctx context.Context) (*status.SystemInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemInfo")
	}

	var r0 *status.SystemInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*status.SystemInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *status.SystemInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.SystemInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSystemInfoProvider creates a new instance of SystemInfoProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemInfoProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemInfoProvider {
	mock := &SystemInfoProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
