package mocks

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	status "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/status"
)

// SystemStatusRepository is an autogenerated mock type for the SystemStatusRepository type
type SystemStatusRepository struct {
	mock.Mock
}

// GetComponentHistory provides a mock function with given fields: ctx, name, limit
func (_m *SystemStatusRepository) GetComponentHistory(ctx context.Context, name string, limit int) ([]*status.ComponentStatus, error) {
	ret := _m.Called(ctx, name, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentHistory")
	}

	var r0 []*status.ComponentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]*status.ComponentStatus, error)); ok {
		return rf(ctx, name, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*status.ComponentStatus); ok {
		r0 = rf(ctx, name, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*status.ComponentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, name, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentStatus provides a mock function with given fields: ctx, name
func (_m *SystemStatusRepository) GetComponentStatus(ctx context.Context, name string) (*status.ComponentStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentStatus")
	}

	var r0 *status.ComponentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.ComponentStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.ComponentStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.ComponentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *SystemStatusRepository) GetSystemStatus(ctx context.Context) (*status.SystemStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemStatus")
	}

	var r0 *status.SystemStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*status.SystemStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *status.SystemStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.SystemStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveComponentStatus provides a mock function with given fields: ctx, componentStatus
func (_m *SystemStatusRepository) SaveComponentStatus(ctx context.Context, componentStatus *status.ComponentStatus) error {
	ret := _m.Called(ctx, componentStatus)

	if len(ret) == 0 {
		panic("no return value specified for SaveComponentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *status.ComponentStatus) error); ok {
		r0 = rf(ctx, componentStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSystemStatus provides a mock function with given fields: ctx, _a1
func (_m *SystemStatusRepository) SaveSystemStatus(ctx context.Context, _a1 *status.SystemStatus) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveSystemStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *status.SystemStatus) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSystemStatusRepository creates a new instance of SystemStatusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemStatusRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemStatusRepository {
	mock := &SystemStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
