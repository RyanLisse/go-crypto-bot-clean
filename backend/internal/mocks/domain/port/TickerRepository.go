package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TickerRepository is an autogenerated mock type for the TickerRepository type
type TickerRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *TickerRepository) GetAll(ctx context.Context) ([]*model.Ticker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Ticker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Ticker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySymbol provides a mock function with given fields: ctx, symbol
func (_m *TickerRepository) GetBySymbol(ctx context.Context, symbol string) (*model.Ticker, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 *model.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Ticker, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Ticker); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKlines provides a mock function with given fields: ctx, symbol, interval, from, to, limit
func (_m *TickerRepository) GetKlines(ctx context.Context, symbol string, interval model.KlineInterval, from time.Time, to time.Time, limit int) ([]*model.Kline, error) {
	ret := _m.Called(ctx, symbol, interval, from, to, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetKlines")
	}

	var r0 []*model.Kline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.KlineInterval, time.Time, time.Time, int) ([]*model.Kline, error)); ok {
		return rf(ctx, symbol, interval, from, to, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.KlineInterval, time.Time, time.Time, int) []*model.Kline); ok {
		r0 = rf(ctx, symbol, interval, from, to, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Kline)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.KlineInterval, time.Time, time.Time, int) error); ok {
		r1 = rf(ctx, symbol, interval, from, to, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecent provides a mock function with given fields: ctx, limit
func (_m *TickerRepository) GetRecent(ctx context.Context, limit int) ([]*model.Ticker, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecent")
	}

	var r0 []*model.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.Ticker, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.Ticker); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, ticker
func (_m *TickerRepository) Save(ctx context.Context, ticker *model.Ticker) error {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Ticker) error); ok {
		r0 = rf(ctx, ticker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveKline provides a mock function with given fields: ctx, kline
func (_m *TickerRepository) SaveKline(ctx context.Context, kline *model.Kline) error {
	ret := _m.Called(ctx, kline)

	if len(ret) == 0 {
		panic("no return value specified for SaveKline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Kline) error); ok {
		r0 = rf(ctx, kline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTickerRepository creates a new instance of TickerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTickerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TickerRepository {
	mock := &TickerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
