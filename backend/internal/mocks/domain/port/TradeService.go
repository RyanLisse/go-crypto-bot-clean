package mocks

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// TradeService is an autogenerated mock type for the TradeService type
type TradeService struct {
	mock.Mock
}

// CalculateRequiredQuantity provides a mock function with given fields: ctx, symbol, side, amount
func (_m *TradeService) CalculateRequiredQuantity(ctx context.Context, symbol string, side model.OrderSide, amount float64) (float64, error) {
	ret := _m.Called(ctx, symbol, side, amount)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRequiredQuantity")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderSide, float64) (float64, error)); ok {
		return rf(ctx, symbol, side, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderSide, float64) float64); ok {
		r0 = rf(ctx, symbol, side, amount)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.OrderSide, float64) error); ok {
		r1 = rf(ctx, symbol, side, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrder provides a mock function with given fields: ctx, symbol, orderID
func (_m *TradeService) CancelOrder(ctx context.Context, symbol string, orderID string) error {
	ret := _m.Called(ctx, symbol, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, symbol, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOpenOrders provides a mock function with given fields: ctx, symbol
func (_m *TradeService) GetOpenOrders(ctx context.Context, symbol string) ([]*model.Order, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenOrders")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Order, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Order); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistory provides a mock function with given fields: ctx, symbol, limit, offset
func (_m *TradeService) GetOrderHistory(ctx context.Context, symbol string, limit int, offset int) ([]*model.Order, error) {
	ret := _m.Called(ctx, symbol, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistory")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Order, error)); ok {
		return rf(ctx, symbol, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Order); ok {
		r0 = rf(ctx, symbol, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, symbol, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: ctx, symbol, orderID
func (_m *TradeService) GetOrderStatus(ctx context.Context, symbol string, orderID string) (*model.Order, error) {
	ret := _m.Called(ctx, symbol, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Order, error)); ok {
		return rf(ctx, symbol, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Order); ok {
		r0 = rf(ctx, symbol, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, symbol, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: ctx, request
func (_m *TradeService) PlaceOrder(ctx context.Context, request *model.OrderRequest) (*model.PlaceOrderResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 *model.PlaceOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRequest) (*model.PlaceOrderResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRequest) *model.PlaceOrderResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PlaceOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTradeService creates a new instance of TradeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTradeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TradeService {
	mock := &TradeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
