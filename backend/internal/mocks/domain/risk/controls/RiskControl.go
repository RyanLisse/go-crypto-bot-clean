package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
)

// RiskControl is an autogenerated mock type for the RiskControl type
type RiskControl struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: ctx, userID, profile
func (_m *RiskControl) Evaluate(ctx context.Context, userID string, profile *model.RiskProfile) ([]*model.RiskAssessment, error) {
	ret := _m.Called(ctx, userID, profile)

	if len(ret) == 0 {
		panic("no return value specified for Evaluate")
	}

	var r0 []*model.RiskAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.RiskProfile) ([]*model.RiskAssessment, error)); ok {
		return rf(ctx, userID, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.RiskProfile) []*model.RiskAssessment); ok {
		r0 = rf(ctx, userID, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RiskAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.RiskProfile) error); ok {
		r1 = rf(ctx, userID, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with no fields
func (_m *RiskControl) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRiskType provides a mock function with no fields
func (_m *RiskControl) GetRiskType() model.RiskType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRiskType")
	}

	var r0 model.RiskType
	if rf, ok := ret.Get(0).(func() model.RiskType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RiskType)
	}

	return r0
}

// NewRiskControl creates a new instance of RiskControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskControl {
	mock := &RiskControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
