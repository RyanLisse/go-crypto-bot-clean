// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// AccountUsecase is an autogenerated mock type for the AccountUsecase type
type AccountUsecase struct {
	mock.Mock
}

// GetBalanceHistory provides a mock function with given fields: ctx, userID, asset, days
func (_m *AccountUsecase) GetBalanceHistory(ctx context.Context, userID string, asset model.Asset, days int) ([]*model.BalanceHistory, error) {
	ret := _m.Called(ctx, userID, asset, days)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceHistory")
	}

	var r0 []*model.BalanceHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Asset, int) ([]*model.BalanceHistory, error)); ok {
		return rf(ctx, userID, asset, days)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Asset, int) []*model.BalanceHistory); ok {
		r0 = rf(ctx, userID, asset, days)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BalanceHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Asset, int) error); ok {
		r1 = rf(ctx, userID, asset, days)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *AccountUsecase) GetWallet(ctx context.Context, userID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 *model.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshWallet provides a mock function with given fields: ctx, userID
func (_m *AccountUsecase) RefreshWallet(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountUsecase creates a new instance of AccountUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUsecase {
	mock := &AccountUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
