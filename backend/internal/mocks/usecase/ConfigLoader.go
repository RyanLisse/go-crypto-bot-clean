package mocks

import (
	"github.com/stretchr/testify/mock"
)

// AutoBuyConfig is a type alias to avoid import cycle
type AutoBuyConfig struct {
	// Common fields
	Enabled           bool     `json:"enabled"`
	TargetSymbols     []string `json:"targetSymbols"`
	AllowMarketOrders bool     `json:"allowMarketOrders"`
	MaxOrdersPerDay   int      `json:"maxOrdersPerDay"`
	OrderSizeUSDT     float64  `json:"orderSizeUSDT"`

	// Strategy settings
	PriceDeclinePercent   float64 `json:"priceDeclinePercent"`
	VolumeIncreasePercent float64 `json:"volumeIncreasePercent"`
	MinRSI                float64 `json:"minRSI"`
	MaxRSI                float64 `json:"maxRSI"`

	// Time settings
	CooldownMinutes int `json:"cooldownMinutes"`
}

// ConfigLoader is an autogenerated mock type for the ConfigLoader type
type ConfigLoader struct {
	mock.Mock
}

// LoadAutoBuyConfig provides a mock function with no fields
func (_m *ConfigLoader) LoadAutoBuyConfig() (*AutoBuyConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadAutoBuyConfig")
	}

	var r0 *AutoBuyConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (*AutoBuyConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *AutoBuyConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AutoBuyConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConfigLoader creates a new instance of ConfigLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigLoader {
	mock := &ConfigLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
