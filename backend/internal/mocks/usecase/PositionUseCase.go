// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	model "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// PositionUseCase is an autogenerated mock type for the PositionUseCase type
type PositionUseCase struct {
	mock.Mock
}

// ClosePosition provides a mock function with given fields: ctx, id, exitPrice, exitOrderIDs
func (_m *PositionUseCase) ClosePosition(ctx context.Context, id string, exitPrice float64, exitOrderIDs []string) (*model.Position, error) {
	ret := _m.Called(ctx, id, exitPrice, exitOrderIDs)

	if len(ret) == 0 {
		panic("no return value specified for ClosePosition")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, []string) (*model.Position, error)); ok {
		return rf(ctx, id, exitPrice, exitOrderIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, []string) *model.Position); ok {
		r0 = rf(ctx, id, exitPrice, exitOrderIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64, []string) error); ok {
		r1 = rf(ctx, id, exitPrice, exitOrderIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePosition provides a mock function with given fields: ctx, req
func (_m *PositionUseCase) CreatePosition(ctx context.Context, req model.PositionCreateRequest) (*model.Position, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePosition")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PositionCreateRequest) (*model.Position, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PositionCreateRequest) *model.Position); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PositionCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePosition provides a mock function with given fields: ctx, id
func (_m *PositionUseCase) DeletePosition(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveByUser provides a mock function with given fields: ctx, userID
func (_m *PositionUseCase) GetActiveByUser(ctx context.Context, userID string) ([]*model.Position, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveByUser")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Position, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Position); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID, limit, offset
func (_m *PositionUseCase) GetByUserID(ctx context.Context, userID string, limit int, offset int) ([]*model.Position, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Position, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Position); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClosedPositions provides a mock function with given fields: ctx, fromTime, toTime, limit, offset
func (_m *PositionUseCase) GetClosedPositions(ctx context.Context, fromTime time.Time, toTime time.Time, limit int, offset int) ([]*model.Position, error) {
	ret := _m.Called(ctx, fromTime, toTime, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetClosedPositions")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) ([]*model.Position, error)); ok {
		return rf(ctx, fromTime, toTime, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) []*model.Position); ok {
		r0 = rf(ctx, fromTime, toTime, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, fromTime, toTime, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenPositions provides a mock function with given fields: ctx
func (_m *PositionUseCase) GetOpenPositions(ctx context.Context) ([]*model.Position, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenPositions")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Position, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Position); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenPositionsByType provides a mock function with given fields: ctx, positionType
func (_m *PositionUseCase) GetOpenPositionsByType(ctx context.Context, positionType model.PositionType) ([]*model.Position, error) {
	ret := _m.Called(ctx, positionType)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenPositionsByType")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PositionType) ([]*model.Position, error)); ok {
		return rf(ctx, positionType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PositionType) []*model.Position); ok {
		r0 = rf(ctx, positionType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PositionType) error); ok {
		r1 = rf(ctx, positionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPositionByID provides a mock function with given fields: ctx, id
func (_m *PositionUseCase) GetPositionByID(ctx context.Context, id string) (*model.Position, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPositionByID")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Position, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Position); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPositionsBySymbol provides a mock function with given fields: ctx, symbol, limit, offset
func (_m *PositionUseCase) GetPositionsBySymbol(ctx context.Context, symbol string, limit int, offset int) ([]*model.Position, error) {
	ret := _m.Called(ctx, symbol, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPositionsBySymbol")
	}

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*model.Position, error)); ok {
		return rf(ctx, symbol, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*model.Position); ok {
		r0 = rf(ctx, symbol, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, symbol, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStopLoss provides a mock function with given fields: ctx, id, stopLoss
func (_m *PositionUseCase) SetStopLoss(ctx context.Context, id string, stopLoss float64) (*model.Position, error) {
	ret := _m.Called(ctx, id, stopLoss)

	if len(ret) == 0 {
		panic("no return value specified for SetStopLoss")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*model.Position, error)); ok {
		return rf(ctx, id, stopLoss)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *model.Position); ok {
		r0 = rf(ctx, id, stopLoss)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, id, stopLoss)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTakeProfit provides a mock function with given fields: ctx, id, takeProfit
func (_m *PositionUseCase) SetTakeProfit(ctx context.Context, id string, takeProfit float64) (*model.Position, error) {
	ret := _m.Called(ctx, id, takeProfit)

	if len(ret) == 0 {
		panic("no return value specified for SetTakeProfit")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*model.Position, error)); ok {
		return rf(ctx, id, takeProfit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *model.Position); ok {
		r0 = rf(ctx, id, takeProfit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, id, takeProfit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePosition provides a mock function with given fields: ctx, id, req
func (_m *PositionUseCase) UpdatePosition(ctx context.Context, id string, req model.PositionUpdateRequest) (*model.Position, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePosition")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PositionUpdateRequest) (*model.Position, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PositionUpdateRequest) *model.Position); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.PositionUpdateRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePositionPrice provides a mock function with given fields: ctx, id, currentPrice
func (_m *PositionUseCase) UpdatePositionPrice(ctx context.Context, id string, currentPrice float64) (*model.Position, error) {
	ret := _m.Called(ctx, id, currentPrice)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePositionPrice")
	}

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*model.Position, error)); ok {
		return rf(ctx, id, currentPrice)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *model.Position); ok {
		r0 = rf(ctx, id, currentPrice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, id, currentPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPositionUseCase creates a new instance of PositionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPositionUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PositionUseCase {
	mock := &PositionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
