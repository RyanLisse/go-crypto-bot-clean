package mocks

package mocks

import (
	usecase "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// RiskUsecase is an autogenerated mock type for the RiskUsecase type
type RiskUsecase struct {
	mock.Mock
}

// CheckRisk provides a mock function with given fields: order
func (_m *RiskUsecase) CheckRisk(order usecase.OrderParameters) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CheckRisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(usecase.OrderParameters) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRiskUsecase creates a new instance of RiskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskUsecase {
	mock := &RiskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
