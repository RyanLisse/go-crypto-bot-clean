package mocks

import (
	context "context"

	status "github.com/RyanLisse/go-crypto-bot-clean/backend/internal/domain/model/status"
	mock "github.com/stretchr/testify/mock"
)

// StatusUseCase is an autogenerated mock type for the StatusUseCase type
type StatusUseCase struct {
	mock.Mock
}

// ControlComponent provides a mock function with given fields: ctx, control
func (_m *StatusUseCase) ControlComponent(ctx context.Context, control status.ProcessControl) (*status.ProcessControlResponse, error) {
	ret := _m.Called(ctx, control)

	if len(ret) == 0 {
		panic("no return value specified for ControlComponent")
	}

	var r0 *status.ProcessControlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, status.ProcessControl) (*status.ProcessControlResponse, error)); ok {
		return rf(ctx, control)
	}
	if rf, ok := ret.Get(0).(func(context.Context, status.ProcessControl) *status.ProcessControlResponse); ok {
		r0 = rf(ctx, control)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.ProcessControlResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, status.ProcessControl) error); ok {
		r1 = rf(ctx, control)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentStatus provides a mock function with given fields: ctx, name
func (_m *StatusUseCase) GetComponentStatus(ctx context.Context, name string) (*status.ComponentStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentStatus")
	}

	var r0 *status.ComponentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.ComponentStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.ComponentStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.ComponentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *StatusUseCase) GetSystemStatus(ctx context.Context) (*status.SystemStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemStatus")
	}

	var r0 *status.SystemStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*status.SystemStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *status.SystemStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.SystemStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterProvider provides a mock function with given fields: provider
func (_m *StatusUseCase) RegisterProvider(provider interface{}) {
	_m.Called(provider)
}

// SubscribeToChanges provides a mock function with given fields: ch
func (_m *StatusUseCase) SubscribeToChanges(ch chan status.StatusChange) error {
	ret := _m.Called(ch)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan status.StatusChange) error); ok {
		r0 = rf(ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *StatusUseCase) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *StatusUseCase) Stop() {
	_m.Called()
}

// NewStatusUseCase creates a new instance of StatusUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatusUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatusUseCase {
	mock := &StatusUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
