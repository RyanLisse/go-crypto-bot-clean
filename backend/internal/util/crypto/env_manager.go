package crypto

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"sync"
)

// EnvManager manages environment variables securely
type EnvManager struct {
	encryptionSvc EncryptionService
	envPath       string
	mu            sync.RWMutex
}

// NewEnvManager creates a new EnvManager
func NewEnvManager(encryptionSvc EncryptionService, envPath string) *EnvManager {
	return &EnvManager{
		encryptionSvc: encryptionSvc,
		envPath:       envPath,
	}
}

// LoadEnv loads environment variables from a file
func (m *EnvManager) LoadEnv() error {
	m.mu.Lock()
	defer m.mu.Unlock()

	// Check if file exists
	if _, err := os.Stat(m.envPath); os.IsNotExist(err) {
		return nil // File doesn't exist, nothing to load
	}

	// Open file
	file, err := os.Open(m.envPath)
	if err != nil {
		return fmt.Errorf("failed to open env file: %w", err)
	}
	defer file.Close()

	// Read file line by line
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()

		// Skip empty lines and comments
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// Parse line
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue // Invalid line format
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Check if value is encrypted
		if strings.HasPrefix(value, "ENC:") {
			// Decrypt value
			encryptedValue := strings.TrimPrefix(value, "ENC:")
			decryptedValue, err := m.encryptionSvc.Decrypt([]byte(encryptedValue))
			if err != nil {
				return fmt.Errorf("failed to decrypt env value for %s: %w", key, err)
			}
			value = decryptedValue
		}

		// Set environment variable
		os.Setenv(key, value)
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("failed to read env file: %w", err)
	}

	return nil
}

// SaveEnv saves environment variables to a file
func (m *EnvManager) SaveEnv(vars map[string]string, encrypt bool) error {
	m.mu.Lock()
	defer m.mu.Unlock()

	// Create file
	file, err := os.Create(m.envPath)
	if err != nil {
		return fmt.Errorf("failed to create env file: %w", err)
	}
	defer file.Close()

	// Write header
	fmt.Fprintln(file, "# Environment variables")
	fmt.Fprintln(file, "# Generated by EnvManager")
	fmt.Fprintln(file, "")

	// Write variables
	for key, value := range vars {
		if encrypt {
			// Encrypt value
			encryptedValue, err := m.encryptionSvc.Encrypt(value)
			if err != nil {
				return fmt.Errorf("failed to encrypt env value for %s: %w", key, err)
			}
			fmt.Fprintf(file, "%s=ENC:%s\n", key, string(encryptedValue))
		} else {
			fmt.Fprintf(file, "%s=%s\n", key, value)
		}
	}

	return nil
}

// GetEnv gets an environment variable
func (m *EnvManager) GetEnv(key string) string {
	return os.Getenv(key)
}

// SetEnv sets an environment variable
func (m *EnvManager) SetEnv(key, value string) error {
	return os.Setenv(key, value)
}

// EncryptEnvFile encrypts an existing .env file
func (m *EnvManager) EncryptEnvFile(inputPath, outputPath string) error {
	m.mu.Lock()
	defer m.mu.Unlock()

	// Open input file
	inputFile, err := os.Open(inputPath)
	if err != nil {
		return fmt.Errorf("failed to open input env file: %w", err)
	}
	defer inputFile.Close()

	// Create output file
	outputFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create output env file: %w", err)
	}
	defer outputFile.Close()

	// Write header
	fmt.Fprintln(outputFile, "# Environment variables")
	fmt.Fprintln(outputFile, "# Generated by EnvManager")
	fmt.Fprintln(outputFile, "")

	// Read input file line by line
	scanner := bufio.NewScanner(inputFile)
	for scanner.Scan() {
		line := scanner.Text()

		// Skip empty lines and comments
		if line == "" || strings.HasPrefix(line, "#") {
			fmt.Fprintln(outputFile, line)
			continue
		}

		// Parse line
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			fmt.Fprintln(outputFile, line) // Keep invalid lines as-is
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Skip already encrypted values
		if strings.HasPrefix(value, "ENC:") {
			fmt.Fprintln(outputFile, line)
			continue
		}

		// Encrypt value
		encryptedValue, err := m.encryptionSvc.Encrypt(value)
		if err != nil {
			return fmt.Errorf("failed to encrypt env value for %s: %w", key, err)
		}

		// Write encrypted value
		fmt.Fprintf(outputFile, "%s=ENC:%s\n", key, string(encryptedValue))
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("failed to read input env file: %w", err)
	}

	return nil
}

// DecryptEnvFile decrypts an encrypted .env file
func (m *EnvManager) DecryptEnvFile(inputPath, outputPath string) error {
	m.mu.Lock()
	defer m.mu.Unlock()

	// Open input file
	inputFile, err := os.Open(inputPath)
	if err != nil {
		return fmt.Errorf("failed to open input env file: %w", err)
	}
	defer inputFile.Close()

	// Create output file
	outputFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create output env file: %w", err)
	}
	defer outputFile.Close()

	// Write header
	fmt.Fprintln(outputFile, "# Environment variables")
	fmt.Fprintln(outputFile, "# Generated by EnvManager")
	fmt.Fprintln(outputFile, "")

	// Read input file line by line
	scanner := bufio.NewScanner(inputFile)
	for scanner.Scan() {
		line := scanner.Text()

		// Skip empty lines and comments
		if line == "" || strings.HasPrefix(line, "#") {
			fmt.Fprintln(outputFile, line)
			continue
		}

		// Parse line
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			fmt.Fprintln(outputFile, line) // Keep invalid lines as-is
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Skip non-encrypted values
		if !strings.HasPrefix(value, "ENC:") {
			fmt.Fprintln(outputFile, line)
			continue
		}

		// Decrypt value
		encryptedValue := strings.TrimPrefix(value, "ENC:")
		decryptedValue, err := m.encryptionSvc.Decrypt([]byte(encryptedValue))
		if err != nil {
			return fmt.Errorf("failed to decrypt env value for %s: %w", key, err)
		}

		// Write decrypted value
		fmt.Fprintf(outputFile, "%s=%s\n", key, decryptedValue)
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("failed to read input env file: %w", err)
	}

	return nil
}
