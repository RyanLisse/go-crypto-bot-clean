This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
docs/
  ui-audit/
    comparison-results/
      component-tracker.md
    component-inventory/
      button.md
      card.md
      input.md
      README.md
      template.md
    components/
      alert.md
      badge.md
      button.md
      card.md
      dialog.md
    issues/
      card-component-inconsistency.md
    component-tracker.md
    implementation-plan.md
    progress-report.md
    progress.md
    README.md
    test-plan.md
  BUILD.md
  CLERK_SETUP.md
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    __tests__/
      page.test.tsx
    (dashboard)/
      address-validator/
        page.tsx
      backtesting/
        [backtestId]/
          page.tsx
        page.tsx
      config/
        page.tsx
      dashboard/
        page.tsx
      new-coins/
        page.tsx
      portfolio/
        [assetId]/
          page.tsx
        page.tsx
      settings/
        page.tsx
      system/
        page.tsx
      testing/
        page.tsx
      trading/
        page.tsx
      layout.tsx
      page.tsx
    api/
      address-validator/
        info/
          route.ts
        networks/
          route.ts
        validate/
          route.ts
      wallet-verification/
        route.ts
      wallets/
        route.ts
    sign-in/
      [[...sign-in]]/
        page.tsx
    sign-up/
      [[...sign-up]]/
        page.tsx
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  components/
    charts/
      __tests__/
        BacktestingVisualizations.test.tsx
      BacktestChart.tsx
      CryptoChart.tsx
      MonteCarloChart.tsx
      MonthlyReturnsChart.tsx
      PerformanceMetrics.tsx
      TradeDistributionChart.tsx
    dashboard/
      __tests__/
        SimpleAccountBalance.test.tsx
      AccountBalance.tsx
      AccountSummary.tsx
      AIInsights.tsx
      MLInsights.tsx
      Overview.tsx
      PerformanceChart.tsx
      PortfolioOverview.tsx
      RecentActivity.tsx
      SalesHistory.tsx
      SimpleAccountBalance.tsx
      StatsCard.tsx
      TopHoldings.tsx
      UpcomingCoins.tsx
    layout/
      AppSidebar.tsx
      ConnectionStatus.tsx
      ErrorBoundary.tsx
      Header.tsx
      index.tsx
      MainLayout.tsx
      PageLayout.tsx
      Sidebar.tsx
    portfolio/
      performance/
        __tests__/
          dataProcessor.test.ts
          metrics.test.ts
          PortfolioPerformance.test.tsx
          usePortfolioData.test.ts
          usePortfolioMetrics.test.ts
        AssetAllocationChart.tsx
        dataProcessor.ts
        HistoricalPerformanceChart.tsx
        index.ts
        metrics.ts
        PerformanceAttribution.tsx
        PerformanceMetricsDashboard.tsx
        PortfolioPerformance.tsx
        RiskAnalysisChart.tsx
        usePortfolioData.ts
        usePortfolioMetrics.ts
      PortfolioCard.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      date-picker.tsx
      date-range-picker.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    AddressValidatorExample.tsx
    ApiToggle.tsx
    BacktestList.tsx
    ProtectedRoute.tsx
    StrategyList.tsx
  contexts/
    auth-context.tsx
  hooks/
    queries.ts
    use-mobile.ts
    use-toast.ts
    use-websocket.ts
    useAddressValidator.ts
    useBackendStatus.ts
    useBacktests.ts
    useRepository.ts
    useStrategies.ts
  lib/
    repositories/
      backtest.repository.ts
      index.ts
      interfaces.ts
      strategy.repository.ts
    utils.ts
  test/
    bun-custom-jsdom.ts
    pretest.js
    setup.ts
    test-environment.ts
    vi-mock.ts
  config.ts
  middleware.ts
  test-setup.ts
vitest-example/
  HelloWorld.test.tsx
  HelloWorld.tsx
.gitignore
bunfig.toml
components.json
eslint.config.js
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
tsconfig.test.json
vitest.config.ts
vitest.workspace.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/ui-audit/comparison-results/component-tracker.md">
# UI Component Comparison Tracker

This document tracks the status of all UI components in the migration from Vite to Next.js.

## Status Legend

- ‚úÖ **Consistent**: Visually and functionally equivalent
- üü° **Minor issues**: Small visual or behavioral differences
- üî¥ **Major issues**: Significant visual or behavioral differences
- ‚ö†Ô∏è **Not implemented**: Component exists in Vite but not in Next.js
- üÜï **New component**: Component exists in Next.js but not in Vite

## Core Components

| Component | Status | Visual Parity | Functional Parity | Priority | Notes |
|-----------|--------|---------------|-------------------|----------|-------|
| Button    | üü°    | üü° Minor Issues | ‚úÖ Identical | Medium | Border radius and hover state differences |
| Input     | üü°    | üü° Minor Issues | ‚úÖ Identical | Low    | Focus color and padding differences |
| Card      | üî¥    | üî¥ Major Issues | üü° Minor Issues | High   | Shadow, border radius, padding & hover inconsistencies |
| Modal     |        |               |                   |          |       |
| Tabs      |        |               |                   |          |       |
| Table     |        |               |                   |          |       |
| Alert     |        |               |                   |          |       |
| Avatar    |        |               |                   |          |       |
| Badge     |        |               |                   |          |       |
| Toggle    |        |               |                   |          |       |

## Layout Components

| Component    | Status | Visual Parity | Functional Parity | Priority | Notes |
|--------------|--------|---------------|-------------------|----------|-------|
| Header       |        |               |                   |          |       |
| Sidebar      |        |               |                   |          |       |
| Footer       |        |               |                   |          |       |
| Grid         |        |               |                   |          |       |
| Container    |        |               |                   |          |       |
| Flex Layout  |        |               |                   |          |       |

## Form Components

| Component    | Status | Visual Parity | Functional Parity | Priority | Notes |
|--------------|--------|---------------|-------------------|----------|-------|
| Form         |        |               |                   |          |       |
| Checkbox     |        |               |                   |          |       |
| Radio Button |        |               |                   |          |       |
| Select       |        |               |                   |          |       |
| TextArea     |        |               |                   |          |       |
| DatePicker   |        |               |                   |          |       |
| FileUpload   |        |               |                   |          |       |

## Data Visualization Components

| Component    | Status | Visual Parity | Functional Parity | Priority | Notes |
|--------------|--------|---------------|-------------------|----------|-------|
| Chart        |        |               |                   |          |       |
| LineChart    |        |               |                   |          |       |
| BarChart     |        |               |                   |          |       |
| PriceDisplay |        |               |                   |          |       |
| Sparkline    |        |               |                   |          |       |
| Candlestick  |        |               |                   |          |       |

## Navigation Components

| Component    | Status | Visual Parity | Functional Parity | Priority | Notes |
|--------------|--------|---------------|-------------------|----------|-------|
| NavBar       |        |               |                   |          |       |
| Menu         |        |               |                   |          |       |
| Breadcrumbs  |        |               |                   |          |       |
| Pagination   |        |               |                   |          |       |
| Stepper      |        |               |                   |          |       |

## Pages

| Page         | Status | Visual Parity | Functional Parity | Priority | Notes |
|--------------|--------|---------------|-------------------|----------|-------|
| Dashboard    |        |               |                   |          |       |
| Portfolio    |        |               |                   |          |       |
| AssetDetails |        |               |                   |          |       |
| Market       |        |               |                   |          |       |
| Settings     |        |               |                   |          |       |
| Authentication|       |               |                   |          |       |

## Progress Summary

- Total Components: 35
- ‚úÖ Consistent: 0 (0%)
- üü° Minor Issues: 2 (5.7%)  
- üî¥ Major Issues: 1 (2.9%)
- ‚ö†Ô∏è Not Implemented: 0 (0%)
- üÜï New Components: 0 (0%)
- Components Remaining: 32 (91.4%)

*Last Updated: April 16, 2023*
</file>

<file path="docs/ui-audit/component-inventory/button.md">
# Component Inventory: Button

## Basic Information
- **Component Name**: Button
- **Type**: UI Component
- **Purpose**: Primary interactive element for user actions
- **Used In**: Dashboard, Portfolio, Settings, Authentication pages

## Implementation Details
### Vite Implementation
- **File Location**: `src/components/ui/Button.tsx`
- **Dependencies**: `classnames`, `react`
- **Props/Interface**: Supports primary/secondary variants, sizes (sm, md, lg), disabled state, loading state, icon positioning

### Next.js Implementation
- **File Location**: `frontend_next/src/components/ui/Button.tsx`
- **Dependencies**: `clsx`, `react`, `next/link` (for link buttons)
- **Props/Interface**: Same as Vite with additional NextLink integration

## Visual & Functional Comparison
- **Visual Parity**: üü° Minor Issues
- **Functional Parity**: ‚úÖ Identical
- **Notes on Differences**: 
  - Slight color difference in hover state for secondary buttons
  - Border radius is 4px in Vite but 6px in Next.js implementation
  - Loading spinner animation is smoother in Next.js version

## State Management & Performance
- **State Management Differences**: Next.js version handles loading state with React 18 transitions for smoother UX
- **Performance Comparison**: ‚úÖ Better - Next.js version has optimized rendering for button state changes

## Assessment
- **Status**: üü° Minor Issues
- **Priority for Fix**: Medium
- **Recommended Actions**: 
  - Align border radius to match Vite version (4px)
  - Adjust hover state color for secondary buttons to match Vite implementation
  - Document the improved loading state behavior as an intentional enhancement
</file>

<file path="docs/ui-audit/component-inventory/card.md">
# Card Component Inventory

## Basic Information
- **Component Name**: Card
- **Category**: Core Component
- **Description**: A container component that groups related content and UI elements with consistent styling and spacing.
- **Usage Frequency**: High (used across most dashboard views, portfolio sections, and asset details)

## Implementation Details

### Next.js Implementation
- **File Location**: `frontend_next/src/components/ui/Card.tsx`
- **Style Implementation**: Tailwind CSS with custom classes
- **Responsive Behavior**: Adapts to container width, maintains consistent padding
- **Animation/Transitions**: Subtle hover elevation effect
- **Variants**:
  - Default (with rounded corners and shadow)
  - Borderless (no border, just shadow)
  - Elevated (more pronounced shadow)
  - Interactive (pointer events, hover effects)

### Vite Implementation  
- **File Location**: `src/components/ui/Card/Card.tsx`
- **Style Implementation**: Styled Components with theme variables
- **Responsive Behavior**: Similar to Next.js version, fluid width
- **Animation/Transitions**: None
- **Variants**:
  - Default (with rounded corners and shadow)
  - Flat (no shadow)
  - Bordered (explicit border instead of shadow)

## Props & API

### Common Props (Both Implementations)
- `children`: ReactNode - Content to render inside the card
- `className`: string - Additional CSS classes
- `variant`: string - Card style variant

### Next.js Specific Props
- `isLoading`: boolean - Show skeleton loading state
- `hoverEffect`: boolean - Enable/disable hover elevation
- `as`: ElementType - Render as different HTML element

### Vite Specific Props
- `fullWidth`: boolean - Expand to 100% of container width
- `noPadding`: boolean - Remove default padding

## Visual Comparison

### Style Differences
- **Shadow**: 
  - Next.js: `filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.12))`
  - Vite: `box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1)`
- **Border Radius**:
  - Next.js: 12px
  - Vite: 8px
- **Default Padding**:
  - Next.js: 16px
  - Vite: 12px
- **Hover Effects**:
  - Next.js: Subtle elevation increase
  - Vite: None

## Accessibility
- Both implementations use appropriate semantic HTML elements
- Both use sufficient color contrast for borders and backgrounds
- Next.js version includes proper ARIA attributes for skeleton loaders

## Usage Examples

### Next.js Example
```tsx
<Card className="w-full max-w-md">
  <CardHeader>
    <CardTitle>Portfolio Summary</CardTitle>
    <CardDescription>Your assets at a glance</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Current value: $10,243.55</p>
  </CardContent>
  <CardFooter>
    <Button variant="outline">View Details</Button>
  </CardFooter>
</Card>
```

### Vite Example
```tsx
<Card variant="default">
  <CardHeader>
    <CardTitle>Portfolio Summary</CardTitle>
    <CardDescription>Your assets at a glance</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Current value: $10,243.55</p>
  </CardContent>
  <CardFooter>
    <Button variant="outline">View Details</Button>
  </CardFooter>
</Card>
```

## Recommended Improvements
1. Standardize shadow implementation (preferably `box-shadow` for better performance)
2. Align border-radius values to design system specification (8px recommended)
3. Normalize padding across implementations
4. Decide on consistent hover behavior
5. Merge prop APIs to support both implementation patterns

## Additional Notes
- The Next.js implementation includes loading state skeleton not present in Vite version
- Card child components (Header, Title, Description, Content, Footer) should also be compared separately
</file>

<file path="docs/ui-audit/component-inventory/input.md">
# Component Inventory: Input

## Basic Information
- **Component Name**: Input
- **Type**: UI Component
- **Purpose**: Text entry field for user data input
- **Used In**: Login forms, Search bars, Settings, Portfolio management

## Implementation Details
### Vite Implementation
- **File Location**: `src/components/ui/Input.tsx`
- **Dependencies**: `classnames`, `react`
- **Props/Interface**: Supports text/number/email types, placeholder, label, error state, helper text, disabled state

### Next.js Implementation
- **File Location**: `frontend_next/src/components/ui/Input.tsx`
- **Dependencies**: `clsx`, `react`
- **Props/Interface**: Same as Vite with additional controlled component optimizations

## Visual & Functional Comparison
- **Visual Parity**: üü° Minor Issues
- **Functional Parity**: ‚úÖ Identical
- **Notes on Differences**: 
  - Focus ring color is slightly different (#3b82f6 in Vite vs #2563eb in Next.js)
  - Input padding is 0.75rem in Vite vs 0.625rem in Next.js
  - Error state animation is more subtle in Next.js implementation

## State Management & Performance
- **State Management Differences**: Next.js version uses React 18 features for more efficient re-renders
- **Performance Comparison**: ‚úÖ Better - Next.js version handles rapid typing with less input lag

## Assessment
- **Status**: üü° Minor Issues
- **Priority for Fix**: Low
- **Recommended Actions**: 
  - Standardize focus ring color to match design system
  - Adjust padding to match Vite implementation (0.75rem)
  - Consider keeping the improved error state animation as an enhancement
</file>

<file path="docs/ui-audit/component-inventory/README.md">
# UI Component Inventory

This directory contains a comprehensive inventory of UI components from both the original Vite implementation and the new Next.js implementation, allowing for structured comparison and consistency analysis.

## Purpose

The purpose of this inventory is to:
1. Document all UI components across both implementations
2. Establish visual and functional consistency between implementations
3. Identify and address inconsistencies or issues
4. Ensure accessibility standards are maintained
5. Track component migration progress

## Structure

- `README.md` - This overview file
- `template.md` - Template for component documentation
- `index.md` - Complete list of all components with status
- Individual component files named according to their function (e.g., `button.md`, `card.md`)
- `/screenshots/` - Visual references for each component
  - `/vite/` - Screenshots from original Vite implementation
  - `/nextjs/` - Screenshots from new Next.js implementation

## Component Documentation Guide

Each component should be documented following the template provided in `template.md`. Documentation should include:

- Basic component information (name, type, purpose)
- Implementation details for both Vite and Next.js
- Visual and functional comparison
- Accessibility considerations
- Performance considerations
- Consistency rating
- Issues and recommendations

## Adding a New Component to Inventory

1. Copy `template.md` to a new file named after the component
2. Fill in all required sections
3. Take screenshots of both implementations and add to respective directories
4. Add component to `index.md` with current status

## Consistency Ratings

- **Complete (5/5)**: Component visually and functionally identical across implementations
- **High (4/5)**: Minor visual differences but functionally equivalent
- **Medium (3/5)**: Noticeable visual differences but core functionality preserved
- **Low (2/5)**: Significant visual and minor functional differences
- **Inconsistent (1/5)**: Major functional and visual differences
- **Not Migrated (0/5)**: Component exists in Vite but not yet in Next.js

## Progress Tracking

The overall migration progress and component status is tracked in `index.md`.
</file>

<file path="docs/ui-audit/component-inventory/template.md">
# Component Inventory: [Component Name]

## Basic Information
- **Component Name**: 
- **Type**: (UI Component, Layout, Page, etc.)
- **Purpose**: 
- **Used In**: (List pages/sections)

## Implementation Details
### Vite Implementation
- **File Location**: 
- **Dependencies**: 
- **Props/Interface**: (Brief description)

### Next.js Implementation
- **File Location**: 
- **Dependencies**: 
- **Props/Interface**: (Brief description)

## Visual & Functional Comparison
- **Visual Parity**: ‚úÖ Identical / üü° Minor Issues / üî¥ Major Issues
- **Functional Parity**: ‚úÖ Identical / üü° Minor Issues / üî¥ Major Issues
- **Notes on Differences**:

## State Management & Performance
- **State Management Differences**:
- **Performance Comparison**: ‚úÖ Better / üü° Equivalent / üî¥ Worse

## Assessment
- **Status**: ‚úÖ Consistent / üü° Minor Issues / üî¥ Major Issues / ‚ö†Ô∏è Not Implemented / üÜï New Component
- **Priority for Fix**: High / Medium / Low
- **Recommended Actions**:

## Notes and Additional Information
</file>

<file path="docs/ui-audit/components/alert.md">
# Alert Component

The Alert component is used to display important messages or feedback to users. It provides context through colors, icons, and variant styles to communicate status and severity.

## Usage

```tsx
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert"
import { Info } from "lucide-react"

export function AlertDemo() {
  return (
    <Alert>
      <Info className="h-4 w-4" />
      <AlertTitle>Information</AlertTitle>
      <AlertDescription>
        This is an informational message.
      </AlertDescription>
    </Alert>
  )
}
```

## Features

- Built with React and fully typed with TypeScript
- Two variants for communicating different statuses
- Supports custom icons for enhanced visual cues
- Accessible design with appropriate ARIA attributes
- Composable structure with title and description components
- Customizable through className props

## API Reference

### Alert

The root alert component that serves as a container.

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `variant` | `'default' \| 'destructive'` | `'default'` | Controls the visual style of the alert |
| `className` | `string` | - | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | - | All standard div attributes |

### AlertTitle

The title component for the alert that provides a concise description of the message.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLHeadingElement>` | All standard heading attributes |

### AlertDescription

The description component that provides additional details about the alert.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLParagraphElement>` | All standard paragraph attributes |

## Variants

### Default

The standard alert style with a neutral appearance for informational content.

```tsx
<Alert>
  <AlertTitle>Information</AlertTitle>
  <AlertDescription>
    This is a standard informational alert.
  </AlertDescription>
</Alert>
```

### Destructive

A variant with a more critical appearance for warnings, errors, or destructive actions.

```tsx
<Alert variant="destructive">
  <AlertTitle>Error</AlertTitle>
  <AlertDescription>
    Your session has expired. Please log in again.
  </AlertDescription>
</Alert>
```

## Styling

The Alert component uses Tailwind CSS for styling with the following default classes:

- Alert: `relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground`
- AlertTitle: `mb-1 font-medium leading-none tracking-tight`
- AlertDescription: `text-sm [&_p]:leading-relaxed`

## Examples

### With Icon

Icons can be added to provide additional visual context:

```tsx
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"

export function AlertWithIcon() {
  return (
    <Alert variant="destructive">
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>Warning</AlertTitle>
      <AlertDescription>
        Your account is about to reach its usage limit.
      </AlertDescription>
    </Alert>
  )
}
```

### Information Alert

For general information and notifications:

```tsx
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert"
import { Info } from "lucide-react"

export function InformationAlert() {
  return (
    <Alert>
      <Info className="h-4 w-4" />
      <AlertTitle>Information</AlertTitle>
      <AlertDescription>
        We've just released a new feature. Check it out in your dashboard.
      </AlertDescription>
    </Alert>
  )
}
```

### Success Alert

For success messages and confirmations:

```tsx
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert"
import { CheckCircle } from "lucide-react"

export function SuccessAlert() {
  return (
    <Alert className="border-green-500 text-green-700 dark:text-green-400">
      <CheckCircle className="h-4 w-4 text-green-700 dark:text-green-400" />
      <AlertTitle>Success</AlertTitle>
      <AlertDescription>
        Your changes have been successfully saved.
      </AlertDescription>
    </Alert>
  )
}
```

## Accessibility

- Uses the `role="alert"` attribute to ensure proper screen reader announcement
- Provides clear visual and semantic structure with title and description
- Maintains appropriate color contrast ratios for all variants
- Icon placement supports both visual design and assistive technology

## Design Guidelines

- Use alerts sparingly to avoid overwhelming users
- Select the appropriate variant for the message:
  - Use default for non-critical information
  - Use destructive for errors or warnings
- Provide clear, concise messaging that explains:
  - What happened
  - Why it happened (if relevant)
  - What the user should do next (if action is required)
- Include an icon when it enhances understanding of the message
- Position alerts in a consistent location in the interface
- Consider using animations for alerts that appear dynamically, but ensure they don't interfere with accessibility

## Implementation Comparison

| Aspect | Vite Implementation | Next.js Implementation | Status |
|--------|---------------------|------------------------|--------|
| Base styling | Identical | Identical | ‚úÖ Match |
| Variants | Default, Destructive | Default, Destructive | ‚úÖ Match |
| Component structure | Alert, Title, Description | Alert, Title, Description | ‚úÖ Match |
| ARIA attributes | role="alert" | role="alert" | ‚úÖ Match |
| Icon support | Yes, with similar positioning | Yes, with similar positioning | ‚úÖ Match |
| Typography | Font size and weights match | Font size and weights match | ‚úÖ Match |

## Recommended Actions

No significant inconsistencies were found between the Vite and Next.js implementations of the Alert component. Both provide the same functionality, API, and visual appearance.
</file>

<file path="docs/ui-audit/components/badge.md">
# Badge Component

The Badge component is a small UI element used to display statuses, categories, counts, or labels. It's typically displayed as a small pill-shaped element with minimal content.

## Usage

```tsx
import { Badge } from "@/components/ui/badge"

export function BadgeDemo() {
  return (
    <div className="flex flex-wrap gap-2">
      <Badge>Default</Badge>
      <Badge variant="secondary">Secondary</Badge>
      <Badge variant="destructive">Destructive</Badge>
      <Badge variant="outline">Outline</Badge>
    </div>
  )
}
```

## Features

- Built with React and fully typed with TypeScript
- Four variant styles for different contexts
- Appropriate styling for small textual indicators
- Consistent sizing and padding
- Focus styles for keyboard navigation
- Seamless integration with other UI components

## API Reference

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `variant` | `'default' \| 'secondary' \| 'destructive' \| 'outline'` | `'default'` | Controls the visual style of the badge |
| `className` | `string` | - | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | - | All standard div attributes |

## Variants

### Default
The primary badge style with solid background color.

```tsx
<Badge>Default</Badge>
```

### Secondary
An alternative style with a different background color.

```tsx
<Badge variant="secondary">Secondary</Badge>
```

### Destructive
Used for indicating errors, warnings, or destructive actions.

```tsx
<Badge variant="destructive">Destructive</Badge>
```

### Outline
A subtle badge with only a border and no background fill.

```tsx
<Badge variant="outline">Outline</Badge>
```

## Styling

The Badge component uses Tailwind CSS for styling with the following default classes:

- Base: `inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2`
- Default variant: `border-transparent bg-primary text-primary-foreground hover:bg-primary/80`
- Secondary variant: `border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80`
- Destructive variant: `border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80`
- Outline variant: `text-foreground`

## Examples

### Status Badges

Use badges to indicate status:

```tsx
import { Badge } from "@/components/ui/badge"

export function StatusBadges() {
  return (
    <div className="flex flex-wrap gap-2">
      <Badge variant="outline" className="border-green-500 text-green-500">Active</Badge>
      <Badge variant="outline" className="border-yellow-500 text-yellow-500">Pending</Badge>
      <Badge variant="outline" className="border-red-500 text-red-500">Closed</Badge>
    </div>
  )
}
```

### Count Indicator

Use badges to display numerical values:

```tsx
import { Badge } from "@/components/ui/badge"
import { Bell } from "lucide-react"

export function NotificationIndicator() {
  return (
    <div className="relative">
      <Bell className="h-6 w-6" />
      <Badge className="absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0">
        5
      </Badge>
    </div>
  )
}
```

### With Icons

Combine badges with icons for enhanced visual cues:

```tsx
import { Badge } from "@/components/ui/badge"
import { Check, X } from "lucide-react"

export function BadgesWithIcons() {
  return (
    <div className="flex flex-wrap gap-2">
      <Badge className="gap-1">
        <Check className="h-3 w-3" />
        Completed
      </Badge>
      <Badge variant="destructive" className="gap-1">
        <X className="h-3 w-3" />
        Failed
      </Badge>
    </div>
  )
}
```

## Accessibility

- Use appropriate color contrast for all badge variants
- Ensure badge content is concise and readable
- When used as a status indicator, consider including additional context for screen readers
- When badges convey important information, ensure they aren't the only means of communicating that information

## Design Guidelines

- Keep badge content short (1-2 words or numbers)
- Use consistently across the interface for similar types of information
- Choose appropriate variants based on context:
  - Use default or secondary for neutral information
  - Use destructive for errors or warnings
  - Use outline for more subtle indicators
- Consider placement carefully to ensure badges don't disrupt the overall layout
- Maintain adequate spacing between badges when displaying multiple instances

## Implementation Comparison

| Aspect | Vite Implementation | Next.js Implementation | Status |
|--------|---------------------|------------------------|--------|
| Base styling | Identical | Identical | ‚úÖ Match |
| Variants | Default, Secondary, Destructive, Outline | Default, Secondary, Destructive, Outline | ‚úÖ Match |
| Visual Appearance | Rounded pill shape with consistent padding | Rounded pill shape with consistent padding | ‚úÖ Match |
| Focus states | Focus ring styling matches | Focus ring styling matches | ‚úÖ Match |
| Typography | Text size, weight match | Text size, weight match | ‚úÖ Match |
| HTML Element | `<div>` | `<div>` | ‚úÖ Match |

## Recommended Actions

No significant inconsistencies were found between the Vite and Next.js implementations of the Badge component. Both provide the same functionality, API, and visual appearance.
</file>

<file path="docs/ui-audit/components/button.md">
# Button

The Button component is a versatile and customizable button element that supports various styles, sizes, and states. It's built on top of Radix UI's Slot primitive for composition flexibility.

## Usage

```tsx
import { Button } from "@/components/ui/button"

export function ButtonDemo() {
  return (
    <div className="flex flex-wrap gap-4">
      <Button>Default</Button>
      <Button variant="destructive">Destructive</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="secondary">Secondary</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="link">Link</Button>
    </div>
  )
}
```

## Features

- Built with React and fully typed with TypeScript
- Customizable variants and sizes
- Supports asChild pattern for enhanced composition
- Responsive design with proper focus states
- Compatible with icons and text content
- Disabled state styling

## API Reference

### Button

The main button component that provides interactive elements for user actions.

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `variant` | `'default' \| 'destructive' \| 'outline' \| 'secondary' \| 'ghost' \| 'link'` | `'default'` | Controls the visual style of the button |
| `size` | `'default' \| 'sm' \| 'lg' \| 'icon'` | `'default'` | Determines the size of the button |
| `asChild` | `boolean` | `false` | When true, the component will render as its child |
| `className` | `string` | - | Additional CSS classes to apply |
| `...props` | `ButtonHTMLAttributes<HTMLButtonElement>` | - | All standard button attributes |

## Variants

### Default
The primary button style with solid background color and high contrast.

### Destructive
Used for actions with destructive or irreversible consequences, such as delete actions.

### Outline
A button with a border and transparent background, useful for secondary actions.

### Secondary
An alternative style with a different background color than the primary button.

### Ghost
A button that only shows its background on hover, useful for toolbar actions.

### Link
Styled to appear as a text link with appropriate hover underline effect.

## Sizes

- `default`: Standard size for most use cases (h-10, px-4, py-2)
- `sm`: Smaller size for compact UIs (h-9, px-3)
- `lg`: Larger size for emphasized actions (h-11, px-8)
- `icon`: Square button for icon-only usage (h-10, w-10)

## Examples

### With Icon

```tsx
import { Button } from "@/components/ui/button"
import { PlusIcon } from "@radix-ui/react-icons"

export function IconButtonDemo() {
  return (
    <Button>
      <PlusIcon className="mr-2" />
      Add item
    </Button>
  )
}
```

### Icon-only Button

```tsx
import { Button } from "@/components/ui/button"
import { PlusIcon } from "@radix-ui/react-icons"

export function IconOnlyButtonDemo() {
  return (
    <Button size="icon" aria-label="Add item">
      <PlusIcon />
    </Button>
  )
}
```

### Loading Button

```tsx
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { ReloadIcon } from "@radix-ui/react-icons"

export function LoadingButtonDemo() {
  const [isLoading, setIsLoading] = useState(false)
  
  return (
    <Button 
      onClick={() => setIsLoading(true)} 
      disabled={isLoading}
    >
      {isLoading ? (
        <>
          <ReloadIcon className="mr-2 animate-spin" />
          Loading...
        </>
      ) : (
        "Click me"
      )}
    </Button>
  )
}
```

## Accessibility

- Buttons maintain accessible contrast ratios for all variants
- Proper focus states for keyboard navigation
- Disabled styles for non-interactive states
- Icons are set to `pointer-events: none` to ensure consistent click behavior

## Design Guidelines

- Use the default variant for primary actions
- Use destructive for dangerous actions that may have irreversible consequences
- Use outline or ghost variants for secondary actions
- Maintain consistent button usage patterns throughout the application
- Add appropriate loading states for actions that aren't instantaneous
</file>

<file path="docs/ui-audit/components/card.md">
# Card

The Card component is a flexible container with rounded corners, border, and subtle shadow that provides a structured visual element for grouping related content.

## Usage

```tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

export function CardDemo() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Card Title</CardTitle>
        <CardDescription>Card Description</CardDescription>
      </CardHeader>
      <CardContent>
        <p>Card Content</p>
      </CardContent>
      <CardFooter>
        <p>Card Footer</p>
      </CardFooter>
    </Card>
  )
}
```

## Features

- Modular structure with separate components for different card sections
- Consistent spacing and typography
- Built with React and fully typed with TypeScript
- Customizable through className props
- Semantic HTML structure
- Cohesive styling with your application's design system

## API Reference

### Card

The root container component that wraps all card elements.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | All standard div attributes |

### CardHeader

Container for the card title and description with appropriate spacing.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | All standard div attributes |

### CardTitle

The main heading of the card.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLHeadingElement>` | All standard heading attributes |

### CardDescription

Supplementary text that provides more context about the card content.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLParagraphElement>` | All standard paragraph attributes |

### CardContent

The main content area of the card.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | All standard div attributes |

### CardFooter

Container for actions or supplementary information at the bottom of the card.

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string` | Additional CSS classes to apply |
| `...props` | `React.HTMLAttributes<HTMLDivElement>` | All standard div attributes |

## Styling

- Card: `rounded-lg border bg-card text-card-foreground shadow-sm`
- CardHeader: `flex flex-col space-y-1.5 p-6`
- CardTitle: `text-2xl font-semibold leading-none tracking-tight`
- CardDescription: `text-sm text-muted-foreground`
- CardContent: `p-6 pt-0`
- CardFooter: `flex items-center p-6 pt-0`

## Examples

### Basic Card

```tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

export function BasicCard() {
  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Notification</CardTitle>
        <CardDescription>You have a new message.</CardDescription>
      </CardHeader>
      <CardContent>
        <p>The contents of the notification go here.</p>
      </CardContent>
      <CardFooter>
        <p className="text-xs text-muted-foreground">Received 2 hours ago</p>
      </CardFooter>
    </Card>
  )
}
```

### Interactive Card with Actions

```tsx
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

export function CardWithActions() {
  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Account Settings</CardTitle>
        <CardDescription>Update your account preferences.</CardDescription>
      </CardHeader>
      <CardContent>
        <form>
          <div className="grid w-full items-center gap-4">
            {/* Form fields would go here */}
          </div>
        </form>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline">Cancel</Button>
        <Button>Save</Button>
      </CardFooter>
    </Card>
  )
}
```

### Card Grid Layout

```tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

export function CardGrid() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {[1, 2, 3].map((item) => (
        <Card key={item}>
          <CardHeader>
            <CardTitle>Card {item}</CardTitle>
            <CardDescription>Card description {item}</CardDescription>
          </CardHeader>
          <CardContent>
            <p>Content for card {item}</p>
          </CardContent>
          <CardFooter>
            <p>Card footer {item}</p>
          </CardFooter>
        </Card>
      ))}
    </div>
  )
}
```

## Accessibility

- Use appropriate heading levels within CardTitle for proper document outline
- Maintain sufficient color contrast between card background and content
- Consider card interactions for keyboard users when adding interactive elements

## Design Guidelines

- Use cards to group related content and provide visual separation
- Maintain consistent padding and spacing within cards throughout the application
- Consider appropriate width constraints (e.g., `max-width`) to prevent overly wide cards
- Use CardDescription to provide additional context when the purpose of a card may not be immediately obvious
- Keep content concise and focused within each card
</file>

<file path="docs/ui-audit/components/dialog.md">
# Dialog Component

The Dialog component is a modal window that appears in front of app content to provide critical information or require user decisions. Dialogs are purposefully interruptive, so they should be used sparingly.

## Overview

The Dialog component is built on top of Radix UI's Dialog primitive and provides a set of composable parts that can be combined to create accessible modal dialogs. The implementation includes animations, styling, and proper accessibility features.

## Usage

### Basic Dialog

```tsx
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"

export function BasicDialog() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Dialog</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Profile</DialogTitle>
          <DialogDescription>
            Make changes to your profile here. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          {/* Dialog content goes here */}
        </div>
        <DialogFooter>
          <Button type="submit">Save changes</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
```

### Controlled Dialog

```tsx
import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"

export function ControlledDialog() {
  const [open, setOpen] = useState(false)

  return (
    <>
      <Button onClick={() => setOpen(true)}>Open Dialog</Button>
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmation</DialogTitle>
            <DialogDescription>
              Are you sure you want to perform this action?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button onClick={() => {
              // Perform action
              setOpen(false)
            }}>
              Confirm
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}
```

### Alert Dialog

```tsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"

export function AlertDialog() {
  return (
    <Dialog>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Delete Account</DialogTitle>
          <DialogDescription>
            This action cannot be undone. This will permanently delete your account
            and remove your data from our servers.
          </DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button variant="outline">Cancel</Button>
          <Button variant="destructive">Delete</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
```

## API Reference

### Dialog

The root dialog component.

```tsx
import { Dialog } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `open` | `boolean` | `undefined` | Whether the dialog is open. Use with `onOpenChange` for controlled usage. |
| `onOpenChange` | `(open: boolean) => void` | `undefined` | Callback fired when the open state changes. |
| `modal` | `boolean` | `true` | Whether the dialog is modal (blocks interaction with the rest of the page). |

### DialogTrigger

The button that opens the dialog.

```tsx
import { DialogTrigger } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `asChild` | `boolean` | `false` | When `true`, the component will render its child instead of a default button. |

### DialogContent

The content area of the dialog.

```tsx
import { DialogContent } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `className` | `string` | `""` | Additional CSS classes for styling. |
| `children` | `React.ReactNode` | `undefined` | The content of the dialog. |
| `forceMount` | `boolean` | `false` | Forces the dialog to mount even when closed. |

### DialogHeader

A layout component for the dialog header.

```tsx
import { DialogHeader } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `className` | `string` | `""` | Additional CSS classes for styling. |

### DialogTitle

The title of the dialog.

```tsx
import { DialogTitle } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `className` | `string` | `""` | Additional CSS classes for styling. |

### DialogDescription

A description for the dialog.

```tsx
import { DialogDescription } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `className` | `string` | `""` | Additional CSS classes for styling. |

### DialogFooter

A layout component for the dialog footer.

```tsx
import { DialogFooter } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `className` | `string` | `""` | Additional CSS classes for styling. |

### DialogClose

The button that closes the dialog.

```tsx
import { DialogClose } from "@/components/ui/dialog"
```

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `asChild` | `boolean` | `false` | When `true`, the component will render its child instead of a default button. |

## Styling

The Dialog component uses Tailwind CSS for styling. The default styles provide a clean, modern appearance, but can be customized as needed:

- `DialogOverlay`: Controls the overlay background and animation
- `DialogContent`: Controls the main dialog container, positioning, and animations
- `DialogHeader`: Controls the header spacing and alignment
- `DialogFooter`: Controls the footer spacing and alignment
- `DialogTitle`: Controls the title typography
- `DialogDescription`: Controls the description typography

## Accessibility

The Dialog component follows WAI-ARIA guidelines for dialog accessibility:

- It uses proper ARIA roles and attributes
- Handles focus management automatically (traps focus within dialog)
- Provides keyboard navigation support (Escape to close)
- Includes a visually hidden close button label for screen readers
- When opened, focus is automatically moved to the first focusable element in the dialog

## Best Practices

1. **Use sparingly**: Dialogs interrupt the user flow, so use them only when necessary.
2. **Keep it simple**: Limit the number of actions in a dialog.
3. **Clear titles**: Use concise, descriptive titles that clearly communicate the purpose.
4. **Descriptive buttons**: Action buttons should clearly indicate what happens when clicked.
5. **Responsive design**: Ensure the dialog works well on all screen sizes.
6. **Keyboard accessibility**: All interactions should be possible with keyboard alone.
7. **Escape key**: Always allow users to dismiss non-critical dialogs with the Escape key.

## Design Guidelines

- **Size**: Generally, dialogs should be kept as small as possible while accommodating their content. Common widths are 425px for forms and 500px for confirmations.
- **Position**: Dialogs are centered by default to draw attention.
- **Animation**: The default animations help users understand that the dialog is a temporary, modal layer.
- **Close button**: Always include a visible close mechanism, either through a dedicated close button or cancel action.

## Examples

### Form Dialog

A dialog containing a form for user input:

```tsx
import { useState } from "react"
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export function FormDialog() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button>Edit Profile</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit profile</DialogTitle>
          <DialogDescription>
            Make changes to your profile here. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        <form>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                defaultValue="Alex Smith"
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="username" className="text-right">
                Username
              </Label>
              <Input
                id="username"
                defaultValue="alexsmith"
                className="col-span-3"
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="submit">Save changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="docs/ui-audit/issues/card-component-inconsistency.md">
# Issue: Card Component Visual Inconsistencies

## Issue Details

- **Component**: Card
- **Priority**: High
- **Type**: Visual Inconsistency
- **Status**: Open
- **Identified**: April 16, 2023
- **Assigned**: Unassigned

## Description

During the UI consistency audit, significant visual inconsistencies were identified between the Vite and Next.js implementations of the Card component. These inconsistencies affect the overall design coherence of the application and should be addressed promptly.

## Specific Issues

1. **Shadow Implementation**:
   - Vite: Uses `box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1)`
   - Next.js: Uses `filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.12))`
   - Impact: Different visual appearance, particularly at component edges

2. **Border Radius**:
   - Vite: `border-radius: 8px`
   - Next.js: `border-radius: 12px`
   - Impact: Noticeable difference in component shape, inconsistent with design system

3. **Card Footer Padding**:
   - Vite: `padding: 12px`
   - Next.js: `padding: 16px`
   - Impact: Different spacing between card content and footer elements

4. **Hover Effect**:
   - Vite: No hover effect
   - Next.js: Subtle elevation increase on hover
   - Impact: Inconsistent interaction patterns between implementations

## Additional Notes

The Next.js implementation includes a loading state skeleton not present in the Vite version. While this is an enhancement rather than an inconsistency, it should be documented as an intentional improvement.

## Recommended Solution

1. Standardize on the box-shadow approach for consistent shadow rendering
2. Align border radius to 8px as per the design system specification
3. Normalize padding values to 12px for consistency
4. Decide on whether to add hover effect to Vite or remove from Next.js based on design requirements

## Screenshots

[Placeholder for screenshots showing the differences]

## Implementation Estimate

- Estimated time: 3 hours
- Complexity: Medium
- Files to modify:
  - `frontend_next/src/components/ui/Card.tsx`
  - Associated styles/CSS files
</file>

<file path="docs/ui-audit/component-tracker.md">
# UI Component Comparison Tracker

## Core Components
| Component      | Status            | Visual Parity      | Functional Parity   | Priority |
|----------------|-------------------|--------------------|--------------------|----------|
| Button         | ‚úÖ Documented     | üü° Minor Issues    | üü¢ Matches         | Medium   |
| Card           | ‚úÖ Documented     | üî¥ Major Issues    | üü° Minor Issues    | High     |
| Dialog         | ‚úÖ Documented     | üü¢ Matches         | üü¢ Matches         | Medium   |
| Alert          | ‚úÖ Documented     | üü¢ Matches         | üü¢ Matches         | High     |
| Badge          | ‚úÖ Documented     | üü¢ Matches         | üü¢ Matches         | Medium   |
| Avatar         | ‚¨ú Not Started    | -                  | -                  | -        |

// ... existing code ...
</file>

<file path="docs/ui-audit/implementation-plan.md">
# UI Consistency Implementation Plan

## Overview

This document outlines the implementation plan to address the UI inconsistencies identified during the UI audit between the Vite and Next.js implementations. The plan prioritizes components based on their level of inconsistency and usage frequency in the application.

## Priority Matrix

| Component | Visual Inconsistency | Functional Inconsistency | Usage Frequency | Priority |
|-----------|----------------------|--------------------------|-----------------|----------|
| Card      | High                 | Medium                   | High            | 1        |
| Button    | Medium               | Low                      | High            | 2        |
| Input     | Low                  | Low                      | High            | 3        |
| Dialog    | None                 | None                     | Medium          | -        |
| Alert     | None                 | None                     | Medium          | -        |
| Badge     | None                 | None                     | Medium          | -        |

## Implementation Targets

### 1. Card Component (High Priority)

#### Issues Identified
- **Shadow Implementation**: Different shadow values and implementation method
- **Border Radius**: Different border radius values (8px vs 12px)
- **Padding**: Different padding values (12px vs 16px)
- **Border**: Next.js version includes a border, Vite version does not
- **Variants**: Next.js implementation missing several variants from Vite version
- **Accessibility**: Missing ARIA attributes in Next.js implementation

#### Implementation Plan

1. **Update Shadow Implementation**
   - Replace `filter: drop-shadow()` with `box-shadow` in Next.js implementation
   - Standardize shadow values to match Vite implementation: `0 2px 8px rgba(0, 0, 0, 0.1)`
   - Test across browsers to ensure consistent appearance

2. **Standardize Border Radius**
   - Update border-radius to consistent 8px in Next.js implementation
   - Modify Tailwind classes from `rounded-lg` to a specific value: `rounded-[8px]`
   - Update any component-specific theme values in Tailwind config

3. **Normalize Padding**
   - Standardize padding to 12px across all card components
   - Update padding classes in `CardHeader`, `CardContent`, and `CardFooter`
   - Ensure spacing between elements remains visually balanced

4. **Address Border Inconsistency**
   - Add conditional border rendering to match Vite implementation
   - Consider creating a borderless variant instead of removing borders entirely
   - Ensure border colors match the design system tokens

5. **Implement Missing Variants**
   - Add `flat` and `bordered` variants to match Vite implementation
   - Update the `cardVariants` cva configuration to include new variants
   - Add appropriate styling for each variant following the design system

6. **Improve Accessibility**
   - Add appropriate ARIA attributes to Card component
   - Include `role="region"` for card containers where appropriate
   - Add `aria-labelledby` support when card contains a title

**Estimated Time**: 4-6 hours

### 2. Button Component (Medium Priority)

#### Issues Identified
- Border radius differences
- Hover state color variation
- Focus state styling differences

#### Implementation Plan

1. **Standardize Border Radius**
   - Update border radius to be consistent across implementations
   - Modify Tailwind classes for consistent rounded corners

2. **Normalize Hover States**
   - Align hover state color variations to match design system
   - Ensure transition timing is consistent

3. **Standardize Focus States**
   - Implement consistent focus ring styling
   - Ensure accessibility requirements are met

**Estimated Time**: 2-3 hours

### 3. Input Component (Low Priority)

#### Issues Identified
- Focus ring color differences
- Padding variations
- Error state animation differences

#### Implementation Plan

1. **Align Focus Ring**
   - Standardize focus ring color to `#3b82f6`
   - Ensure consistent ring width and offset

2. **Normalize Padding**
   - Update padding to consistent 0.75rem

3. **Enhance Error State Animation**
   - Consider adopting the more subtle animation from Next.js as an improvement

**Estimated Time**: 1-2 hours

## Testing Plan

For each component modification:

1. **Visual Regression Testing**
   - Capture screenshots before and after changes
   - Compare rendering across different viewport sizes
   - Verify in light and dark modes

2. **Functional Testing**
   - Test all interactive states (hover, focus, active)
   - Verify variants render correctly
   - Test with different content lengths and types

3. **Accessibility Testing**
   - Verify ARIA attributes are correctly applied
   - Test keyboard navigation
   - Check screen reader compatibility

4. **Cross-Browser Testing**
   - Test in Chrome, Firefox, Safari, and Edge
   - Verify consistency across platforms

## Implementation Timeline

| Task                                     | Estimated Completion | Dependencies |
|------------------------------------------|----------------------|--------------|
| Card Component Shadow Standardization    | April 18, 2023       | None         |
| Card Component Border Radius Update      | April 18, 2023       | None         |
| Card Component Padding Normalization     | April 18, 2023       | None         |
| Card Component Border Handling           | April 19, 2023       | None         |
| Card Component Variant Implementation    | April 19, 2023       | None         |
| Card Component Accessibility Improvements| April 19, 2023       | None         |
| Button Component Standardization         | April 20, 2023       | None         |
| Input Component Standardization          | April 20, 2023       | None         |
| Visual Regression Testing                | April 21, 2023       | All updates  |
| Functional and Accessibility Testing     | April 21, 2023       | All updates  |
| Cross-Browser Testing                    | April 21, 2023       | All updates  |
| Documentation Updates                    | April 22, 2023       | Testing      |

## Success Criteria

- All identified visual inconsistencies are resolved
- Component functionality is consistent across implementations
- Components pass all accessibility requirements
- Documentation is updated to reflect standardized components
- Design system documentation includes updated component specifications

## Dependencies and Resources

- Design system tokens and specifications
- UI audit documentation and comparison results
- Component inventory and implementation notes
- Developer resources for implementation (1 developer, ~1 week)

## Post-Implementation

- Update component documentation to reflect changes
- Create a standardized component library for future reference
- Establish guidelines for maintaining consistency in future development
</file>

<file path="docs/ui-audit/progress-report.md">
# UI Audit Progress Report

## Latest Update: [Current Date]

### Overall Progress
- Components Documented: 5/30 (17%)
- Components with Visual Parity: 3/30 (10%)
- Components with Functional Parity: 4/30 (13%)

### Recently Completed
- Created comprehensive UI audit framework
- Documented Button component (minor visual differences)
- Documented Card component (major visual differences, minor functional differences)
- Documented Dialog component (visual and functional parity achieved)
- Documented Alert component (visual and functional parity achieved)
- Documented Badge component (visual and functional parity achieved)

### In Progress
- Working on standardizing shadow implementation across components
- Documenting Avatar component

### Blockers
- None

### Next Steps
1. Complete documentation for remaining high-priority components
2. Address identified visual discrepancies
3. Implement consistent styling approach for shadows and borders
4. Update design tokens to ensure consistency

### Notes
- Card component shows significant visual differences between implementations
- Need to standardize padding, shadow implementation, and border-radius values across components
- Should decide on consistent hover behavior for interactive components
- Dialog, Alert, and Badge components show good alignment between implementations
</file>

<file path="docs/ui-audit/progress.md">
# UI Consistency Audit Progress

## Overview

We have successfully completed the initial setup for the UI Consistency Audit between the Vite and Next.js implementations and have documented multiple core components. This document tracks the current progress and next steps in the audit process.

## Completed Tasks

1. ‚úÖ **Framework Setup**
   - Created directory structure for UI audit documentation
   - Developed component inventory template
   - Created comparison tracker spreadsheet
   - Established test plan methodology
   - Documented sample component (Button) as reference

2. ‚úÖ **Infrastructure Preparation**
   - Set up screenshot directories for both implementations
   - Created documentation folders for comparison results
   - Established standard methodology for component assessment

3. üü° **Component Documentation (In Progress)**
   - Completed documentation for Button component (Minor Issues)
   - Completed documentation for Input component (Minor Issues)
   - Completed documentation for Card component (Major Issues)
   - Completed documentation for Dialog component (No Issues)
   - Completed documentation for Alert component (No Issues)
   - Completed documentation for Badge component (No Issues)
   - Identified critical visual inconsistencies in Card component
   - Updated component tracker with current status

## Current Status

- Task 15.1 "Create UI Component Inventory and Comparison Framework" has been completed
- Task 15.2 "Conduct Systematic UI Audit and Document Discrepancies" is in progress (16.7% complete)
- Current focus is on documenting core UI components
- Identified high-priority issue with Card component that requires immediate attention

## Next Steps

1. **Continue Component Documentation**
   - Next components to document: Avatar, Tabs, Table
   - Take screenshots of components in both implementations
   - Fill out component inventory documents for each component

2. **Begin Issue Resolution for Card Component**
   - Create task for fixing Card component inconsistencies
   - Standardize border radius to match design system
   - Fix shadow implementation and padding issues
   - Document loading state enhancement

3. **Systematic Testing**
   - Follow test plan to assess each component
   - Update component tracker with findings
   - Prioritize issues for resolution

## Timeline

| Phase | Status | Estimated Completion |
|-------|--------|----------------------|
| Framework Setup | ‚úÖ Completed | April 15, 2023 |
| Component Documentation | üü° In Progress (16.7%) | April 30, 2023 |
| Systematic Testing | ‚è≥ Not Started | May 15, 2023 |
| Issue Resolution | ‚è≥ Not Started | May 30, 2023 |

## Metrics

- Total Components Identified: 30
- Components Documented: 5 (16.7%)
- Components Tested: 0 (0%)
- Issues Identified: 3 (1 major, 2 minor)
- Issues Resolved: 0 (0%)
- High Priority Issues: 1 (Card component)
- Components with Visual Parity: 3 (Dialog, Alert, Badge)
- Components with Functional Parity: 4 (Button, Dialog, Alert, Badge)

*Last Updated: April 17, 2023*
</file>

<file path="docs/ui-audit/README.md">
# UI Consistency Audit Framework

This directory contains the documentation and resources for conducting a systematic UI audit between the original Vite implementation and the new Next.js version.

## Directory Structure

- `/component-inventory`: Detailed documentation of all UI components in both implementations
- `/screenshots`: Visual comparison screenshots of key UI elements and pages
- `/comparison-results`: Findings, discrepancies, and recommendations

## Audit Methodology

### 1. Component Inventory

For each component, we document:

- Component name and purpose
- Location in codebase (both implementations)
- Props/interface
- Visual appearance
- Behaviors and interactions
- Dependencies and related components

### 2. Comparison Criteria

Components are compared based on:

- **Visual consistency**: Colors, typography, spacing, layout, responsive behavior
- **Functional parity**: Behaviors, interactions, state management
- **Accessibility**: ARIA attributes, keyboard navigation, screen reader support
- **Performance**: Render time, bundle size impact
- **Code quality**: Structure, maintainability, reusability

### 3. Audit Process

1. Catalog all components from Vite implementation
2. Match with corresponding Next.js components
3. Document differences using comparison sheets
4. Take side-by-side screenshots of components in various states
5. Test interactions and behaviors
6. Document findings and recommendations

### 4. Tracking System

Each component will be assigned one of the following statuses:

- ‚úÖ **Consistent**: Visually and functionally equivalent
- üü° **Minor issues**: Small visual or behavioral differences
- üî¥ **Major issues**: Significant visual or behavioral differences
- ‚ö†Ô∏è **Not implemented**: Component exists in Vite but not in Next.js
- üÜï **New component**: Component exists in Next.js but not in Vite

## Implementation Plan

1. Create component inventory sheets for all major UI elements
2. Implement systematic visual review of all pages
3. Document discrepancies
4. Prioritize fixes based on user impact and visibility
5. Implement fixes in the Next.js codebase
6. Re-verify consistency after fixes

## Getting Started

To contribute to the UI audit:

1. Select a component or page to audit
2. Fill out the component inventory template in `/component-inventory`
3. Take screenshots of both implementations and save to `/screenshots`
4. Document findings in the comparison sheet in `/comparison-results`
</file>

<file path="docs/ui-audit/test-plan.md">
# UI Consistency Test Plan

This document outlines the approach for testing and verifying UI consistency between the Vite and Next.js implementations.

## Testing Methodologies

### 1. Visual Regression Testing

- **Objective**: Identify visual differences between components in both implementations
- **Tools**: Playwright for automated screenshots
- **Process**:
  1. Create baseline screenshots of all components in Vite implementation
  2. Take corresponding screenshots in Next.js implementation
  3. Use image comparison to identify differences
  4. Document differences in component inventory files

### 2. Functional Testing

- **Objective**: Verify functionality and behavior parity
- **Tools**: Manual testing, Jest/React Testing Library
- **Process**:
  1. Define expected behaviors for each component
  2. Test all interaction states (hover, click, focus, etc.)
  3. Verify state changes and event handlers
  4. Document any behavioral differences

### 3. Responsive Testing

- **Viewport Sizes**:
  - Mobile: 375px, 390px, 414px
  - Tablet: 768px, 820px, 1024px
  - Desktop: 1280px, 1440px, 1920px
- **Process**:
  1. Test each component at all viewport sizes
  2. Document any layout or responsive behavior differences
  3. Pay special attention to breakpoint behavior

### 4. Cross-Browser Testing

- **Browsers**:
  - Chrome (latest)
  - Firefox (latest)
  - Safari (latest)
  - Edge (latest)
- **Process**:
  1. Verify visual and functional consistency across browsers
  2. Document any browser-specific issues

### 5. Accessibility Testing

- **Tools**: axe-core, keyboard navigation tests
- **Process**:
  1. Run automated accessibility tests on both implementations
  2. Perform manual keyboard navigation testing
  3. Test with screen readers (VoiceOver, NVDA)
  4. Document any accessibility differences

## Test Execution Plan

### Phase 1: Component Inventory & Initial Assessment
- Create complete component inventory
- Identify high-priority components based on usage
- Establish baseline screenshots
- Duration: 1 week

### Phase 2: Visual & Functional Testing
- Conduct visual testing for all components
- Perform functional testing for all components
- Document all findings
- Duration: 2 weeks

### Phase 3: Special Test Cases
- Test responsive behavior
- Perform cross-browser testing
- Conduct accessibility testing
- Duration: 1 week

### Phase 4: Regression Testing
- Retest all fixed components
- Verify alignment with requirements
- Final sign-off
- Duration: 1 week

## Documentation Standards

All test results should be documented following these standards:

1. **Clear Pass/Fail Status**: Use the status indicators defined in the README
2. **Visual Evidence**: Include screenshots demonstrating any issues
3. **Detailed Descriptions**: Provide clear descriptions of any inconsistencies
4. **Reproducible Steps**: For functional issues, include steps to reproduce
5. **Severity Assessment**: Categorize issues as minor or major based on impact

## Tracking Progress

Progress will be tracked in the central component-tracker.md file, with regular updates to:
- Number of components audited
- Number and percentage of components with issues
- Number of resolved issues

## Testing Schedule

| Week | Focus | Components |
|------|-------|------------|
| 1    | Core Components | Button, Input, Card, etc. |
| 2    | Layout Components | Header, Sidebar, etc. |
| 3    | Form & Data Components | Form, Select, Charts, etc. |
| 4    | Pages & Navigation | Dashboard, Portfolio, Menu, etc. |
</file>

<file path="docs/BUILD.md">
# Build and Deployment Guide

This document outlines the steps to build, run, and deploy the Next.js frontend for the Crypto Bot application.

## Environment Setup

Before building or running the application, ensure you have:

1. **Bun Runtime**: This project uses Bun for improved performance
   ```
   curl -fsSL https://bun.sh/install | bash
   ```

2. **Node.js**: Version 18.17.0 or higher is recommended
   ```
   nvm install 18
   ```

3. **Environment Variables**: Copy `.env.local.example` to `.env.local` and fill in the required values:
   ```
   cp .env.local.example .env.local
   ```
   
   Required environment variables include:
   - Clerk API keys (for authentication)
   - API URL endpoints
   - Any other service-specific credentials

## Development

To run the application in development mode:

```bash
# Install dependencies
bun install

# Run development server
bun dev
```

The application will be available at http://localhost:3000.

## Production Build

To create a production build:

```bash
# Build the application
bun run build

# Start the production server
bun start
```

## Testing

```bash
# Run all tests
bun test

# Run browser-specific tests
bun test:browser

# Type checking
bun type-check
```

## Deployment

### Vercel (Recommended)

The easiest way to deploy this Next.js application is using Vercel:

1. Push your code to GitHub, GitLab, or Bitbucket
2. Import the project in Vercel dashboard
3. Configure environment variables
4. Deploy

### Docker

You can also deploy using Docker:

1. Build the Docker image:
   ```
   docker build -t crypto-bot-frontend .
   ```

2. Run the container:
   ```
   docker run -p 3000:3000 crypto-bot-frontend
   ```

### Custom Server

For custom server deployments:

1. Build the application: `bun run build`
2. Copy the following to your production server:
   - `.next/` directory
   - `public/` directory
   - `package.json`
   - `next.config.js`
   - `.env.local` (with production values)
3. Install dependencies: `bun install --production`
4. Start the server: `bun start`

## Environment Specific Configurations

### Development
- Uses `.env.local` for local environment variables
- Enables React strict mode
- Includes detailed error messages

### Production
- Should use environment variables set on the hosting platform
- Disables console logs (except errors and warnings)
- Optimizes asset loading

## Troubleshooting

If you encounter issues:

1. Verify environment variables are correctly set
2. Check Node.js and Bun versions
3. Clear `.next/` cache: `rm -rf .next/`
4. Reinstall dependencies: `rm -rf node_modules && bun install`
</file>

<file path="docs/CLERK_SETUP.md">
# Clerk Authentication Setup

This project uses Clerk for authentication. This document will guide you through the setup process.

## Setting Up Clerk Authentication

### 1. Register with Clerk

1. Go to [Clerk's website](https://clerk.dev/) and sign up for an account
2. Create a new application in your Clerk dashboard
3. Set up your authentication methods (Email, social logins, etc.)
4. Get your API keys from the Clerk dashboard

### 2. Environment Variables

Add the following environment variables to your `.env.local` file:

```
# Clerk Auth
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
CLERK_SECRET_KEY=your_clerk_secret_key

# Clerk auth URLs
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard

# Fallback URLs
NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/dashboard
```

Replace the placeholder API keys with your actual Clerk API keys.

### 3. Project Structure

The authentication flow is set up with the following files:

- `src/app/sign-in/[[...sign-in]]/page.tsx`: The sign-in page
- `src/app/sign-up/[[...sign-up]]/page.tsx`: The sign-up page
- `src/middleware.ts`: Protects routes and handles authentication
- `src/app/layout.tsx`: Wraps the app with the ClerkProvider

### 4. Accessing the User

You can access the user in client components with the `useUser` hook:

```tsx
'use client';
import { useUser } from '@clerk/nextjs';

export default function MyComponent() {
  const { user } = useUser();
  
  return <div>Hello, {user?.fullName}</div>;
}
```

And in server components with the `currentUser` function:

```tsx
import { currentUser } from '@clerk/nextjs';

export default async function MyServerComponent() {
  const user = await currentUser();
  
  return <div>Hello, {user?.fullName}</div>;
}
```

### 5. Protecting Routes

Routes are protected using the middleware. By default, all routes require authentication except for:

- `/sign-in/*`
- `/sign-up/*`
- `/`
- `/api/webhooks/clerk`

To make a route public, add it to the `isPublicRoute` matcher in `src/middleware.ts`.

### 6. User Sign Out

The UserButton component from Clerk handles sign-out functionality automatically. If you need to programmatically sign out:

```tsx
'use client';
import { useClerk } from '@clerk/nextjs';

export default function SignOutButton() {
  const { signOut } = useClerk();
  
  return <button onClick={() => signOut()}>Sign out</button>;
}
```

## Further Reading

- [Clerk Documentation](https://clerk.com/docs)
- [Clerk + Next.js Integration](https://clerk.com/docs/quickstarts/nextjs)
- [Customizing Appearance](https://clerk.com/docs/customization/appearance)
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/__tests__/page.test.tsx">
// Import custom JSDOM environment
import '../../test/bun-custom-jsdom';

// Test environment verification - make sure this is at the top
console.log('Test environment check:', {
  hasDocument: typeof document !== 'undefined',
  hasWindow: typeof window !== 'undefined',
  documentBody: typeof document !== 'undefined' ? document.body : 'undefined'
});

import React from 'react';
import { render, screen } from '@testing-library/react';
import Home from '../page';

// Log test-library methods
console.log('Testing library methods:', {
  render: typeof render,
  screen: typeof screen
});

describe('Home Page', () => {
  it('renders the main heading', () => {
    console.log('Before render - document exists:', typeof document !== 'undefined');
    render(<Home />);
    console.log('After render - document exists:', typeof document !== 'undefined');
    expect(screen.getByRole('heading', { name: /go crypto bot/i })).toBeInTheDocument();
  });
});
</file>

<file path="src/app/(dashboard)/address-validator/page.tsx">
import AddressValidatorExample from '@/components/AddressValidatorExample';
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Address Validator | Crypto Bot',
  description: 'Validate cryptocurrency wallet addresses across different networks',
};

export default function AddressValidatorPage() {
  return (
    <div className="container py-10">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Address Validator</h1>
        <p className="text-muted-foreground">
          Validate cryptocurrency wallet addresses and get additional information about them.
        </p>
      </div>
      
      <div className="grid gap-8">
        <AddressValidatorExample />
      </div>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/backtesting/[backtestId]/page.tsx">
'use client';

import { useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  ArrowLeft, 
  ArrowUpRight, 
  ArrowDownRight, 
  LineChart,
  Settings,
  Calendar,
  BarChart3,
  Download,
  Play
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

export default function BacktestDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const { backtestId } = params;
  const [activeTab, setActiveTab] = useState('overview');
  
  // Mock data for the specific backtest
  const backtest = {
    id: backtestId as string,
    name: `Backtest ${backtestId}`,
    strategy: backtestId === '1' ? 'Momentum Strategy' : backtestId === '2' ? 'Mean Reversion' : 'MACD Crossover',
    asset: backtestId === '1' ? 'BTC/USD' : backtestId === '2' ? 'ETH/USD' : 'SOL/USD',
    startDate: backtestId === '1' ? '2023-01-01' : backtestId === '2' ? '2022-10-15' : '2023-02-28',
    endDate: backtestId === '1' ? '2023-06-30' : backtestId === '2' ? '2023-04-15' : '2023-08-31',
    initialCapital: 10000,
    finalCapital: backtestId === '1' ? 13542.87 : backtestId === '2' ? 9875.32 : 11256.78,
    totalReturn: backtestId === '1' ? 35.43 : backtestId === '2' ? -1.25 : 12.57,
    annualizedReturn: backtestId === '1' ? 78.56 : backtestId === '2' ? -2.83 : 21.34,
    maxDrawdown: backtestId === '1' ? 15.32 : backtestId === '2' ? 28.67 : 18.92,
    sharpeRatio: backtestId === '1' ? 1.87 : backtestId === '2' ? 0.78 : 1.32,
    winRate: backtestId === '1' ? 68.5 : backtestId === '2' ? 42.3 : 55.7,
    status: 'completed',
    createdAt: backtestId === '1' ? '2023-07-12' : backtestId === '2' ? '2023-05-20' : '2023-09-03',
    trades: backtestId === '1' ? 42 : backtestId === '2' ? 65 : 38,
    parameterSets: [
      { name: 'Moving Average Period', value: backtestId === '1' ? '14' : backtestId === '2' ? '21' : '9' },
      { name: 'RSI Threshold', value: backtestId === '1' ? '70' : backtestId === '2' ? '65' : '75' },
      { name: 'Stop Loss', value: backtestId === '1' ? '5%' : backtestId === '2' ? '7%' : '4%' },
      { name: 'Take Profit', value: backtestId === '1' ? '15%' : backtestId === '2' ? '12%' : '10%' },
      { name: 'Position Size', value: backtestId === '1' ? '20%' : backtestId === '2' ? '15%' : '25%' },
    ]
  };
  
  // Mock trade data
  const trades = Array.from({ length: parseInt(backtest.trades.toString()) }, (_, i) => {
    const isProfit = Math.random() > 0.5;
    const entryPrice = Math.random() * 30000 + 20000;
    const exitPrice = isProfit ? entryPrice * (1 + Math.random() * 0.1) : entryPrice * (1 - Math.random() * 0.1);
    const profit = exitPrice - entryPrice;
    
    return {
      id: i + 1,
      type: Math.random() > 0.5 ? 'buy' : 'sell',
      entryDate: new Date(new Date(backtest.startDate).getTime() + Math.random() * (new Date(backtest.endDate).getTime() - new Date(backtest.startDate).getTime())).toISOString().split('T')[0],
      exitDate: new Date(new Date(backtest.startDate).getTime() + Math.random() * (new Date(backtest.endDate).getTime() - new Date(backtest.startDate).getTime())).toISOString().split('T')[0],
      entryPrice: entryPrice.toFixed(2),
      exitPrice: exitPrice.toFixed(2),
      profit: profit.toFixed(2),
      profitPercent: (profit / entryPrice * 100).toFixed(2),
      isProfit
    };
  }).sort((a, b) => new Date(a.entryDate).getTime() - new Date(b.entryDate).getTime());
  
  // Mock equity curve data
  const equityCurve = Array.from({ length: 30 }, (_, i) => {
    const date = new Date(backtest.startDate);
    date.setDate(date.getDate() + i * Math.floor((new Date(backtest.endDate).getTime() - new Date(backtest.startDate).getTime()) / (30 * 24 * 60 * 60 * 1000)));
    
    let equity = backtest.initialCapital;
    if (backtest.totalReturn > 0) {
      equity = backtest.initialCapital * (1 + (backtest.totalReturn / 100) * (i / 29));
    } else {
      equity = backtest.initialCapital * (1 + (backtest.totalReturn / 100) * (i / 29));
    }
    
    // Add some noise to make it look more realistic
    equity = equity * (1 + (Math.random() * 0.03 - 0.015));
    
    return {
      date: date.toISOString().split('T')[0],
      equity: equity
    };
  });
  
  return (
    <div className="space-y-6">
      <div className="flex items-center">
        <Button variant="ghost" size="sm" onClick={() => router.back()} className="mr-4">
          <ArrowLeft className="h-4 w-4 mr-1" />
          Back
        </Button>
        <div className="flex items-center mr-auto">
          <div className="h-10 w-10 rounded-full bg-gray-100 mr-3 flex items-center justify-center">
            <Settings className="h-5 w-5" />
          </div>
          <div>
            <h1 className="text-2xl font-bold">{backtest.name}</h1>
            <p className="text-muted-foreground">{backtest.strategy} on {backtest.asset}</p>
          </div>
        </div>
        <Button className="mr-2">
          <Play className="h-4 w-4 mr-2" />
          Deploy Strategy
        </Button>
        <Button variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Export Results
        </Button>
      </div>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total Return</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">{backtest.totalReturn}%</CardTitle>
              <Badge variant={backtest.totalReturn >= 0 ? "default" : "destructive"} className="ml-2">
                {backtest.totalReturn >= 0 ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {backtest.annualizedReturn}% Ann.
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              ${backtest.initialCapital.toLocaleString()} ‚Üí ${backtest.finalCapital.toLocaleString()}
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Win Rate</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">{backtest.winRate}%</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              From {backtest.trades} total trades
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Max Drawdown</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl text-red-500">-{backtest.maxDrawdown}%</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Largest peak-to-trough decline
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Sharpe Ratio</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">{backtest.sharpeRatio}</CardTitle>
              <Badge variant={backtest.sharpeRatio >= 1 ? "default" : backtest.sharpeRatio >= 0.5 ? "outline" : "destructive"} className="ml-2">
                {backtest.sharpeRatio >= 1 ? 'Good' : backtest.sharpeRatio >= 0.5 ? 'Average' : 'Poor'}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Risk-adjusted return
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="overview" className="w-full" value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="equity">Equity Curve</TabsTrigger>
          <TabsTrigger value="trades">Trade List</TabsTrigger>
          <TabsTrigger value="parameters">Parameters</TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Backtest Summary</CardTitle>
              <CardDescription>Performance overview for {backtest.strategy}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">General Information</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Strategy</dt>
                        <dd className="text-sm font-medium">{backtest.strategy}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Asset</dt>
                        <dd className="text-sm font-medium">{backtest.asset}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Date Range</dt>
                        <dd className="text-sm font-medium">{backtest.startDate} to {backtest.endDate}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Created On</dt>
                        <dd className="text-sm font-medium">{backtest.createdAt}</dd>
                      </div>
                    </dl>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">Performance Metrics</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Initial Capital</dt>
                        <dd className="text-sm font-medium">${backtest.initialCapital.toLocaleString()}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Final Capital</dt>
                        <dd className="text-sm font-medium">${backtest.finalCapital.toLocaleString()}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Total Return</dt>
                        <dd className={`text-sm font-medium ${backtest.totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {backtest.totalReturn >= 0 ? '+' : ''}{backtest.totalReturn}%
                        </dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Annualized Return</dt>
                        <dd className={`text-sm font-medium ${backtest.annualizedReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {backtest.annualizedReturn >= 0 ? '+' : ''}{backtest.annualizedReturn}%
                        </dd>
                      </div>
                    </dl>
                  </div>
                </div>
              </div>
              
              <div className="mt-6">
                <h3 className="text-sm font-medium text-muted-foreground">Key Statistics</h3>
                <Separator className="my-2" />
                
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mt-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Win Rate</div>
                    <div className="text-xl font-semibold mt-1">{backtest.winRate}%</div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Total Trades</div>
                    <div className="text-xl font-semibold mt-1">{backtest.trades}</div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Max Drawdown</div>
                    <div className="text-xl font-semibold mt-1 text-red-500">-{backtest.maxDrawdown}%</div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Sharpe Ratio</div>
                    <div className="text-xl font-semibold mt-1">{backtest.sharpeRatio}</div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Profit Factor</div>
                    <div className="text-xl font-semibold mt-1">{(Math.random() * 2 + 1).toFixed(2)}</div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm text-muted-foreground">Avg. Trade</div>
                    <div className={`text-xl font-semibold mt-1 ${backtest.totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {backtest.totalReturn >= 0 ? '+' : ''}{(backtest.totalReturn / backtest.trades).toFixed(2)}%
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="equity" className="mt-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Equity Curve</CardTitle>
                  <CardDescription>Performance over time</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="h-96 flex items-center justify-center">
              <div className="text-center">
                <LineChart className="mx-auto h-12 w-12 text-gray-400" />
                <p className="mt-2">Equity curve chart will be displayed here</p>
                <p className="text-sm text-gray-500">Showing equity growth from {backtest.startDate} to {backtest.endDate}</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="trades" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Trade List</CardTitle>
              <CardDescription>All trades executed during the backtest</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>#</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Entry Date</TableHead>
                    <TableHead>Exit Date</TableHead>
                    <TableHead>Entry Price</TableHead>
                    <TableHead>Exit Price</TableHead>
                    <TableHead>Profit/Loss</TableHead>
                    <TableHead>P/L %</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {trades.slice(0, 10).map(trade => (
                    <TableRow key={trade.id}>
                      <TableCell>{trade.id}</TableCell>
                      <TableCell>{trade.type.toUpperCase()}</TableCell>
                      <TableCell>{trade.entryDate}</TableCell>
                      <TableCell>{trade.exitDate}</TableCell>
                      <TableCell>${trade.entryPrice}</TableCell>
                      <TableCell>${trade.exitPrice}</TableCell>
                      <TableCell className={trade.isProfit ? 'text-green-600' : 'text-red-600'}>
                        {trade.isProfit ? '+' : ''}${trade.profit}
                      </TableCell>
                      <TableCell className={trade.isProfit ? 'text-green-600' : 'text-red-600'}>
                        {trade.isProfit ? '+' : ''}{trade.profitPercent}%
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              {trades.length > 10 && (
                <div className="flex justify-center mt-4">
                  <Button variant="outline" size="sm">
                    View All {trades.length} Trades
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="parameters" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Strategy Parameters</CardTitle>
              <CardDescription>Configuration used for this backtest</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Parameter</TableHead>
                    <TableHead>Value</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {backtest.parameterSets.map((param, idx) => (
                    <TableRow key={idx}>
                      <TableCell>{param.name}</TableCell>
                      <TableCell>{param.value}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              
              <div className="mt-6">
                <h3 className="text-sm font-medium">Strategy Description</h3>
                <Separator className="my-2" />
                <p className="text-sm text-muted-foreground mt-2">
                  {backtest.strategy === 'Momentum Strategy' 
                    ? 'This strategy aims to capture the momentum of price movements. It buys assets that have shown strong recent performance, expecting the trend to continue. The strategy uses parameters like moving averages and momentum indicators to identify entry and exit points.'
                    : backtest.strategy === 'Mean Reversion'
                    ? 'Mean reversion strategies operate on the assumption that asset prices tend to revert to their historical average over time. This strategy buys when prices fall below their historical average and sells when they rise above it, using indicators like RSI to identify overbought and oversold conditions.'
                    : 'The MACD Crossover strategy uses the Moving Average Convergence Divergence indicator to identify potential trend changes. It generates buy signals when the MACD line crosses above the signal line and sell signals when it crosses below, helping to capture price momentum while filtering out noise.'}
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/backtesting/page.tsx">
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Search, 
  Plus, 
  Settings, 
  ArrowUpRight, 
  ArrowDownRight, 
  MoreHorizontal, 
  Filter, 
  Calendar,
  Download,
  LineChart,
  BarChart3,
  BriefcaseBusiness
} from 'lucide-react';

// Define interface for backtest data to avoid type errors
interface Backtest {
  id: string;
  name: string;
  strategy: string;
  asset: string;
  startDate?: string;
  endDate?: string;
  initialCapital: number;
  finalCapital?: number;
  totalReturn?: number;
  annualizedReturn?: number;
  maxDrawdown?: number;
  sharpeRatio?: number;
  winRate?: number;
  status: 'completed' | 'running';
  createdAt: string;
  trades?: number;
  parameterSets?: { name: string; value: string }[];
}

export default function BacktestingPage() {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('all');
  
  // Mock data for backtests
  const backtests: Backtest[] = [
    {
      id: '1',
      name: 'Momentum Strategy Backtest',
      strategy: 'Momentum Strategy',
      asset: 'BTC/USD',
      startDate: '2023-01-01',
      endDate: '2023-06-30',
      initialCapital: 10000,
      finalCapital: 13542.87,
      totalReturn: 35.43,
      annualizedReturn: 78.56,
      maxDrawdown: 15.32,
      sharpeRatio: 1.87,
      winRate: 68.5,
      status: 'completed',
      createdAt: '2023-07-12',
      trades: 42
    },
    {
      id: '2',
      name: 'Mean Reversion Test',
      strategy: 'Mean Reversion',
      asset: 'ETH/USD',
      startDate: '2022-10-15',
      endDate: '2023-04-15',
      initialCapital: 10000,
      finalCapital: 9875.32,
      totalReturn: -1.25,
      annualizedReturn: -2.83,
      maxDrawdown: 28.67,
      sharpeRatio: 0.78,
      winRate: 42.3,
      status: 'completed',
      createdAt: '2023-05-20',
      trades: 65
    },
    {
      id: '3',
      name: 'MACD Crossover Strategy',
      strategy: 'MACD Crossover',
      asset: 'SOL/USD',
      startDate: '2023-02-28',
      endDate: '2023-08-31',
      initialCapital: 10000,
      finalCapital: 11256.78,
      totalReturn: 12.57,
      annualizedReturn: 21.34,
      maxDrawdown: 18.92,
      sharpeRatio: 1.32,
      winRate: 55.7,
      status: 'completed',
      createdAt: '2023-09-03',
      trades: 38
    },
    {
      id: '4',
      name: 'RSI Overbought/Oversold',
      strategy: 'RSI Strategy',
      asset: 'BTC/USD',
      startDate: '2023-03-01',
      endDate: '2023-09-01',
      initialCapital: 10000,
      finalCapital: 12789.45,
      totalReturn: 27.89,
      annualizedReturn: 56.32,
      maxDrawdown: 12.54,
      sharpeRatio: 2.01,
      winRate: 72.1,
      status: 'completed',
      createdAt: '2023-09-12',
      trades: 28
    },
    {
      id: '5',
      name: 'Bollinger Bands Strategy',
      strategy: 'Bollinger Bands',
      asset: 'ETH/USD',
      startDate: '2023-01-15',
      endDate: '2023-07-15',
      initialCapital: 10000,
      finalCapital: 10892.36,
      totalReturn: 8.92,
      annualizedReturn: 18.15,
      maxDrawdown: 14.75,
      sharpeRatio: 1.14,
      winRate: 52.8,
      status: 'completed',
      createdAt: '2023-07-28',
      trades: 56
    },
    {
      id: '6',
      name: 'Grid Trading Test',
      strategy: 'Grid Trading',
      asset: 'BTC/USD',
      initialCapital: 10000,
      status: 'running',
      createdAt: '2023-09-25',
    }
  ];
  
  const filteredBacktests = backtests
    .filter(backtest => 
      backtest.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      backtest.strategy.toLowerCase().includes(searchQuery.toLowerCase()) ||
      backtest.asset.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .filter(backtest => 
      activeTab === 'all' || 
      (activeTab === 'completed' && backtest.status === 'completed') ||
      (activeTab === 'running' && backtest.status === 'running')
    );
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Backtesting</h1>
          <p className="text-muted-foreground">Create and analyze strategy backtests</p>
        </div>
        <Button onClick={() => router.push('/backtesting/new')}>
          <Plus className="mr-2 h-4 w-4" />
          New Backtest
        </Button>
      </div>
      
      <div className="flex items-center space-x-2">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search backtests..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="icon">
              <Filter className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem>Filter by date</DropdownMenuItem>
            <DropdownMenuItem>Filter by performance</DropdownMenuItem>
            <DropdownMenuItem>Filter by strategy</DropdownMenuItem>
            <DropdownMenuItem>Filter by asset</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        <Select defaultValue="newest">
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="newest">Newest first</SelectItem>
            <SelectItem value="oldest">Oldest first</SelectItem>
            <SelectItem value="performance">Best performance</SelectItem>
            <SelectItem value="worst">Worst performance</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      <Tabs defaultValue="all" className="w-full" value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="all">All Backtests</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="running">Running</TabsTrigger>
        </TabsList>
        
        <TabsContent value="all" className="mt-6">
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredBacktests.map((backtest) => (
              <Card key={backtest.id} className="overflow-hidden">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <CardTitle className="text-lg font-medium">{backtest.name}</CardTitle>
                      <CardDescription>{backtest.strategy} on {backtest.asset}</CardDescription>
                    </div>
                    <Badge variant={backtest.status === 'completed' ? "outline" : "default"}>
                      {backtest.status === 'completed' ? 'Completed' : 'Running'}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="pb-2">
                  {backtest.status === 'completed' ? (
                    <>
                      <div className="flex items-center justify-between mb-2">
                        <div className="text-sm text-muted-foreground">Total Return</div>
                        <div className={`text-sm font-medium ${(backtest.totalReturn ?? 0) >= 0 ? 'text-green-600' : 'text-red-600'} flex items-center`}>
                          {(backtest.totalReturn ?? 0) >= 0 ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                          {backtest.totalReturn ?? 0}%
                        </div>
                      </div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="text-sm text-muted-foreground">Win Rate</div>
                        <div className="text-sm font-medium">{backtest.winRate ?? 0}%</div>
                      </div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="text-sm text-muted-foreground">Sharpe Ratio</div>
                        <div className="text-sm font-medium">{backtest.sharpeRatio ?? 0}</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="text-sm text-muted-foreground">Total Trades</div>
                        <div className="text-sm font-medium">{backtest.trades ?? 0}</div>
                      </div>
                    </>
                  ) : (
                    <div className="py-4 flex items-center justify-center">
                      <div className="text-center">
                        <LineChart className="h-6 w-6 text-muted-foreground mx-auto mb-2" />
                        <p className="text-sm text-muted-foreground">Backtest in progress</p>
                      </div>
                    </div>
                  )}
                </CardContent>
                <CardFooter className="pt-2 border-t flex justify-between items-center">
                  <div className="text-xs text-muted-foreground">
                    Created {new Date(backtest.createdAt).toLocaleDateString()}
                  </div>
                  <div className="flex items-center space-x-1">
                    <Button variant="ghost" size="icon" onClick={() => router.push(`/backtesting/${backtest.id}`)}>
                      <Settings className="h-4 w-4" />
                    </Button>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => router.push(`/backtesting/${backtest.id}`)}>View Details</DropdownMenuItem>
                        {backtest.status === 'completed' && <DropdownMenuItem>Deploy Strategy</DropdownMenuItem>}
                        <DropdownMenuItem>Duplicate</DropdownMenuItem>
                        {backtest.status === 'completed' && <DropdownMenuItem>Export Results</DropdownMenuItem>}
                        <DropdownMenuItem className="text-red-600">Delete</DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
          
          {filteredBacktests.length === 0 && (
            <div className="text-center py-10">
              <div className="inline-flex items-center justify-center rounded-full bg-muted p-4 mb-4">
                <LineChart className="h-10 w-10 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold">No backtests found</h3>
              <p className="text-muted-foreground mb-4">
                {searchQuery ? `No results match "${searchQuery}"` : "You haven't created any backtests yet."}
              </p>
              <Button onClick={() => router.push('/backtesting/new')}>
                <Plus className="mr-2 h-4 w-4" />
                Create Backtest
              </Button>
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="completed" className="mt-6">
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredBacktests.map((backtest) => (
              <Card key={backtest.id} className="overflow-hidden">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <CardTitle className="text-lg font-medium">{backtest.name}</CardTitle>
                      <CardDescription>{backtest.strategy} on {backtest.asset}</CardDescription>
                    </div>
                    <Badge variant="outline">Completed</Badge>
                  </div>
                </CardHeader>
                <CardContent className="pb-2">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm text-muted-foreground">Total Return</div>
                    <div className={`text-sm font-medium ${(backtest.totalReturn ?? 0) >= 0 ? 'text-green-600' : 'text-red-600'} flex items-center`}>
                      {(backtest.totalReturn ?? 0) >= 0 ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                      {backtest.totalReturn ?? 0}%
                    </div>
                  </div>
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm text-muted-foreground">Win Rate</div>
                    <div className="text-sm font-medium">{backtest.winRate ?? 0}%</div>
                  </div>
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm text-muted-foreground">Sharpe Ratio</div>
                    <div className="text-sm font-medium">{backtest.sharpeRatio ?? 0}</div>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-muted-foreground">Total Trades</div>
                    <div className="text-sm font-medium">{backtest.trades ?? 0}</div>
                  </div>
                </CardContent>
                <CardFooter className="pt-2 border-t flex justify-between items-center">
                  <div className="text-xs text-muted-foreground">
                    Created {new Date(backtest.createdAt).toLocaleDateString()}
                  </div>
                  <div className="flex items-center space-x-1">
                    <Button variant="ghost" size="icon" onClick={() => router.push(`/backtesting/${backtest.id}`)}>
                      <Settings className="h-4 w-4" />
                    </Button>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => router.push(`/backtesting/${backtest.id}`)}>View Details</DropdownMenuItem>
                        <DropdownMenuItem>Deploy Strategy</DropdownMenuItem>
                        <DropdownMenuItem>Duplicate</DropdownMenuItem>
                        <DropdownMenuItem>Export Results</DropdownMenuItem>
                        <DropdownMenuItem className="text-red-600">Delete</DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="running" className="mt-6">
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredBacktests.map((backtest) => (
              <Card key={backtest.id} className="overflow-hidden">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <CardTitle className="text-lg font-medium">{backtest.name}</CardTitle>
                      <CardDescription>{backtest.strategy} on {backtest.asset}</CardDescription>
                    </div>
                    <Badge>Running</Badge>
                  </div>
                </CardHeader>
                <CardContent className="pb-2">
                  <div className="py-4 flex items-center justify-center">
                    <div className="text-center">
                      <LineChart className="h-6 w-6 text-muted-foreground mx-auto mb-2" />
                      <p className="text-sm text-muted-foreground">Backtest in progress</p>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="pt-2 border-t flex justify-between items-center">
                  <div className="text-xs text-muted-foreground">
                    Created {new Date(backtest.createdAt).toLocaleDateString()}
                  </div>
                  <div className="flex items-center space-x-1">
                    <Button variant="ghost" size="icon" onClick={() => router.push(`/backtesting/${backtest.id}`)}>
                      <Settings className="h-4 w-4" />
                    </Button>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => router.push(`/backtesting/${backtest.id}`)}>View Status</DropdownMenuItem>
                        <DropdownMenuItem className="text-red-600">Cancel</DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/config/page.tsx">
export default function ConfigPage() {
  return <h1>Bot Config</h1>;
}
</file>

<file path="src/app/(dashboard)/dashboard/page.tsx">
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { BarChart, LineChart } from '@tremor/react';
import { ArrowUpRight, ArrowDownRight, DollarSign, TrendingUp, Clock, Zap } from 'lucide-react';

export default function DashboardPage() {
  // Sample data - would be fetched from an API in a real implementation
  const portfolioValue = 28547.63;
  const portfolioChange = 5.25;
  const isPositiveChange = portfolioChange >= 0;
  
  const performanceData = [
    { date: 'Jan', value: 2000 },
    { date: 'Feb', value: 4000 },
    { date: 'Mar', value: 3800 },
    { date: 'Apr', value: 5600 },
    { date: 'May', value: 7000 },
    { date: 'Jun', value: 6400 },
    { date: 'Jul', value: 8200 },
  ];
  
  const tradingPairData = [
    { pair: 'BTC/USDT', volume: 12500 },
    { pair: 'ETH/USDT', volume: 8300 },
    { pair: 'SOL/USDT', volume: 5200 },
    { pair: 'BNB/USDT', volume: 3800 },
    { pair: 'ADA/USDT', volume: 2100 },
  ];
  
  const newsUpdates = [
    { 
      title: 'Bitcoin hits new high for 2023', 
      summary: 'Bitcoin reached $69,000, setting a new record for the year amid increased institutional adoption.',
      date: '2h ago'
    },
    { 
      title: 'New trading algorithm released', 
      summary: 'Our platform now supports the advanced Fibonacci Retracement strategy for automated trading.',
      date: '1d ago'
    },
    { 
      title: 'System maintenance complete', 
      summary: 'The scheduled maintenance has been completed with significant performance improvements.',
      date: '2d ago'
    },
  ];
  
  const activeBots = 4;
  const completedTrades = 128;
  const successRate = 76;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Dashboard</h1>
      <p className="text-muted-foreground">Welcome to your trading command center.</p>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Portfolio Value</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${portfolioValue.toLocaleString()}</div>
            <div className="flex items-center">
              {isPositiveChange ? (
                <ArrowUpRight className="mr-1 h-4 w-4 text-emerald-500" />
              ) : (
                <ArrowDownRight className="mr-1 h-4 w-4 text-rose-500" />
              )}
              <p className={`text-xs ${isPositiveChange ? 'text-emerald-500' : 'text-rose-500'}`}>
                {isPositiveChange ? '+' : ''}{portfolioChange}% from last month
              </p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Bots</CardTitle>
            <Zap className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{activeBots}</div>
            <p className="text-xs text-muted-foreground">
              Running strategies across 6 pairs
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Completed Trades</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{completedTrades}</div>
            <p className="text-xs text-muted-foreground">
              Last 30 days
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{successRate}%</div>
            <p className="text-xs text-muted-foreground">
              Profitable trades ratio
            </p>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue="performance" className="space-y-4">
        <TabsList>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="volume">Trading Volume</TabsTrigger>
        </TabsList>
        <TabsContent value="performance">
          <Card>
            <CardHeader>
              <CardTitle>Portfolio Performance</CardTitle>
              <CardDescription>
                Your portfolio value over the last 7 months
              </CardDescription>
            </CardHeader>
            <CardContent>
              <LineChart
                data={performanceData}
                index="date"
                categories={["value"]}
                colors={["emerald"]}
                valueFormatter={(value) => `$${value.toLocaleString()}`}
                showLegend={false}
                height="h-72"
              />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="volume">
          <Card>
            <CardHeader>
              <CardTitle>Trading Volume by Pair</CardTitle>
              <CardDescription>
                Volume distribution across different trading pairs
              </CardDescription>
            </CardHeader>
            <CardContent>
              <BarChart
                data={tradingPairData}
                index="pair"
                categories={["volume"]}
                colors={["blue"]}
                valueFormatter={(value) => `$${value.toLocaleString()}`}
                showLegend={false}
                height="h-72"
              />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      <Card>
        <CardHeader>
          <CardTitle>News & Updates</CardTitle>
          <CardDescription>
            Latest platform and market news
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {newsUpdates.map((news, index) => (
              <div key={index} className="border-b pb-4 last:border-0 last:pb-0">
                <h3 className="font-medium">{news.title}</h3>
                <p className="text-sm text-muted-foreground">{news.summary}</p>
                <p className="mt-1 text-xs text-muted-foreground">{news.date}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/new-coins/page.tsx">
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Search, TrendingUp, Star, AlertTriangle, ArrowUpRight, Settings, Info, Filter } from 'lucide-react';

export default function NewCoinsPage() {
  const [marketFilter, setMarketFilter] = useState('all');
  const [timeRange, setTimeRange] = useState('24h');

  // Sample data - would be fetched from API
  const trendingCoins = [
    { 
      id: 'coin1', 
      name: 'NewProject', 
      symbol: 'NEWP', 
      price: 0.000342, 
      change: 136.5, 
      marketCap: 2500000, 
      volume: 4800000, 
      launchDate: '2 days ago',
      risk: 'high',
      exchanges: ['DEX-A', 'CEX-B'],
      tags: ['GameFi', 'New']
    },
    { 
      id: 'coin2', 
      name: 'MetaFinance', 
      symbol: 'MFI', 
      price: 0.0215, 
      change: 83.2, 
      marketCap: 8700000, 
      volume: 12500000, 
      launchDate: '5 days ago',
      risk: 'medium',
      exchanges: ['DEX-A', 'DEX-C'],
      tags: ['DeFi', 'New']
    },
    { 
      id: 'coin3', 
      name: 'CryptoVerse', 
      symbol: 'CVERSE', 
      price: 0.0067, 
      change: 45.8, 
      marketCap: 4200000, 
      volume: 9300000, 
      launchDate: '3 days ago',
      risk: 'medium',
      exchanges: ['CEX-A'],
      tags: ['Metaverse', 'New']
    },
    { 
      id: 'coin4', 
      name: 'AIToken', 
      symbol: 'AIT', 
      price: 1.24, 
      change: 28.3, 
      marketCap: 32000000, 
      volume: 18500000, 
      launchDate: '1 week ago',
      risk: 'low',
      exchanges: ['CEX-A', 'CEX-B', 'DEX-A'],
      tags: ['AI', 'Trending']
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold tracking-tight">New Coins Discovery</h1>
        <Button variant="outline">
          <Settings className="h-4 w-4 mr-2" />
          Alert Settings
        </Button>
      </div>

      <div className="flex flex-col space-y-4">
        <Card>
          <CardHeader>
            <CardTitle>Find New Opportunities</CardTitle>
            <CardDescription>Discover and analyze new cryptocurrency projects</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-4">
              <div className="flex-1 min-w-[280px]">
                <Label htmlFor="search">Search by name or symbol</Label>
                <div className="relative mt-1">
                  <Search className="absolute left-2 top-3 h-4 w-4 text-muted-foreground" />
                  <Input id="search" placeholder="Search..." className="pl-8" />
                </div>
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <Label>Market</Label>
                <Select defaultValue="all" onValueChange={setMarketFilter}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select market" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Markets</SelectItem>
                    <SelectItem value="dex">DEX Only</SelectItem>
                    <SelectItem value="cex">CEX Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <Label>Launch Period</Label>
                <Select defaultValue="7d">
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select period" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="24h">Last 24 hours</SelectItem>
                    <SelectItem value="3d">Last 3 days</SelectItem>
                    <SelectItem value="7d">Last 7 days</SelectItem>
                    <SelectItem value="30d">Last 30 days</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <Label>Category</Label>
                <Select defaultValue="all">
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Categories</SelectItem>
                    <SelectItem value="defi">DeFi</SelectItem>
                    <SelectItem value="gamefi">GameFi</SelectItem>
                    <SelectItem value="metaverse">Metaverse</SelectItem>
                    <SelectItem value="ai">AI</SelectItem>
                    <SelectItem value="meme">Meme</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="mt-4">
              <Label>Minimum % Change in {timeRange}</Label>
              <div className="flex items-center gap-4 mt-2">
                <Slider defaultValue={[25]} max={500} step={5} className="flex-1" />
                <span className="text-sm font-medium">25%</span>
              </div>
            </div>
            
            <div className="mt-4 flex flex-wrap gap-2">
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">DeFi</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">GameFi</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">NFT</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">Metaverse</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">Meme</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">AI</Badge>
              <Badge variant="outline" className="cursor-pointer hover:bg-muted">Web3</Badge>
            </div>
            
            <div className="flex justify-end mt-4">
              <Button>
                <Filter className="h-4 w-4 mr-2" />
                Apply Filters
              </Button>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="trending" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="trending">
              <TrendingUp className="h-4 w-4 mr-2" />
              Trending
            </TabsTrigger>
            <TabsTrigger value="watchlist">
              <Star className="h-4 w-4 mr-2" />
              Watchlist
            </TabsTrigger>
            <TabsTrigger value="new-listings">
              <ArrowUpRight className="h-4 w-4 mr-2" />
              New Listings
            </TabsTrigger>
            <TabsTrigger value="high-potential">
              <AlertTriangle className="h-4 w-4 mr-2" />
              High Risk/Reward
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="trending" className="mt-4 space-y-4">
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-medium">Trending New Projects</h3>
              <Select defaultValue="24h" onValueChange={setTimeRange}>
                <SelectTrigger className="w-[120px]">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1h">1H Change</SelectItem>
                  <SelectItem value="24h">24H Change</SelectItem>
                  <SelectItem value="7d">7D Change</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2">
              {trendingCoins.map((coin) => (
                <Card key={coin.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <div className="flex justify-between">
                      <div>
                        <CardTitle className="text-lg">{coin.name} <span className="text-sm text-muted-foreground ml-1">{coin.symbol}</span></CardTitle>
                        <CardDescription>Launched {coin.launchDate}</CardDescription>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">${coin.price < 0.01 ? coin.price.toFixed(6) : coin.price.toFixed(2)}</div>
                        <div className="text-emerald-500 text-sm">+{coin.change}% ({timeRange})</div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="text-muted-foreground">Market Cap:</span>
                        <div>${(coin.marketCap / 1000000).toFixed(1)}M</div>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Volume ({timeRange}):</span>
                        <div>${(coin.volume / 1000000).toFixed(1)}M</div>
                      </div>
                      <div className="flex flex-wrap gap-1 mt-2">
                        {coin.tags.map((tag) => (
                          <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
                        ))}
                      </div>
                      <div className="flex items-center mt-2">
                        <span className={`inline-flex items-center rounded-full px-2 py-1 text-xs ${
                          coin.risk === 'high' ? 'bg-red-100 text-red-800' : 
                          coin.risk === 'medium' ? 'bg-yellow-100 text-yellow-800' : 
                          'bg-green-100 text-green-800'
                        }`}>
                          {coin.risk.charAt(0).toUpperCase() + coin.risk.slice(1)} Risk
                        </span>
                        <Info className="h-4 w-4 ml-1 text-muted-foreground cursor-help" />
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-between pt-2">
                    <div className="flex flex-wrap gap-1">
                      {coin.exchanges.map((exchange) => (
                        <Badge key={exchange} variant="outline" className="text-xs">{exchange}</Badge>
                      ))}
                    </div>
                    <div className="space-x-2">
                      <Button size="sm" variant="outline">
                        <Star className="h-3.5 w-3.5 mr-1" />
                        Watch
                      </Button>
                      <Button size="sm">
                        Analyze
                      </Button>
                    </div>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
          
          <TabsContent value="watchlist" className="mt-4">
            <div className="flex items-center justify-center h-[300px]">
              <div className="text-center">
                <Star className="mx-auto h-12 w-12 text-muted-foreground" />
                <h3 className="mt-4 text-lg font-semibold">Your Watchlist is Empty</h3>
                <p className="mt-2 text-sm text-muted-foreground">
                  Add new coins to your watchlist to track their performance
                </p>
                <Button className="mt-4" size="sm">Browse Trending Coins</Button>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="new-listings" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>New Listings</CardTitle>
                <CardDescription>Coins recently listed on exchanges</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-muted-foreground">
                  This feature is coming soon. You'll be able to see the newest coins as they get listed on exchanges.
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="high-potential" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>High Risk/High Reward Projects</CardTitle>
                <CardDescription>Projects with significant volatility and potential</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-muted-foreground">
                  This feature is coming soon. You'll be able to discover high-risk projects with potential for significant returns.
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/portfolio/[assetId]/page.tsx">
'use client';

import { useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  ArrowLeft, 
  ArrowUpRight, 
  ArrowDownRight, 
  LineChart, 
  Wallet, 
  Clock,
  BarChart3,
  TrendingUp,
  TrendingDown,
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

export default function AssetDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const { assetId } = params;
  const [timeframe, setTimeframe] = useState('7d');
  
  // Mock data for the specific asset
  const asset = {
    id: assetId as string,
    name: assetId === 'btc' ? 'Bitcoin' : assetId === 'eth' ? 'Ethereum' : 'Solana',
    symbol: assetId === 'btc' ? 'BTC' : assetId === 'eth' ? 'ETH' : 'SOL',
    price: assetId === 'btc' ? 34840.51 : assetId === 'eth' ? 2791.39 : 125.16,
    amount: assetId === 'btc' ? 0.45 : assetId === 'eth' ? 3.2 : 28.5,
    value: assetId === 'btc' ? 15678.23 : assetId === 'eth' ? 8932.45 : 3567.12,
    change24h: assetId === 'btc' ? 2.43 : assetId === 'eth' ? -1.87 : 5.21,
    change7d: assetId === 'btc' ? 5.67 : assetId === 'eth' ? -2.31 : 12.54,
    change30d: assetId === 'btc' ? 8.92 : assetId === 'eth' ? 4.23 : 15.78,
    totalPnL: assetId === 'btc' ? 3245.67 : assetId === 'eth' ? -876.32 : 1543.21,
    totalPnLPercent: assetId === 'btc' ? 26.08 : assetId === 'eth' ? -8.94 : 76.23,
    totalPnLIsUp: assetId === 'btc' ? true : assetId === 'eth' ? false : true,
    costBasis: assetId === 'btc' ? 27580.12 : assetId === 'eth' ? 3064.91 : 71.02,
    positionOpened: assetId === 'btc' ? '2023-06-12' : assetId === 'eth' ? '2023-08-05' : '2023-05-23',
  };
  
  // Historical data points for chart
  const historicalData = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    
    // Generate different price patterns based on asset
    let baseValue;
    if (assetId === 'btc') {
      baseValue = 32000 + Math.random() * 4000;
    } else if (assetId === 'eth') {
      baseValue = 2600 + Math.random() * 400;
    } else {
      baseValue = 100 + Math.random() * 50;
    }
    
    return {
      date: date.toISOString().split('T')[0],
      price: baseValue
    };
  });
  
  // Transactions for this asset
  const transactions = [
    {
      id: 1, 
      type: 'buy', 
      amount: asset.amount * 0.4, 
      price: asset.costBasis * 0.95, 
      total: asset.amount * 0.4 * asset.costBasis * 0.95, 
      date: asset.positionOpened
    },
    {
      id: 2, 
      type: 'buy', 
      amount: asset.amount * 0.6, 
      price: asset.costBasis * 1.05, 
      total: asset.amount * 0.6 * asset.costBasis * 1.05, 
      date: new Date(new Date(asset.positionOpened).getTime() + 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    },
  ];
  
  return (
    <div className="space-y-6">
      <div className="flex items-center">
        <Button variant="ghost" size="sm" onClick={() => router.back()} className="mr-4">
          <ArrowLeft className="h-4 w-4 mr-1" />
          Back
        </Button>
        <div className="flex items-center mr-auto">
          <div className="h-10 w-10 rounded-full bg-gray-100 mr-3 flex items-center justify-center">
            {asset.symbol.charAt(0)}
          </div>
          <div>
            <h1 className="text-2xl font-bold">{asset.name}</h1>
            <p className="text-muted-foreground">{asset.symbol}</p>
          </div>
        </div>
        <Button className="mr-2">Buy</Button>
        <Button variant="outline">Sell</Button>
      </div>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Current Price</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${asset.price.toLocaleString()}</CardTitle>
              <Badge variant={asset.change24h >= 0 ? "default" : "destructive"} className="ml-2">
                {asset.change24h >= 0 ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {asset.change24h}%
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              24h change
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Your Holdings</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">{asset.amount} {asset.symbol}</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Worth ${asset.value.toLocaleString()}
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Cost Basis</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${asset.costBasis.toLocaleString()}</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Average purchase price
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total P&L</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${asset.totalPnL.toLocaleString()}</CardTitle>
              <Badge variant={asset.totalPnLIsUp ? "default" : "destructive"} className="ml-2">
                {asset.totalPnLIsUp ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {asset.totalPnLPercent}%
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Since position opened
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="chart" className="w-full">
        <TabsList>
          <TabsTrigger value="chart">Price Chart</TabsTrigger>
          <TabsTrigger value="transactions">Transactions</TabsTrigger>
          <TabsTrigger value="stats">Asset Stats</TabsTrigger>
        </TabsList>
        
        <TabsContent value="chart" className="mt-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Price History</CardTitle>
                  <CardDescription>Track price movements over time</CardDescription>
                </div>
                <div className="flex space-x-2">
                  <Button variant={timeframe === '24h' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('24h')}>24H</Button>
                  <Button variant={timeframe === '7d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('7d')}>7D</Button>
                  <Button variant={timeframe === '30d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('30d')}>30D</Button>
                  <Button variant={timeframe === '90d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('90d')}>90D</Button>
                  <Button variant={timeframe === '1y' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('1y')}>1Y</Button>
                  <Button variant={timeframe === 'all' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('all')}>All</Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="h-96 flex items-center justify-center">
              <div className="text-center">
                <LineChart className="mx-auto h-12 w-12 text-gray-400" />
                <p className="mt-2">Price chart will be displayed here</p>
                <p className="text-sm text-gray-500">Showing {timeframe} price history for {asset.name}</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="transactions" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Transaction History</CardTitle>
              <CardDescription>Your trading activity for {asset.name}</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Type</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Total</TableHead>
                    <TableHead>Date</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {transactions.map(tx => (
                    <TableRow key={tx.id}>
                      <TableCell>
                        <Badge variant={tx.type === 'buy' ? "default" : "outline"}>
                          {tx.type === 'buy' ? (
                            <TrendingUp className="h-3 w-3 mr-1" />
                          ) : (
                            <TrendingDown className="h-3 w-3 mr-1" />
                          )}
                          {tx.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{tx.amount.toFixed(6)} {asset.symbol}</TableCell>
                      <TableCell>${tx.price.toLocaleString()}</TableCell>
                      <TableCell>${tx.total.toLocaleString()}</TableCell>
                      <TableCell>{tx.date}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="stats" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Asset Statistics</CardTitle>
              <CardDescription>Key performance metrics for {asset.name}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">Position Information</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Position Opened</dt>
                        <dd className="text-sm font-medium">{asset.positionOpened}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Quantity</dt>
                        <dd className="text-sm font-medium">{asset.amount} {asset.symbol}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Current Value</dt>
                        <dd className="text-sm font-medium">${asset.value.toLocaleString()}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Avg. Entry Price</dt>
                        <dd className="text-sm font-medium">${asset.costBasis.toLocaleString()}</dd>
                      </div>
                    </dl>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">Market Performance</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">24h Change</dt>
                        <dd className={`text-sm font-medium ${asset.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {asset.change24h >= 0 ? '+' : ''}{asset.change24h}%
                        </dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">7d Change</dt>
                        <dd className={`text-sm font-medium ${asset.change7d >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {asset.change7d >= 0 ? '+' : ''}{asset.change7d}%
                        </dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">30d Change</dt>
                        <dd className={`text-sm font-medium ${asset.change30d >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {asset.change30d >= 0 ? '+' : ''}{asset.change30d}%
                        </dd>
                      </div>
                    </dl>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">Your Performance</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Total P&L</dt>
                        <dd className={`text-sm font-medium ${asset.totalPnLIsUp ? 'text-green-600' : 'text-red-600'}`}>
                          ${asset.totalPnL.toLocaleString()} ({asset.totalPnLPercent}%)
                        </dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Unrealized P&L</dt>
                        <dd className={`text-sm font-medium ${asset.totalPnLIsUp ? 'text-green-600' : 'text-red-600'}`}>
                          ${asset.totalPnL.toLocaleString()} ({asset.totalPnLPercent}%)
                        </dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Return on Investment</dt>
                        <dd className={`text-sm font-medium ${asset.totalPnLPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {asset.totalPnLPercent >= 0 ? '+' : ''}{asset.totalPnLPercent}%
                        </dd>
                      </div>
                    </dl>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-muted-foreground">Trading Activity</h3>
                    <Separator className="my-2" />
                    <dl className="space-y-2">
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Total Transactions</dt>
                        <dd className="text-sm font-medium">{transactions.length}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">Last Transaction</dt>
                        <dd className="text-sm font-medium">{transactions[transactions.length - 1].date}</dd>
                      </div>
                      <div className="flex justify-between">
                        <dt className="text-sm text-muted-foreground">First Acquisition</dt>
                        <dd className="text-sm font-medium">{asset.positionOpened}</dd>
                      </div>
                    </dl>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/portfolio/page.tsx">
"use client";

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { BarChart3, Wallet, TrendingUp, TrendingDown, LineChart, DollarSign, Clock } from 'lucide-react';
import { AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';
import { PortfolioPerformance } from '@/components/portfolio/performance/PortfolioPerformance';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowUpIcon, ArrowDownIcon } from 'lucide-react';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { ArrowUpRight, ArrowDownRight, Search, ArrowUpDown } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

const Portfolio = () => {
  const [activeTab, setActiveTab] = useState<string>('overview');
  const [sortField, setSortField] = useState('allocation');
  const [sortDirection, setSortDirection] = useState('desc');
  const [searchTerm, setSearchTerm] = useState('');
  const [timeframe, setTimeframe] = useState('7d');

  // Mock data for portfolio
  const portfolioData = [
    { date: 'Apr 01', value: 22943 },
    { date: 'Apr 02', value: 23121 },
    { date: 'Apr 03', value: 24500 },
    { date: 'Apr 04', value: 25100 },
    { date: 'Apr 05', value: 23800 },
    { date: 'Apr 06', value: 26300 },
    { date: 'Apr 07', value: 27432 },
  ];

  const holdings = [
    {
      coin: 'Bitcoin',
      symbol: 'BTC',
      amount: '0.42',
      price: 58432.21,
      value: 24541.53,
      allocation: 89.5,
      change24h: 3.2,
      change7d: 8.7,
      cost: 22134.25,
      pnl: 2407.28
    },
    {
      coin: 'Ethereum',
      symbol: 'ETH',
      amount: '2.15',
      price: 2843.67,
      value: 6113.89,
      allocation: 22.3,
      change24h: 2.6,
      change7d: 9.3,
      cost: 5780.55,
      pnl: 333.34
    },
    {
      coin: 'Solana',
      symbol: 'SOL',
      amount: '32.5',
      price: 142.86,
      value: 4642.95,
      allocation: 16.9,
      change24h: -1.2,
      change7d: 12.8,
      cost: 4225.50,
      pnl: 417.45
    },
    {
      coin: 'Binance Coin',
      symbol: 'BNB',
      amount: '8.7',
      price: 563.21,
      value: 4899.93,
      allocation: 17.9,
      change24h: 1.8,
      change7d: -0.5,
      cost: 4912.25,
      pnl: -12.32
    },
    {
      coin: 'Cardano',
      symbol: 'ADA',
      amount: '2750',
      price: 0.89,
      value: 2447.50,
      allocation: 8.9,
      change24h: -2.1,
      change7d: -4.2,
      cost: 2585.35,
      pnl: -137.85
    },
  ];

  const transactions = [
    { id: '1234', type: 'BUY', coin: 'BTC', amount: '0.05', price: 57921.34, total: 2896.07, date: '2025-04-07 08:32:16', status: 'completed' },
    { id: '1233', type: 'SELL', coin: 'ETH', amount: '0.8', price: 2821.19, total: 2256.95, date: '2025-04-06 15:21:03', status: 'completed' },
    { id: '1232', type: 'BUY', coin: 'SOL', amount: '12.5', price: 139.42, total: 1742.75, date: '2025-04-05 12:45:38', status: 'completed' },
    { id: '1231', type: 'BUY', coin: 'BNB', amount: '2.2', price: 558.32, total: 1228.30, date: '2025-04-04 09:12:52', status: 'completed' },
    { id: '1230', type: 'SELL', coin: 'ADA', amount: '550', price: 0.92, total: 506.00, date: '2025-04-03 14:24:11', status: 'completed' },
  ];

  const totalValue = 27432.85;
  const totalPnLPercent = 11.2;

  // Sample data - replace with API call
  const assets = [
    {
      id: 'btc',
      name: 'Bitcoin',
      symbol: 'BTC',
      price: 39420.65,
      change24h: 2.5,
      balance: 0.16,
      value: 6307.30,
    },
    {
      id: 'eth',
      name: 'Ethereum',
      symbol: 'ETH',
      price: 2324.75,
      change24h: -1.2,
      balance: 1.25,
      value: 2905.94,
    },
    {
      id: 'sol',
      name: 'Solana',
      symbol: 'SOL',
      price: 86.32,
      change24h: 4.8,
      balance: 15.5,
      value: 1337.96,
    },
    {
      id: 'usdt',
      name: 'Tether',
      symbol: 'USDT',
      price: 1.00,
      change24h: 0.01,
      balance: 857.23,
      value: 857.23,
    },
  ];

  const totalPortfolioValue = assets.reduce((acc, asset) => acc + asset.value, 0);
  
  const filteredAssets = assets.filter(asset => 
    asset.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
    asset.symbol.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  const sortedAssets = [...filteredAssets].sort((a, b) => {
    const fieldA = a[sortField as keyof typeof a];
    const fieldB = b[sortField as keyof typeof b];
    
    if (typeof fieldA === 'number' && typeof fieldB === 'number') {
      return sortDirection === 'asc' ? fieldA - fieldB : fieldB - fieldA;
    }
    
    if (typeof fieldA === 'string' && typeof fieldB === 'string') {
      return sortDirection === 'asc' 
        ? fieldA.localeCompare(fieldB) 
        : fieldB.localeCompare(fieldA);
    }
    
    return 0;
  });
  
  const handleSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const portfolioValue = {
    total: 34567.89,
    change: 827.34,
    changePercent: 2.45,
    isUp: true
  };

  const portfolioStats = {
    dailyPnL: 152.67,
    dailyPnLPercent: 0.44,
    dailyPnLIsUp: true,
    weeklyPnL: 827.34,
    weeklyPnLPercent: 2.45,
    weeklyPnLIsUp: true,
    monthlyPnL: 1567.21,
    monthlyPnLPercent: 4.75,
    monthlyPnLIsUp: true,
    allTimePnL: 5432.10,
    allTimePnLPercent: 18.65,
    allTimePnLIsUp: true
  };

  const recentTransactions = [
    { id: 1, type: 'buy', asset: 'Bitcoin', symbol: 'BTC', amount: 0.05, price: 34650.20, total: 1732.51, date: '2023-11-21T14:32:21Z' },
    { id: 2, type: 'sell', asset: 'Ethereum', symbol: 'ETH', amount: 0.8, price: 2810.45, total: 2248.36, date: '2023-11-20T09:15:47Z' },
    { id: 3, type: 'buy', asset: 'Solana', symbol: 'SOL', amount: 5.0, price: 123.78, total: 618.90, date: '2023-11-19T18:01:33Z' },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Portfolio</h1>
        <Button>
          <Clock className="mr-2 h-4 w-4" />
          Transaction History
        </Button>
      </div>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total Portfolio Value</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${portfolioValue.total.toLocaleString()}</CardTitle>
              <Badge variant={portfolioValue.isUp ? "default" : "destructive"} className="ml-2">
                {portfolioValue.isUp ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {portfolioValue.changePercent}%
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              {portfolioValue.isUp ? '+' : '-'}${Math.abs(portfolioValue.change).toLocaleString()} (7d)
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Daily P&L</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${portfolioStats.dailyPnL.toLocaleString()}</CardTitle>
              <Badge variant={portfolioStats.dailyPnLIsUp ? "default" : "destructive"} className="ml-2">
                {portfolioStats.dailyPnLIsUp ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {portfolioStats.dailyPnLPercent}%
              </Badge>
            </div>
          </CardHeader>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Weekly P&L</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${portfolioStats.weeklyPnL.toLocaleString()}</CardTitle>
              <Badge variant={portfolioStats.weeklyPnLIsUp ? "default" : "destructive"} className="ml-2">
                {portfolioStats.weeklyPnLIsUp ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {portfolioStats.weeklyPnLPercent}%
              </Badge>
            </div>
          </CardHeader>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>All Time P&L</CardDescription>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl">${portfolioStats.allTimePnL.toLocaleString()}</CardTitle>
              <Badge variant={portfolioStats.allTimePnLIsUp ? "default" : "destructive"} className="ml-2">
                {portfolioStats.allTimePnLIsUp ? <ArrowUpRight className="h-3 w-3 mr-1" /> : <ArrowDownRight className="h-3 w-3 mr-1" />}
                {portfolioStats.allTimePnLPercent}%
              </Badge>
            </div>
          </CardHeader>
        </Card>
      </div>

      <Tabs defaultValue="assets" className="w-full">
        <TabsList>
          <TabsTrigger value="assets">Assets</TabsTrigger>
          <TabsTrigger value="transactions">Recent Transactions</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
        </TabsList>
        
        <TabsContent value="assets" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Your Assets</CardTitle>
              <CardDescription>Manage your cryptocurrency portfolio</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Asset</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Holdings</TableHead>
                    <TableHead>Value</TableHead>
                    <TableHead>24h</TableHead>
                    <TableHead></TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {assets.map(asset => (
                    <TableRow key={asset.id}>
                      <TableCell className="font-medium">
                        <div className="flex items-center">
                          <div className="w-8 h-8 rounded-full bg-gray-100 mr-3 flex items-center justify-center">
                            {asset.symbol.charAt(0)}
                          </div>
                          <div>
                            <div>{asset.name}</div>
                            <div className="text-sm text-gray-500">{asset.symbol}</div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>${asset.price.toLocaleString()}</TableCell>
                      <TableCell>{asset.amount} {asset.symbol}</TableCell>
                      <TableCell>${asset.value.toLocaleString()}</TableCell>
                      <TableCell className={asset.pnlIsUp ? "text-green-600" : "text-red-600"}>
                        {asset.pnlIsUp ? "+" : ""}{asset.pnl}%
                      </TableCell>
                      <TableCell>
                        <Link href={`/portfolio/${asset.id}`}>
                          <Button variant="ghost" size="sm">Details</Button>
                        </Link>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="transactions" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Recent Transactions</CardTitle>
              <CardDescription>Your latest trading activity</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Type</TableHead>
                    <TableHead>Asset</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Total</TableHead>
                    <TableHead>Date</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {recentTransactions.map(tx => (
                    <TableRow key={tx.id}>
                      <TableCell>
                        <Badge variant={tx.type === 'buy' ? "default" : "outline"}>
                          {tx.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell className="font-medium">
                        {tx.asset} ({tx.symbol})
                      </TableCell>
                      <TableCell>{tx.amount} {tx.symbol}</TableCell>
                      <TableCell>${tx.price.toLocaleString()}</TableCell>
                      <TableCell>${tx.total.toLocaleString()}</TableCell>
                      <TableCell>{new Date(tx.date).toLocaleDateString()}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
            <CardFooter className="justify-end">
              <Button variant="outline">View All Transactions</Button>
            </CardFooter>
          </Card>
        </TabsContent>
        
        <TabsContent value="performance" className="mt-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Performance Metrics</CardTitle>
                  <CardDescription>Track your portfolio performance over time</CardDescription>
                </div>
                <div className="flex space-x-2">
                  <Button variant={timeframe === '7d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('7d')}>7D</Button>
                  <Button variant={timeframe === '30d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('30d')}>30D</Button>
                  <Button variant={timeframe === '90d' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('90d')}>90D</Button>
                  <Button variant={timeframe === '1y' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('1y')}>1Y</Button>
                  <Button variant={timeframe === 'all' ? 'default' : 'outline'} size="sm" onClick={() => setTimeframe('all')}>All</Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="h-80 flex items-center justify-center">
              <div className="text-center">
                <BarChart className="mx-auto h-12 w-12 text-gray-400" />
                <p className="mt-2">Performance chart will be displayed here</p>
                <p className="text-sm text-gray-500">Showing {timeframe.toUpperCase()} performance</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Portfolio;
</file>

<file path="src/app/(dashboard)/settings/page.tsx">
export default function SettingsPage() {
  return <h1>Settings</h1>;
}
</file>

<file path="src/app/(dashboard)/system/page.tsx">
'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { 
  ServerIcon, 
  BarChart3, 
  AlertCircle, 
  CheckCircle2, 
  Clock, 
  FileDown, 
  RefreshCw,
  HardDrive,
  Cpu,
  Database as Memory,
  Network,
  AlertTriangle,
  Terminal
} from 'lucide-react';

export default function SystemPage() {
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [logLevel, setLogLevel] = useState('info');
  
  // Sample data - would be fetched from API
  const systemHealth = {
    status: 'operational',
    uptime: '7d 14h 23m',
    cpuUsage: 42,
    memoryUsage: 68,
    diskUsage: 54,
    networkLatency: 28,
    activeStrategies: 3,
    errors: [],
    warnings: [
      { id: 'w1', message: 'High memory usage on strategy processing', timestamp: '2023-08-05T14:32:15Z', level: 'warning' }
    ]
  };
  
  const recentTasks = [
    { id: 't1', name: 'Daily market data sync', status: 'completed', duration: '3m 42s', timestamp: '2023-08-05T00:05:23Z' },
    { id: 't2', name: 'Strategy backtest calculation', status: 'completed', duration: '12m 18s', timestamp: '2023-08-04T22:15:47Z' },
    { id: 't3', name: 'Portfolio rebalance check', status: 'completed', duration: '1m 12s', timestamp: '2023-08-04T18:30:12Z' },
    { id: 't4', name: 'API integration health check', status: 'completed', duration: '0m 47s', timestamp: '2023-08-04T12:00:03Z' },
  ];
  
  const systemLogs = [
    { id: 'l1', level: 'info', message: 'System startup complete', component: 'core', timestamp: '2023-08-05T08:00:03Z' },
    { id: 'l2', level: 'info', message: 'Connected to exchange API successfully', component: 'api', timestamp: '2023-08-05T08:00:05Z' },
    { id: 'l3', level: 'warning', message: 'High memory usage detected', component: 'monitor', timestamp: '2023-08-05T14:32:15Z' },
    { id: 'l4', level: 'info', message: 'Daily market data sync started', component: 'data', timestamp: '2023-08-05T00:05:00Z' },
    { id: 'l5', level: 'info', message: 'Daily market data sync completed', component: 'data', timestamp: '2023-08-05T00:05:23Z' },
  ];
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h1 className="text-3xl font-bold tracking-tight">System</h1>
        <div className="flex gap-3">
          <Button size="sm" variant="outline">
            <FileDown className="h-4 w-4 mr-2" />
            Export Logs
          </Button>
          <Button size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh Data
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center">
              {systemHealth.status === 'operational' ? (
                <CheckCircle2 className="h-5 w-5 text-green-500 mr-2" />
              ) : (
                <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
              )}
              <span className="font-medium text-lg capitalize">{systemHealth.status}</span>
            </div>
            <div className="flex items-center mt-2 text-sm text-muted-foreground">
              <Clock className="h-4 w-4 mr-1" />
              Uptime: {systemHealth.uptime}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">CPU Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <Cpu className="h-5 w-5 text-blue-500 mr-2" />
              <Progress value={systemHealth.cpuUsage} className="h-2 flex-1 mx-2" />
              <span className="font-medium">{systemHealth.cpuUsage}%</span>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Memory Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <Memory className="h-5 w-5 text-purple-500 mr-2" />
              <Progress value={systemHealth.memoryUsage} className="h-2 flex-1 mx-2" />
              <span className="font-medium">{systemHealth.memoryUsage}%</span>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Disk Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <HardDrive className="h-5 w-5 text-orange-500 mr-2" />
              <Progress value={systemHealth.diskUsage} className="h-2 flex-1 mx-2" />
              <span className="font-medium">{systemHealth.diskUsage}%</span>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {systemHealth.warnings.length > 0 && (
        <Alert className="bg-yellow-50 border-yellow-200">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>System Warning</AlertTitle>
          <AlertDescription>
            {systemHealth.warnings[0].message}
          </AlertDescription>
        </Alert>
      )}
      
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">System Monitoring</h2>
        <div className="flex items-center gap-2">
          <Label htmlFor="show-advanced" className="text-sm">Show Advanced</Label>
          <Switch id="show-advanced" checked={showAdvanced} onCheckedChange={setShowAdvanced} />
        </div>
      </div>
      
      <Tabs defaultValue="overview">
        <TabsList>
          <TabsTrigger value="overview">
            <BarChart3 className="h-4 w-4 mr-2" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="tasks">
            <Clock className="h-4 w-4 mr-2" />
            Recent Tasks
          </TabsTrigger>
          <TabsTrigger value="logs">
            <Terminal className="h-4 w-4 mr-2" />
            System Logs
          </TabsTrigger>
          <TabsTrigger value="network">
            <Network className="h-4 w-4 mr-2" />
            Network
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="mt-4 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>System Overview</CardTitle>
              <CardDescription>Current system performance and resources</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-4">
                  <h3 className="font-medium">Performance</h3>
                  <div className="space-y-2">
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">CPU Load (5m avg)</span>
                        <span>2.4</span>
                      </div>
                      <Progress value={48} className="h-1 mt-1" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Memory</span>
                        <span>5.4 GB / 8 GB</span>
                      </div>
                      <Progress value={68} className="h-1 mt-1" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Swap</span>
                        <span>0.2 GB / 4 GB</span>
                      </div>
                      <Progress value={5} className="h-1 mt-1" />
                    </div>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <h3 className="font-medium">Storage</h3>
                  <div className="space-y-2">
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">System Disk</span>
                        <span>54 GB / 100 GB</span>
                      </div>
                      <Progress value={54} className="h-1 mt-1" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Data Disk</span>
                        <span>128 GB / 500 GB</span>
                      </div>
                      <Progress value={25} className="h-1 mt-1" />
                    </div>
                    
                    <div className="text-sm">
                      <span className="text-muted-foreground">Database Size:</span>
                      <span className="ml-2">42 GB</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="font-medium mb-4">Active Services</h3>
                  <div className="space-y-2">
                    <div className="flex items-center">
                      <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                      <span>API Server</span>
                    </div>
                    <div className="flex items-center">
                      <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                      <span>Trading Engine</span>
                    </div>
                    <div className="flex items-center">
                      <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                      <span>Data Collector</span>
                    </div>
                    <div className="flex items-center">
                      <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                      <span>Authentication Service</span>
                    </div>
                    <div className="flex items-center">
                      <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                      <span>Database</span>
                    </div>
                    {showAdvanced && (
                      <>
                        <div className="flex items-center">
                          <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                          <span>Strategy Processor</span>
                        </div>
                        <div className="flex items-center">
                          <Badge variant="outline" className="mr-2 border-green-200 bg-green-50 text-green-700">Active</Badge>
                          <span>Notification Service</span>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter className="border-t pt-4 text-sm text-muted-foreground">
              <ServerIcon className="h-4 w-4 mr-2" />
              Last updated: 2 minutes ago
            </CardFooter>
          </Card>
          
          {showAdvanced && (
            <Card>
              <CardHeader>
                <CardTitle>Advanced Metrics</CardTitle>
                <CardDescription>Detailed system performance metrics</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-muted-foreground">
                  Advanced system metrics will be displayed here. This feature is under development.
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>
        
        <TabsContent value="tasks" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Recent System Tasks</CardTitle>
              <CardDescription>System maintenance and scheduled tasks</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Task</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Duration</TableHead>
                    <TableHead>Timestamp</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {recentTasks.map((task) => (
                    <TableRow key={task.id}>
                      <TableCell>{task.name}</TableCell>
                      <TableCell>
                        <Badge variant={task.status === 'completed' ? 'outline' : 'secondary'} className={
                          task.status === 'completed' ? 'border-green-200 bg-green-50 text-green-700' : ''
                        }>
                          {task.status}
                        </Badge>
                      </TableCell>
                      <TableCell>{task.duration}</TableCell>
                      <TableCell className="text-muted-foreground">
                        {new Date(task.timestamp).toLocaleString()}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
            <CardFooter className="flex justify-between border-t pt-4">
              <Button variant="outline" size="sm">View All Tasks</Button>
              <Select defaultValue="24h">
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder="Time Period" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="24h">Last 24 Hours</SelectItem>
                  <SelectItem value="7d">Last 7 Days</SelectItem>
                  <SelectItem value="30d">Last 30 Days</SelectItem>
                </SelectContent>
              </Select>
            </CardFooter>
          </Card>
        </TabsContent>
        
        <TabsContent value="logs" className="mt-4">
          <Card>
            <CardHeader>
              <div className="flex flex-col md:flex-row justify-between md:items-center gap-4">
                <div>
                  <CardTitle>System Logs</CardTitle>
                  <CardDescription>Application and system event logs</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Label htmlFor="log-level" className="text-sm">Log Level</Label>
                  <Select value={logLevel} onValueChange={setLogLevel}>
                    <SelectTrigger id="log-level" className="w-[100px]">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="debug">Debug</SelectItem>
                      <SelectItem value="info">Info</SelectItem>
                      <SelectItem value="warning">Warning</SelectItem>
                      <SelectItem value="error">Error</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="bg-slate-950 text-slate-50 p-4 rounded-md font-mono text-sm max-h-[400px] overflow-y-auto">
                {systemLogs.map((log) => (
                  <div key={log.id} className={`mb-2 ${
                    log.level === 'error' ? 'text-red-400' :
                    log.level === 'warning' ? 'text-yellow-400' : 
                    log.level === 'info' ? 'text-blue-400' : 'text-gray-400'
                  }`}>
                    <span className="text-gray-400">[{new Date(log.timestamp).toLocaleTimeString()}]</span> 
                    <span className="ml-2 uppercase">[{log.level}]</span> 
                    <span className="ml-2">[{log.component}]</span> 
                    <span className="ml-2">{log.message}</span>
                  </div>
                ))}
              </div>
            </CardContent>
            <CardFooter className="flex justify-between border-t pt-4">
              <Button variant="outline" size="sm">Clear Logs</Button>
              <Button variant="outline" size="sm">Download Logs</Button>
            </CardFooter>
          </Card>
        </TabsContent>
        
        <TabsContent value="network" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Network Status</CardTitle>
              <CardDescription>API connections and network performance</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <h3 className="font-medium mb-3">Exchange API Status</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="border rounded-md p-3">
                      <div className="flex items-center justify-between">
                        <div className="font-medium">Binance</div>
                        <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Connected</Badge>
                      </div>
                      <div className="text-sm text-muted-foreground mt-2">
                        Latency: 78ms
                      </div>
                    </div>
                    
                    <div className="border rounded-md p-3">
                      <div className="flex items-center justify-between">
                        <div className="font-medium">Coinbase</div>
                        <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Connected</Badge>
                      </div>
                      <div className="text-sm text-muted-foreground mt-2">
                        Latency: 102ms
                      </div>
                    </div>
                    
                    <div className="border rounded-md p-3">
                      <div className="flex items-center justify-between">
                        <div className="font-medium">Kraken</div>
                        <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Connected</Badge>
                      </div>
                      <div className="text-sm text-muted-foreground mt-2">
                        Latency: 94ms
                      </div>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="font-medium mb-3">Network Performance</h3>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">API Response Time (avg)</span>
                        <span>86ms</span>
                      </div>
                      <Progress value={28} className="h-1 mt-1" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Data Transfer Rate</span>
                        <span>1.2 MB/s</span>
                      </div>
                      <Progress value={32} className="h-1 mt-1" />
                    </div>
                    
                    {showAdvanced && (
                      <div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">WebSocket Connections</span>
                          <span>8 active</span>
                        </div>
                        <Progress value={40} className="h-1 mt-1" />
                      </div>
                    )}
                  </div>
                </div>
                
                {showAdvanced && (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>API Endpoint</TableHead>
                        <TableHead>Requests (24h)</TableHead>
                        <TableHead>Avg. Response</TableHead>
                        <TableHead>Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell>/api/market/data</TableCell>
                        <TableCell>1,248</TableCell>
                        <TableCell>92ms</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Healthy</Badge>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>/api/portfolio</TableCell>
                        <TableCell>783</TableCell>
                        <TableCell>124ms</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Healthy</Badge>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>/api/trading/execute</TableCell>
                        <TableCell>156</TableCell>
                        <TableCell>218ms</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="border-green-200 bg-green-50 text-green-700">Healthy</Badge>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/testing/page.tsx">
export default function TestingPage() {
  return <h1>Testing</h1>;
}
</file>

<file path="src/app/(dashboard)/trading/page.tsx">
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ArrowUpDown, BookOpen, Wallet, LineChart, Calendar } from 'lucide-react';

export default function TradingPage() {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight">Trading Dashboard</h1>
        <div className="flex items-center space-x-2">
          <Button variant="outline">
            <Calendar className="mr-2 h-4 w-4" />
            Trading History
          </Button>
          <Button>
            <ArrowUpDown className="mr-2 h-4 w-4" />
            New Trade
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Portfolio Value</CardTitle>
            <CardDescription>Total value across all exchanges</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">$24,892.41</div>
            <p className="text-xs text-muted-foreground mt-1">
              <span className="text-emerald-500">‚Üë 2.5%</span> from last week
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Open Positions</CardTitle>
            <CardDescription>Currently active trades</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">7</div>
            <p className="text-xs text-muted-foreground mt-1">
              Across 4 different exchanges
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Today's P&L</CardTitle>
            <CardDescription>Daily profit/loss</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-emerald-500">+$156.32</div>
            <p className="text-xs text-muted-foreground mt-1">
              <span className="text-emerald-500">‚Üë 0.63%</span> daily change
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="active" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="active">Active Positions</TabsTrigger>
          <TabsTrigger value="pending">Pending Orders</TabsTrigger>
          <TabsTrigger value="market">Market Overview</TabsTrigger>
          <TabsTrigger value="strategies">Active Strategies</TabsTrigger>
        </TabsList>
        <TabsContent value="active" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Active Trading Positions</CardTitle>
              <CardDescription>Currently open trades across all connected exchanges</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="relative w-full overflow-auto">
                <table className="w-full caption-bottom text-sm">
                  <thead className="[&_tr]:border-b">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Symbol</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Type</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Entry Price</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Current Price</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Quantity</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">P&L</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="[&_tr:last-child]:border-0">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">BTC/USDT</td>
                      <td className="p-4 align-middle text-emerald-500">Long</td>
                      <td className="p-4 align-middle">$36,245.00</td>
                      <td className="p-4 align-middle">$36,782.50</td>
                      <td className="p-4 align-middle">0.15 BTC</td>
                      <td className="p-4 align-middle text-emerald-500">+$80.63 (1.48%)</td>
                      <td className="p-4 align-middle">
                        <Button variant="outline" size="sm">Close</Button>
                      </td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">ETH/USDT</td>
                      <td className="p-4 align-middle text-emerald-500">Long</td>
                      <td className="p-4 align-middle">$2,450.75</td>
                      <td className="p-4 align-middle">$2,523.18</td>
                      <td className="p-4 align-middle">1.8 ETH</td>
                      <td className="p-4 align-middle text-emerald-500">+$130.37 (2.96%)</td>
                      <td className="p-4 align-middle">
                        <Button variant="outline" size="sm">Close</Button>
                      </td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">SOL/USDT</td>
                      <td className="p-4 align-middle text-rose-500">Short</td>
                      <td className="p-4 align-middle">$102.34</td>
                      <td className="p-4 align-middle">$98.76</td>
                      <td className="p-4 align-middle">25 SOL</td>
                      <td className="p-4 align-middle text-emerald-500">+$89.50 (3.50%)</td>
                      <td className="p-4 align-middle">
                        <Button variant="outline" size="sm">Close</Button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="pending" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Pending Orders</CardTitle>
              <CardDescription>Orders waiting to be executed</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-center p-8">
                <div className="text-center">
                  <BookOpen className="mx-auto h-12 w-12 text-muted-foreground" />
                  <h3 className="mt-4 text-lg font-semibold">No Pending Orders</h3>
                  <p className="mt-2 text-sm text-muted-foreground">
                    You don't have any pending orders at the moment.
                  </p>
                  <Button className="mt-4" size="sm">Create Order</Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="market" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Market Overview</CardTitle>
              <CardDescription>Current market sentiment and trends</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="relative w-full overflow-auto">
                <table className="w-full caption-bottom text-sm">
                  <thead className="[&_tr]:border-b">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Asset</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Price</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">24h Change</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">24h Volume</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Market Cap</th>
                    </tr>
                  </thead>
                  <tbody className="[&_tr:last-child]:border-0">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">Bitcoin (BTC)</td>
                      <td className="p-4 align-middle">$36,782.50</td>
                      <td className="p-4 align-middle text-emerald-500">+2.35%</td>
                      <td className="p-4 align-middle">$28.2B</td>
                      <td className="p-4 align-middle">$712.5B</td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">Ethereum (ETH)</td>
                      <td className="p-4 align-middle">$2,523.18</td>
                      <td className="p-4 align-middle text-emerald-500">+3.82%</td>
                      <td className="p-4 align-middle">$17.6B</td>
                      <td className="p-4 align-middle">$302.7B</td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">Solana (SOL)</td>
                      <td className="p-4 align-middle">$98.76</td>
                      <td className="p-4 align-middle text-rose-500">-1.24%</td>
                      <td className="p-4 align-middle">$4.8B</td>
                      <td className="p-4 align-middle">$42.3B</td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">Cardano (ADA)</td>
                      <td className="p-4 align-middle">$0.58</td>
                      <td className="p-4 align-middle text-emerald-500">+0.87%</td>
                      <td className="p-4 align-middle">$1.2B</td>
                      <td className="p-4 align-middle">$20.4B</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="strategies" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Active Trading Strategies</CardTitle>
              <CardDescription>Automated strategies currently running</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="relative w-full overflow-auto">
                <table className="w-full caption-bottom text-sm">
                  <thead className="[&_tr]:border-b">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Strategy</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Assets</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Start Date</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">P&L</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Status</th>
                      <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="[&_tr:last-child]:border-0">
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">DCA Bitcoin Weekly</td>
                      <td className="p-4 align-middle">BTC</td>
                      <td className="p-4 align-middle">Mar 15, 2023</td>
                      <td className="p-4 align-middle text-emerald-500">+12.4%</td>
                      <td className="p-4 align-middle"><span className="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground bg-green-100">Active</span></td>
                      <td className="p-4 align-middle">
                        <Button variant="outline" size="sm">Pause</Button>
                      </td>
                    </tr>
                    <tr className="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                      <td className="p-4 align-middle font-medium">ETH/BTC Swing Trade</td>
                      <td className="p-4 align-middle">ETH, BTC</td>
                      <td className="p-4 align-middle">Jun 28, 2023</td>
                      <td className="p-4 align-middle text-emerald-500">+8.7%</td>
                      <td className="p-4 align-middle"><span className="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground bg-green-100">Active</span></td>
                      <td className="p-4 align-middle">
                        <Button variant="outline" size="sm">Pause</Button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/(dashboard)/layout.tsx">
'use client';

import React from 'react';
import { MainLayout } from '@/components/layout/MainLayout';

export default function DashboardLayout({ children }: { children: React.ReactNode }) {
  return (
    <MainLayout>
      {children}
    </MainLayout>
  );
}
</file>

<file path="src/app/(dashboard)/page.tsx">
export default function DashboardHome() {
  return <h1>Dashboard Home</h1>;
}
</file>

<file path="src/app/api/address-validator/info/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/address-validator/info`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': request.headers.get('Authorization') || '',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to get address info' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error getting address info:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/address-validator/networks/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/address-validator/networks`, {
      headers: {
        'Authorization': request.headers.get('Authorization') || '',
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to get supported networks' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error getting supported networks:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/address-validator/validate/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/address-validator/validate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': request.headers.get('Authorization') || '',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to validate address' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error validating address:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/wallet-verification/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/wallet-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': request.headers.get('Authorization') || '',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to verify wallet' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error verifying wallet:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/wallets/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';

export async function GET(request: NextRequest) {
  try {
    const user = await currentUser();
    
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/wallets`, {
      headers: {
        'Authorization': request.headers.get('Authorization') || '',
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to get wallets' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error getting wallets:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const user = await currentUser();
    
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const body = await request.json();
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/wallets`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': request.headers.get('Authorization') || '',
      },
      body: JSON.stringify({
        ...body,
        userId: user.id
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to create wallet' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error creating wallet:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/sign-in/[[...sign-in]]/page.tsx">
import { SignIn } from '@clerk/nextjs'

export default function Page() {
  return <SignIn />
}
</file>

<file path="src/app/sign-up/[[...sign-up]]/page.tsx">
import { SignUp } from '@clerk/nextjs'

export default function Page() {
  return <SignUp />
}
</file>

<file path="src/app/globals.css">
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;

  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;

  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;

  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;

  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;

  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;

  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;

  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 222.2 84% 4.9%;

  --radius: 0.5rem;

  --sidebar-background: 0 0% 100%;
  --sidebar-foreground: 222.2 84% 4.9%;
  --sidebar-primary: 222.2 47.4% 11.2%;
  --sidebar-primary-foreground: 210 40% 98%;
  --sidebar-accent: 210 40% 96.1%;
  --sidebar-accent-foreground: 222.2 47.4% 11.2%;
  --sidebar-border: 214.3 31.8% 91.4%;
  --sidebar-ring: 222.2 84% 4.9%;
}

.dark {
  --background: 0 0% 7%;
  --foreground: 0 0% 97%;

  --card: 0 0% 12%;
  --card-foreground: 0 0% 97%;

  --popover: 0 0% 12%;
  --popover-foreground: 0 0% 97%;

  --primary: 210 100% 47%;
  --primary-foreground: 0 0% 100%;

  --secondary: 240 4.8% 15.9%;
  --secondary-foreground: 0 0% 97%;

  --muted: 0 0% 15%;
  --muted-foreground: 0 0% 70%;

  --accent: 0 0% 15%;
  --accent-foreground: 0 0% 97%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 97%;

  --border: 0 0% 20%;
  --input: 0 0% 15%;
  --ring: 0 0% 20%;

  --radius: 0;

  --sidebar-background: 0 0% 7%;
  --sidebar-foreground: 0 0% 97%;
  --sidebar-primary: 210 100% 47%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 0 0% 12%;
  --sidebar-accent-foreground: 0 0% 97%;
  --sidebar-border: 0 0% 20%;
  --sidebar-ring: 210 100% 47%;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #1e1e1e;
}

::-webkit-scrollbar-thumb {
  background: #555;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #777;
}

/* Global styles */
.clickable {
  cursor: pointer;
}

.text-success {
  color: #4caf50;
}

.text-error {
  color: #f44336;
}

.text-warning {
  color: #ff9800;
}

.text-info {
  color: #2196f3;
}

/* Animation for loading */
@keyframes pulse {
  0% {
    opacity: 0.6;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.6;
  }
}

/* Brutal UI Components */
.brutal-card {
  @apply border-2 border-black bg-white dark:bg-brutal-panel dark:border-brutal-border;
}

.brutal-card-header {
  @apply border-b-2 border-black px-4 py-2 font-bold text-lg font-mono dark:border-brutal-border dark:text-brutal-text/70;
}

.brutal-grid {
  background-image: linear-gradient(to right, #333333 1px, transparent 1px),
                    linear-gradient(to bottom, #333333 1px, transparent 1px);
  background-size: 20px 20px;
  background-position: 0 0;
}

/* Status indicators */
.status-dot {
  @apply inline-block h-2 w-2 rounded-full mr-2;
}

.status-dot.connected {
  @apply bg-brutal-success;
}

.status-dot.disconnected {
  @apply bg-brutal-error;
}

@layer base {
  * {
    @apply border-[hsl(var(--border))];
    box-sizing: border-box;
  }
  
  html, body {
    @apply font-mono;
    font-feature-settings: "ss01", "ss02", "cv01", "cv02", "cv03";
  }
  
  body {
    @apply bg-[hsl(var(--background))] text-[hsl(var(--foreground))];
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ClerkProvider } from "@clerk/nextjs";
import { Providers } from "./providers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Crypto Bot Dashboard",
  description: "Dashboard for cryptocurrency trading bot",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <Providers>
            {children}
          </Providers>
        </body>
      </html>
    </ClerkProvider>
  );
}
</file>

<file path="src/app/page.tsx">
import { redirect } from 'next/navigation';

export default function Home() {
  // Just redirect to the sign-in page, Clerk middleware will handle the authentication check
  redirect('/sign-in');
}
</file>

<file path="src/app/providers.tsx">
'use client';

import { useState } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { Toaster } from 'sonner';

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        refetchOnWindowFocus: false,
        retry: 1,
        staleTime: 5 * 60 * 1000, // 5 minutes
      },
    },
  }));

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <Toaster position="top-right" />
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
</file>

<file path="src/components/charts/__tests__/BacktestingVisualizations.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { BacktestChart, EquityPoint, DrawdownPoint } from '../BacktestChart';
import { PerformanceMetrics } from '../PerformanceMetrics';
import { MonthlyReturnsChart, MonthlyReturn } from '../MonthlyReturnsChart';
import { TradeDistributionChart } from '../TradeDistributionChart';
import { MonteCarloChart } from '../MonteCarloChart';

describe('Backtesting Visualization Components', () => {
  // Test data
  const equityCurve: EquityPoint[] = [
    { timestamp: '2023-01-01T00:00:00.000Z', equity: 10000 },
    { timestamp: '2023-01-02T00:00:00.000Z', equity: 10100 },
    { timestamp: '2023-01-03T00:00:00.000Z', equity: 10050 },
    { timestamp: '2023-01-04T00:00:00.000Z', equity: 10200 },
    { timestamp: '2023-01-05T00:00:00.000Z', equity: 10300 }
  ];

  const drawdownCurve: DrawdownPoint[] = [
    { timestamp: '2023-01-01T00:00:00.000Z', drawdown: 0 },
    { timestamp: '2023-01-02T00:00:00.000Z', drawdown: 0 },
    { timestamp: '2023-01-03T00:00:00.000Z', drawdown: 50 },
    { timestamp: '2023-01-04T00:00:00.000Z', drawdown: 0 },
    { timestamp: '2023-01-05T00:00:00.000Z', drawdown: 0 }
  ];

  const performanceMetrics = {
    totalReturn: 3.0,
    annualizedReturn: 36.5,
    sharpeRatio: 1.42,
    sortinoRatio: 1.65,
    maxDrawdownPercent: 0.5,
    winRate: 62.1,
    profitFactor: 1.87,
    totalTrades: 124,
    winningTrades: 77,
    losingTrades: 47,
    averageProfitTrade: 112.45,
    averageLossTrade: -78.32,
    calmarRatio: 3.2,
    omegaRatio: 1.95,
    informationRatio: 1.1
  };

  const monthlyReturns: MonthlyReturn[] = [
    { month: '2023-01', return: 5.2 },
    { month: '2023-02', return: -2.1 },
    { month: '2023-03', return: 3.8 },
    { month: '2023-04', return: 1.5 },
    { month: '2023-05', return: -1.2 },
    { month: '2023-06', return: 4.3 }
  ];

  const monteCarloSimulations: number[][] = Array(10).fill(0).map(() => {
    const simulation = [10000];
    let equity = 10000;
    for (let i = 0; i < 5; i++) {
      equity = equity * (1 + (Math.random() * 0.05 - 0.02));
      simulation.push(equity);
    }
    return simulation;
  });

  test('BacktestChart renders correctly', () => {
    render(
      <BacktestChart 
        equityCurve={equityCurve} 
        drawdownCurve={drawdownCurve} 
        initialCapital={10000}
        title="Test Backtest Chart"
      />
    );
    
    expect(screen.getByText('Test Backtest Chart')).toBeInTheDocument();
    expect(screen.getByText('Initial Capital')).toBeInTheDocument();
    expect(screen.getByText('Final Capital')).toBeInTheDocument();
    expect(screen.getByText('Total Return')).toBeInTheDocument();
    expect(screen.getByText('Equity Curve')).toBeInTheDocument();
    expect(screen.getByText('Drawdown Chart')).toBeInTheDocument();
  });

  test('PerformanceMetrics renders correctly', () => {
    render(<PerformanceMetrics metrics={performanceMetrics} />);
    
    expect(screen.getByText('Performance Metrics')).toBeInTheDocument();
    expect(screen.getByText('Return Metrics')).toBeInTheDocument();
    expect(screen.getByText('Risk Metrics')).toBeInTheDocument();
    expect(screen.getByText('Trade Metrics')).toBeInTheDocument();
    expect(screen.getByText('Advanced Metrics')).toBeInTheDocument();
    expect(screen.getByText('Trade Statistics')).toBeInTheDocument();
    
    // Check specific metrics
    expect(screen.getByText('Total Return:')).toBeInTheDocument();
    expect(screen.getByText('3.00%')).toBeInTheDocument();
    expect(screen.getByText('Sharpe Ratio:')).toBeInTheDocument();
    expect(screen.getByText('1.42')).toBeInTheDocument();
  });

  test('MonthlyReturnsChart renders correctly', () => {
    render(<MonthlyReturnsChart monthlyReturns={monthlyReturns} />);
    
    expect(screen.getByText('Monthly Returns')).toBeInTheDocument();
    expect(screen.getByText('Positive Months')).toBeInTheDocument();
    expect(screen.getByText('Best Month')).toBeInTheDocument();
    expect(screen.getByText('Average Return')).toBeInTheDocument();
    
    // Check specific values
    expect(screen.getByText('4 (66.7%)')).toBeInTheDocument();
    expect(screen.getByText('5.20%')).toBeInTheDocument();
  });

  test('TradeDistributionChart renders correctly', () => {
    render(
      <TradeDistributionChart 
        winningTrades={77}
        losingTrades={47}
        averageProfitTrade={112.45}
        averageLossTrade={-78.32}
      />
    );
    
    expect(screen.getByText('Trade Distribution')).toBeInTheDocument();
    expect(screen.getByText('Total Trades')).toBeInTheDocument();
    expect(screen.getByText('Win Rate')).toBeInTheDocument();
    expect(screen.getByText('Profit/Loss Ratio')).toBeInTheDocument();
    expect(screen.getByText('Trade Outcome Distribution')).toBeInTheDocument();
    expect(screen.getByText('Average Trade P&L')).toBeInTheDocument();
    
    // Check specific values
    expect(screen.getByText('124')).toBeInTheDocument();
    expect(screen.getByText('62.10%')).toBeInTheDocument();
  });

  test('MonteCarloChart renders correctly', () => {
    render(
      <MonteCarloChart 
        simulations={monteCarloSimulations}
        initialCapital={10000}
      />
    );
    
    expect(screen.getByText('Monte Carlo Simulation')).toBeInTheDocument();
    expect(screen.getByText('Median Final Capital')).toBeInTheDocument();
    expect(screen.getByText('5th Percentile')).toBeInTheDocument();
    expect(screen.getByText('95th Percentile')).toBeInTheDocument();
  });
});
</file>

<file path="src/components/charts/BacktestChart.tsx">
import React from 'react';
import { 
  AreaChart, 
  Area, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  ComposedChart,
  Line,
  Bar
} from 'recharts';

export interface EquityPoint {
  timestamp: string;
  equity: number;
}

export interface DrawdownPoint {
  timestamp: string;
  drawdown: number;
}

export interface BacktestChartProps {
  equityCurve: EquityPoint[];
  drawdownCurve: DrawdownPoint[];
  title?: string;
  initialCapital: number;
}

const formatDate = (timestamp: string) => {
  const date = new Date(timestamp);
  return date.toLocaleDateString();
};

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

const formatPercent = (value: number) => {
  return `${value.toFixed(2)}%`;
};

export const BacktestChart: React.FC<BacktestChartProps> = ({ 
  equityCurve, 
  drawdownCurve, 
  title = 'Backtest Results',
  initialCapital
}) => {
  // Combine equity and drawdown data for the chart
  const chartData = equityCurve.map((point, index) => {
    const drawdown = drawdownCurve[index]?.drawdown || 0;
    return {
      timestamp: point.timestamp,
      equity: point.equity,
      drawdown: drawdown,
      drawdownPercent: (drawdown / point.equity) * 100,
    };
  });

  // Calculate performance metrics
  const finalEquity = chartData.length > 0 ? chartData[chartData.length - 1].equity : initialCapital;
  const totalReturn = ((finalEquity - initialCapital) / initialCapital) * 100;
  const maxDrawdown = Math.max(...chartData.map(point => point.drawdownPercent));

  return (
    <div className="backtest-chart border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-2">{title}</h3>
      
      <div className="grid grid-cols-3 gap-4 mb-4">
        <div>
          <div className="text-sm font-mono">Initial Capital</div>
          <div className="text-lg font-bold">{formatCurrency(initialCapital)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">Final Capital</div>
          <div className="text-lg font-bold">{formatCurrency(finalEquity)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">Total Return</div>
          <div className={`text-lg font-bold ${totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {formatPercent(totalReturn)}
          </div>
        </div>
      </div>
      
      <div className="mb-6">
        <h4 className="text-md font-mono font-bold mb-2">Equity Curve</h4>
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="timestamp" 
              tickFormatter={formatDate}
              tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            />
            <YAxis 
              tickFormatter={(value) => formatCurrency(value)}
              tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            />
            <Tooltip 
              formatter={(value: number) => formatCurrency(value)}
              labelFormatter={formatDate}
              contentStyle={{ 
                fontFamily: 'JetBrains Mono, monospace', 
                borderRadius: 0, 
                border: '2px solid black' 
              }}
            />
            <Legend />
            <Area 
              type="monotone" 
              dataKey="equity" 
              name="Equity" 
              stroke="#000000" 
              fill="#3a86ff" 
              fillOpacity={0.3}
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>
      
      <div>
        <h4 className="text-md font-mono font-bold mb-2">Drawdown Chart</h4>
        <div className="text-sm font-mono mb-2">Max Drawdown: {formatPercent(maxDrawdown)}</div>
        <ResponsiveContainer width="100%" height={200}>
          <AreaChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="timestamp" 
              tickFormatter={formatDate}
              tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            />
            <YAxis 
              tickFormatter={(value) => formatPercent(value)}
              tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            />
            <Tooltip 
              formatter={(value: number) => formatPercent(value)}
              labelFormatter={formatDate}
              contentStyle={{ 
                fontFamily: 'JetBrains Mono, monospace', 
                borderRadius: 0, 
                border: '2px solid black' 
              }}
            />
            <Area 
              type="monotone" 
              dataKey="drawdownPercent" 
              name="Drawdown %" 
              stroke="#ff0000" 
              fill="#ff0000" 
              fillOpacity={0.3}
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};
</file>

<file path="src/components/charts/CryptoChart.tsx">
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export interface ChartIndicator {
  name: string;
  key: string;
  color: string;
  dashed?: boolean;
}

export interface ChartPoint {
  time: string;
  price: number;
  [key: string]: any;
}

export interface ChartData {
  title: string;
  symbol: string;
  timeframe: string;
  points: ChartPoint[];
  indicators?: ChartIndicator[];
}

interface CryptoChartProps {
  data: ChartData;
}

function CryptoChart({ data }: CryptoChartProps) {
  return (
    <div className="crypto-chart border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-2">{data.title}</h3>
      <div className="text-sm font-mono mb-4">
        <span className="mr-4">{data.symbol}</span>
        <span>{data.timeframe}</span>
      </div>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={data.points}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="time" />
          <YAxis />
          <Tooltip contentStyle={{ fontFamily: 'JetBrains Mono, monospace', borderRadius: 0, border: '2px solid black' }} />
          <Legend wrapperStyle={{ fontFamily: 'JetBrains Mono, monospace' }} />
          <Line 
            type="monotone" 
            dataKey="price" 
            stroke="#000000" 
            strokeWidth={2}
            activeDot={{ r: 8 }} 
            dot={{ strokeWidth: 2 }}
          />
          {data.indicators && data.indicators.map((indicator) => (
            <Line 
              key={indicator.name} 
              type="monotone" 
              dataKey={indicator.key} 
              stroke={indicator.color} 
              strokeWidth={2}
              strokeDasharray={indicator.dashed ? "5 5" : "0"} 
              dot={false}
            />
          ))}
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

export { CryptoChart };
</file>

<file path="src/components/charts/MonteCarloChart.tsx">
import React from 'react';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  ReferenceLine
} from 'recharts';

export interface MonteCarloChartProps {
  simulations: number[][];
  initialCapital: number;
  title?: string;
}

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

const formatPercent = (value: number) => {
  return `${value.toFixed(2)}%`;
};

export const MonteCarloChart: React.FC<MonteCarloChartProps> = ({ 
  simulations, 
  initialCapital,
  title = 'Monte Carlo Simulation'
}) => {
  // Transform simulations data for chart
  const chartData = [];
  const numDays = simulations[0]?.length || 0;
  
  for (let day = 0; day < numDays; day++) {
    const dataPoint: any = { day };
    
    // Add each simulation as a separate line
    simulations.forEach((sim, index) => {
      dataPoint[`sim${index}`] = sim[day];
    });
    
    chartData.push(dataPoint);
  }
  
  // Calculate statistics
  const finalValues = simulations.map(sim => sim[sim.length - 1]);
  const medianFinal = [...finalValues].sort((a, b) => a - b)[Math.floor(finalValues.length / 2)];
  const percentile5 = [...finalValues].sort((a, b) => a - b)[Math.floor(finalValues.length * 0.05)];
  const percentile95 = [...finalValues].sort((a, b) => a - b)[Math.floor(finalValues.length * 0.95)];
  
  const medianReturn = ((medianFinal - initialCapital) / initialCapital) * 100;
  const worstReturn = ((percentile5 - initialCapital) / initialCapital) * 100;
  const bestReturn = ((percentile95 - initialCapital) / initialCapital) * 100;

  return (
    <div className="monte-carlo-chart border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-2">{title}</h3>
      
      <div className="grid grid-cols-3 gap-4 mb-4">
        <div>
          <div className="text-sm font-mono">Median Final Capital</div>
          <div className="text-lg font-bold">{formatCurrency(medianFinal)}</div>
          <div className="text-sm font-mono">{formatPercent(medianReturn)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">5th Percentile</div>
          <div className="text-lg font-bold text-red-600">{formatCurrency(percentile5)}</div>
          <div className="text-sm font-mono text-red-600">{formatPercent(worstReturn)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">95th Percentile</div>
          <div className="text-lg font-bold text-green-600">{formatCurrency(percentile95)}</div>
          <div className="text-sm font-mono text-green-600">{formatPercent(bestReturn)}</div>
        </div>
      </div>
      
      <ResponsiveContainer width="100%" height={400}>
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis 
            dataKey="day" 
            tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            label={{ value: 'Trading Days', position: 'insideBottom', offset: -5 }}
          />
          <YAxis 
            tickFormatter={(value) => formatCurrency(value)}
            tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
            domain={['dataMin', 'dataMax']}
          />
          <Tooltip 
            formatter={(value: number) => formatCurrency(value)}
            contentStyle={{ 
              fontFamily: 'JetBrains Mono, monospace', 
              borderRadius: 0, 
              border: '2px solid black' 
            }}
          />
          <ReferenceLine y={initialCapital} stroke="#000" strokeDasharray="3 3" />
          
          {/* Render each simulation as a separate line */}
          {simulations.map((_, index) => (
            <Line 
              key={`sim-${index}`}
              type="monotone" 
              dataKey={`sim${index}`} 
              stroke="#3b82f6" 
              dot={false}
              strokeWidth={0.5}
              strokeOpacity={0.3}
            />
          ))}
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};
</file>

<file path="src/components/charts/MonthlyReturnsChart.tsx">
import React from 'react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  ReferenceLine
} from 'recharts';

export interface MonthlyReturn {
  month: string;
  return: number;
}

export interface MonthlyReturnsChartProps {
  monthlyReturns: MonthlyReturn[];
  title?: string;
}

const formatPercent = (value: number) => {
  return `${value.toFixed(2)}%`;
};

export const MonthlyReturnsChart: React.FC<MonthlyReturnsChartProps> = ({ 
  monthlyReturns, 
  title = 'Monthly Returns'
}) => {
  // Calculate statistics
  const totalMonths = monthlyReturns.length;
  const positiveMonths = monthlyReturns.filter(m => m.return > 0).length;
  const negativeMonths = monthlyReturns.filter(m => m.return < 0).length;
  const bestMonth = Math.max(...monthlyReturns.map(m => m.return));
  const worstMonth = Math.min(...monthlyReturns.map(m => m.return));
  const averageReturn = monthlyReturns.reduce((sum, m) => sum + m.return, 0) / totalMonths;

  return (
    <div className="monthly-returns-chart border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-2">{title}</h3>
      
      <div className="grid grid-cols-3 gap-4 mb-4">
        <div>
          <div className="text-sm font-mono">Positive Months</div>
          <div className="text-lg font-bold text-green-600">{positiveMonths} ({(positiveMonths/totalMonths*100).toFixed(1)}%)</div>
        </div>
        <div>
          <div className="text-sm font-mono">Best Month</div>
          <div className="text-lg font-bold text-green-600">{formatPercent(bestMonth)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">Average Return</div>
          <div className={`text-lg font-bold ${averageReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {formatPercent(averageReturn)}
          </div>
        </div>
      </div>
      
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={monthlyReturns}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis 
            dataKey="month" 
            tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
          />
          <YAxis 
            tickFormatter={(value) => formatPercent(value)}
            tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
          />
          <Tooltip 
            formatter={(value: number) => formatPercent(value)}
            contentStyle={{ 
              fontFamily: 'JetBrains Mono, monospace', 
              borderRadius: 0, 
              border: '2px solid black' 
            }}
          />
          <Legend />
          <ReferenceLine y={0} stroke="#000" />
          <Bar 
            dataKey="return" 
            name="Monthly Return" 
            fill={(data) => (data.return >= 0 ? '#22c55e' : '#ef4444')}
          />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};
</file>

<file path="src/components/charts/PerformanceMetrics.tsx">
import React from 'react';

export interface PerformanceMetricsProps {
  metrics: {
    totalReturn: number;
    annualizedReturn: number;
    sharpeRatio: number;
    sortinoRatio: number;
    maxDrawdownPercent: number;
    winRate: number;
    profitFactor: number;
    totalTrades: number;
    winningTrades: number;
    losingTrades: number;
    averageProfitTrade: number;
    averageLossTrade: number;
    calmarRatio?: number;
    omegaRatio?: number;
    informationRatio?: number;
  };
}

const formatPercent = (value: number) => {
  return `${value.toFixed(2)}%`;
};

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

const formatRatio = (value: number) => {
  return value.toFixed(2);
};

export const PerformanceMetrics: React.FC<PerformanceMetricsProps> = ({ metrics }) => {
  return (
    <div className="performance-metrics border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-4">Performance Metrics</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* Return Metrics */}
        <div className="border-2 border-black p-3">
          <h4 className="text-md font-mono font-bold mb-2">Return Metrics</h4>
          <div className="grid grid-cols-2 gap-2">
            <div className="text-sm font-mono">Total Return:</div>
            <div className={`text-sm font-mono font-bold ${metrics.totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {formatPercent(metrics.totalReturn)}
            </div>
            
            <div className="text-sm font-mono">Annualized Return:</div>
            <div className={`text-sm font-mono font-bold ${metrics.annualizedReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {formatPercent(metrics.annualizedReturn)}
            </div>
          </div>
        </div>
        
        {/* Risk Metrics */}
        <div className="border-2 border-black p-3">
          <h4 className="text-md font-mono font-bold mb-2">Risk Metrics</h4>
          <div className="grid grid-cols-2 gap-2">
            <div className="text-sm font-mono">Sharpe Ratio:</div>
            <div className="text-sm font-mono font-bold">
              {formatRatio(metrics.sharpeRatio)}
            </div>
            
            <div className="text-sm font-mono">Sortino Ratio:</div>
            <div className="text-sm font-mono font-bold">
              {formatRatio(metrics.sortinoRatio)}
            </div>
            
            <div className="text-sm font-mono">Max Drawdown:</div>
            <div className="text-sm font-mono font-bold text-red-600">
              {formatPercent(metrics.maxDrawdownPercent)}
            </div>
          </div>
        </div>
        
        {/* Trade Metrics */}
        <div className="border-2 border-black p-3">
          <h4 className="text-md font-mono font-bold mb-2">Trade Metrics</h4>
          <div className="grid grid-cols-2 gap-2">
            <div className="text-sm font-mono">Win Rate:</div>
            <div className="text-sm font-mono font-bold">
              {formatPercent(metrics.winRate)}
            </div>
            
            <div className="text-sm font-mono">Profit Factor:</div>
            <div className="text-sm font-mono font-bold">
              {formatRatio(metrics.profitFactor)}
            </div>
            
            <div className="text-sm font-mono">Total Trades:</div>
            <div className="text-sm font-mono font-bold">
              {metrics.totalTrades}
            </div>
          </div>
        </div>
        
        {/* Advanced Metrics */}
        <div className="border-2 border-black p-3">
          <h4 className="text-md font-mono font-bold mb-2">Advanced Metrics</h4>
          <div className="grid grid-cols-2 gap-2">
            {metrics.calmarRatio !== undefined && (
              <>
                <div className="text-sm font-mono">Calmar Ratio:</div>
                <div className="text-sm font-mono font-bold">
                  {formatRatio(metrics.calmarRatio)}
                </div>
              </>
            )}
            
            {metrics.omegaRatio !== undefined && (
              <>
                <div className="text-sm font-mono">Omega Ratio:</div>
                <div className="text-sm font-mono font-bold">
                  {formatRatio(metrics.omegaRatio)}
                </div>
              </>
            )}
            
            {metrics.informationRatio !== undefined && (
              <>
                <div className="text-sm font-mono">Information Ratio:</div>
                <div className="text-sm font-mono font-bold">
                  {formatRatio(metrics.informationRatio)}
                </div>
              </>
            )}
          </div>
        </div>
        
        {/* Trade Statistics */}
        <div className="border-2 border-black p-3">
          <h4 className="text-md font-mono font-bold mb-2">Trade Statistics</h4>
          <div className="grid grid-cols-2 gap-2">
            <div className="text-sm font-mono">Winning Trades:</div>
            <div className="text-sm font-mono font-bold text-green-600">
              {metrics.winningTrades}
            </div>
            
            <div className="text-sm font-mono">Losing Trades:</div>
            <div className="text-sm font-mono font-bold text-red-600">
              {metrics.losingTrades}
            </div>
            
            <div className="text-sm font-mono">Avg. Profit Trade:</div>
            <div className="text-sm font-mono font-bold text-green-600">
              {formatCurrency(metrics.averageProfitTrade)}
            </div>
            
            <div className="text-sm font-mono">Avg. Loss Trade:</div>
            <div className="text-sm font-mono font-bold text-red-600">
              {formatCurrency(metrics.averageLossTrade)}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/charts/TradeDistributionChart.tsx">
import React from 'react';
import { 
  PieChart, 
  Pie, 
  Cell, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid
} from 'recharts';

export interface TradeDistributionProps {
  winningTrades: number;
  losingTrades: number;
  breakEvenTrades?: number;
  averageProfitTrade: number;
  averageLossTrade: number;
  title?: string;
}

const COLORS = ['#22c55e', '#ef4444', '#3b82f6'];

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

const formatPercent = (value: number) => {
  return `${value.toFixed(2)}%`;
};

export const TradeDistributionChart: React.FC<TradeDistributionProps> = ({ 
  winningTrades, 
  losingTrades, 
  breakEvenTrades = 0, 
  averageProfitTrade,
  averageLossTrade,
  title = 'Trade Distribution'
}) => {
  const totalTrades = winningTrades + losingTrades + breakEvenTrades;
  const winRate = (winningTrades / totalTrades) * 100;
  
  const pieData = [
    { name: 'Winning Trades', value: winningTrades },
    { name: 'Losing Trades', value: losingTrades },
  ];
  
  if (breakEvenTrades > 0) {
    pieData.push({ name: 'Break-Even Trades', value: breakEvenTrades });
  }
  
  const barData = [
    { name: 'Winning Trades', value: averageProfitTrade },
    { name: 'Losing Trades', value: Math.abs(averageLossTrade) },
  ];

  return (
    <div className="trade-distribution-chart border-2 border-black p-4 bg-white">
      <h3 className="text-xl font-mono font-bold mb-2">{title}</h3>
      
      <div className="grid grid-cols-3 gap-4 mb-4">
        <div>
          <div className="text-sm font-mono">Total Trades</div>
          <div className="text-lg font-bold">{totalTrades}</div>
        </div>
        <div>
          <div className="text-sm font-mono">Win Rate</div>
          <div className="text-lg font-bold text-green-600">{formatPercent(winRate)}</div>
        </div>
        <div>
          <div className="text-sm font-mono">Profit/Loss Ratio</div>
          <div className="text-lg font-bold">
            {(averageProfitTrade / Math.abs(averageLossTrade)).toFixed(2)}
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <h4 className="text-md font-mono font-bold mb-2">Trade Outcome Distribution</h4>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={pieData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {pieData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value: number) => value}
                contentStyle={{ 
                  fontFamily: 'JetBrains Mono, monospace', 
                  borderRadius: 0, 
                  border: '2px solid black' 
                }}
              />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
        
        <div>
          <h4 className="text-md font-mono font-bold mb-2">Average Trade P&L</h4>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={barData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="name" 
                tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
              />
              <YAxis 
                tickFormatter={(value) => formatCurrency(value)}
                tick={{ fontFamily: 'JetBrains Mono, monospace', fontSize: 10 }}
              />
              <Tooltip 
                formatter={(value: number) => formatCurrency(value)}
                contentStyle={{ 
                  fontFamily: 'JetBrains Mono, monospace', 
                  borderRadius: 0, 
                  border: '2px solid black' 
                }}
              />
              <Bar 
                dataKey="value" 
                fill="#22c55e"
                name="P&L"
              >
                {barData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.name === 'Winning Trades' ? '#22c55e' : '#ef4444'} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/dashboard/__tests__/SimpleAccountBalance.test.tsx">
import { vi, describe, it, expect } from 'vitest';
import { render, screen, waitFor } from '@testing-library/react';
import { SimpleAccountBalance } from '../SimpleAccountBalance';
import { ToastProvider } from '@/components/ui/toast';

// Mock the toast hook using vi.mock instead of jest.mock
vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({
    toast: vi.fn(),
    success: vi.fn(),
    error: vi.fn(),
  })
}));

// Mock the queries hook
vi.mock('@/hooks/queries', () => ({
  useWalletData: () => ({
    data: {
      balance: 1234.56,
      assets: [
        { symbol: 'BTC', amount: 0.5, valueUsd: 15000 },
        { symbol: 'ETH', amount: 10, valueUsd: 20000 }
      ]
    },
    isLoading: false,
    isError: false,
    error: null
  })
}));

describe('SimpleAccountBalance', () => {
  it('renders loading state initially', () => {
    render(
      <ToastProvider>
        <SimpleAccountBalance />
      </ToastProvider>
    );
    
    // Check for loading indicator
    expect(screen.getByRole('status')).toBeInTheDocument();
  });

  it('renders account balance data after loading', async () => {
    render(
      <ToastProvider>
        <SimpleAccountBalance />
      </ToastProvider>
    );
    
    // Wait for loading to complete
    await waitFor(() => {
      expect(screen.queryByRole('status')).not.toBeInTheDocument();
    });
    
    // Check for account balance heading
    expect(screen.getByText('ACCOUNT BALANCE')).toBeInTheDocument();
    
    // Check for some balance data
    expect(screen.getByText('BTC')).toBeInTheDocument();
    expect(screen.getByText('ETH')).toBeInTheDocument();
    expect(screen.getByText('USDT')).toBeInTheDocument();
    
    // Check for last updated text
    expect(screen.getByText(/Last updated:/)).toBeInTheDocument();
  });

  it('renders the account balance correctly', () => {
    render(<SimpleAccountBalance />);
    
    // We're mocking the data, so we can expect specific values
    expect(screen.getByText(/\$1,234.56/)).toBeInTheDocument();
  });
});
</file>

<file path="src/components/dashboard/AccountBalance.tsx">
import React, { useEffect } from 'react';
import { useWebSocket } from '@/hooks/use-websocket';
import { useWalletQuery } from '@/hooks/queries/useAccountQueries';
import { useToast } from '@/hooks/use-toast';
import { Loader2, RefreshCw } from 'lucide-react';
import { API_CONFIG } from '@/config';

export function AccountBalance() {
  const { toast } = useToast();
  const { isConnected, accountData } = useWebSocket();

  // Use the query hook to fetch wallet data with more frequent refetching
  const {
    data: walletData,
    isLoading,
    error,
    refetch,
    isFetching
  } = useWalletQuery({
    refetchInterval: 30000, // Refetch every 30 seconds
    staleTime: 10000, // Consider data stale after 10 seconds
  });

  // Show error toast if there was an error
  useEffect(() => {
    if (error) {
      console.error('Failed to fetch wallet data:', error);
      toast({
        title: 'Error',
        description: `Failed to fetch account balance data: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: 'destructive',
      });
    }
  }, [error, toast]);

  // Log the API configuration and wallet data for debugging
  useEffect(() => {
    console.log('API Configuration:', API_CONFIG.USE_LOCAL_API ? 'Local' : 'Remote');
    console.log('Wallet Data:', walletData);
  }, [walletData]);

  // Use WebSocket data if available, otherwise use query data
  const balances = accountData?.balances || walletData?.balances || {};

  // Get total balance
  const totalBalance = Object.values(balances).reduce((sum, balance: any) => {
    // Multiply the token amount by its price
    return sum + ((balance.total || 0) * (balance.price || 0));
  }, 0);

  if (isLoading) {
    return (
      <div className="bg-brutal-panel p-4 rounded-md border border-brutal-border h-full flex items-center justify-center">
        <Loader2 className="h-8 w-8 text-brutal-info animate-spin" />
      </div>
    );
  }

  return (
    <div className="bg-brutal-panel p-4 rounded-md border border-brutal-border h-full">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-brutal-text font-bold text-sm">ACCOUNT BALANCE</h3>
        <div className="flex items-center gap-2">
          <div className="text-xs text-brutal-info">
            {isConnected ? 'LIVE' : 'STATIC'}
          </div>
          <button
            onClick={() => refetch()}
            disabled={isFetching}
            className="text-brutal-info hover:text-brutal-info-hover transition-colors"
            title="Refresh balance data"
          >
            <RefreshCw size={14} className={isFetching ? 'animate-spin' : ''} />
          </button>
        </div>
      </div>

      <div className="text-2xl font-bold text-brutal-text mb-4">
        ${totalBalance.toFixed(2)}
      </div>

      <div className="space-y-3 max-h-[200px] overflow-y-auto">
        <div className="grid grid-cols-3 text-xs text-brutal-text/70 border-b border-brutal-border pb-1">
          <div>Asset</div>
          <div className="text-right">Amount</div>
          <div className="text-right">Value (USD)</div>
        </div>

        {Object.entries(balances).length > 0 ? (
          Object.entries(balances).map(([symbol, balance]: [string, any]) => (
            <div key={symbol} className="grid grid-cols-3 items-center text-xs">
              <div className="text-brutal-text font-medium">{symbol}</div>
              <div className="text-brutal-info text-right">{balance.total.toFixed(6)}</div>
              <div className="text-brutal-info text-right">
                ${(balance.total * (balance.price || 0)).toFixed(2)}
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-brutal-text/50 py-4">No assets found</div>
        )}
      </div>

      <div className="mt-4 flex justify-between items-center text-xs text-brutal-text/50">
        <div>
          API: {API_CONFIG.USE_LOCAL_API ? 'Local' : 'Remote'}
        </div>
        <div>
          Last updated: {accountData?.updatedAt
            ? new Date(accountData.updatedAt).toLocaleString()
            : walletData?.updatedAt
              ? new Date(walletData.updatedAt).toLocaleString()
              : 'Unknown'
          }
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/dashboard/AccountSummary.tsx">
'use client';

import React from 'react';
import { Cell, Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts';

// Sample data - replace with real data fetching
const data = [
  { name: 'BTC', value: 5231, color: '#F7931A' },
  { name: 'ETH', value: 2845, color: '#627EEA' },
  { name: 'SOL', value: 1205, color: '#00FFA3' },
  { name: 'USDT', value: 950, color: '#26A17B' },
  { name: 'Other', value: 320, color: '#7B8794' },
];

export function AccountSummary() {
  const total = data.reduce((sum, item) => sum + item.value, 0);
  
  return (
    <div className="flex flex-col md:flex-row gap-8 items-center justify-between">
      <div className="w-full max-w-[180px] h-[180px]">
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={80}
              paddingAngle={2}
              dataKey="value"
            >
              {data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <Tooltip
              formatter={(value: any) => [`$${value.toLocaleString()}`, 'Value']}
              contentStyle={{ 
                background: "hsl(var(--card))",
                border: "1px solid hsl(var(--border))",
                borderRadius: "6px", 
                fontSize: "12px" 
              }}
            />
          </PieChart>
        </ResponsiveContainer>
      </div>

      <div className="flex-1 w-full">
        <div className="grid grid-cols-2 gap-2">
          {data.map((item) => (
            <div key={item.name} className="flex justify-between items-center">
              <div className="flex items-center gap-2">
                <div 
                  className="h-3 w-3 rounded-full" 
                  style={{ backgroundColor: item.color }} 
                />
                <span className="text-sm font-medium">{item.name}</span>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium">${item.value.toLocaleString()}</div>
                <div className="text-xs text-muted-foreground">
                  {Math.round((item.value / total) * 100)}%
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/dashboard/AIInsights.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Loader2, AlertCircle, TrendingUp, TrendingDown, RefreshCw, ChevronDown, ChevronUp, Lightbulb, BarChart, LineChart, PieChart } from 'lucide-react';
import { cn } from '@/lib/utils';
import { usePortfolioQuery } from '@/hooks/queries/usePortfolioQueries';
import { useTradeHistoryQuery } from '@/hooks/queries/useTradeQueries';

interface AIInsightsProps {
  className?: string;
}

// Insight data structure
interface Insight {
  id: string;
  title: string;
  description: string;
  type: 'portfolio' | 'market' | 'opportunity';
  importance: 'high' | 'medium' | 'low';
  timestamp: string;
  metrics?: {
    name: string;
    value: string;
    change?: number;
  }[];
  recommendation?: string;
}

// Utility function for AI insights API call
async function fetchAIInsights(portfolioData: any, tradeHistory: any): Promise<Insight[]> {
  const response = await fetch('http://localhost:8080/api/ai/insights', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    },
    body: JSON.stringify({
      portfolio: portfolioData,
      trade_history: tradeHistory,
      insight_types: ['portfolio', 'market', 'opportunity']
    })
  });
  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }
  const data = await response.json();
  return data.insights;
}

// Mutation function for generating AI insights
const generateAIInsightsFn = async ({ portfolio, tradeHistory }: { portfolio: any; tradeHistory: any }): Promise<Insight[]> => {
  try {
    return await fetchAIInsights(portfolio, tradeHistory);
  } catch (error) {
    // Fallback to mock insights if the API call fails
    return [
      {
        id: '1',
        title: 'Portfolio Diversification Alert',
        description: 'Your portfolio is heavily concentrated in BTC (65%). Consider diversifying to reduce risk.',
        type: 'portfolio',
        importance: 'high',
        timestamp: new Date().toISOString(),
        metrics: [
          { name: 'Concentration Risk', value: 'High', change: 15 },
          { name: 'Volatility', value: '32%', change: 5 }
        ],
        recommendation: 'Reduce BTC allocation to 40% and distribute to ETH, SOL, and AVAX.'
      },
      {
        id: '2',
        title: 'Market Trend Analysis',
        description: 'The market is showing signs of recovery after recent correction. DeFi tokens are leading the recovery.',
        type: 'market',
        importance: 'medium',
        timestamp: new Date().toISOString(),
        metrics: [
          { name: 'Market Sentiment', value: 'Bullish', change: 10 },
          { name: 'DeFi Index', value: '+8.5%', change: 8.5 }
        ]
      },
      {
        id: '3',
        title: 'Trading Opportunity: SOL',
        description: 'SOL is showing strong technical signals with increasing volume and breaking resistance.',
        type: 'opportunity',
        importance: 'high',
        timestamp: new Date().toISOString(),
        metrics: [
          { name: 'Technical Score', value: '85/100', change: 12 },
          { name: 'Volume Change', value: '+45%', change: 45 }
        ],
        recommendation: 'Consider increasing SOL position by 2-3% of portfolio.'
      }
    ];
  }
};

export function AIInsights({ className }: AIInsightsProps) {
  const [activeTab, setActiveTab] = useState('all');
  const [expandedInsights, setExpandedInsights] = useState<string[]>([]);
  
  // Get portfolio and trade history data
  const { data: portfolioData } = usePortfolioQuery();
  const { data: tradeHistory } = useTradeHistoryQuery(50);
  
  // TanStack Query mutation for generating insights
  const {
    mutate: generateInsights,
    data: insights,
    isPending,
    error,
    reset,
  } = useMutation<Insight[], Error, { portfolio: any; tradeHistory: any }>(generateAIInsightsFn);

  // Trigger insights generation when portfolioData or tradeHistory changes
  React.useEffect(() => {
    if (portfolioData && tradeHistory) {
      generateInsights({ portfolio: portfolioData, tradeHistory });
    } else {
      reset();
    }
  }, [portfolioData, tradeHistory, generateInsights, reset]);
  
  // Toggle insight expansion
  const toggleInsight = (id: string) => {
    setExpandedInsights(prev => 
      prev.includes(id) 
        ? prev.filter(i => i !== id) 
        : [...prev, id]
    );
  };
  
  // Filter insights based on active tab
  const filteredInsights = insights?.filter(insight => {
    if (activeTab === 'all') return true;
    return insight.type === activeTab;
  });
  
  // Get importance color
  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  // Get type icon
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'portfolio':
        return <PieChart className="h-4 w-4" />;
      case 'market':
        return <BarChart className="h-4 w-4" />;
      case 'opportunity':
        return <LineChart className="h-4 w-4" />;
      default:
        return <Lightbulb className="h-4 w-4" />;
    }
  };

  if (isPending) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">AI Insights</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-[300px]">
          <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        </CardContent>
      </Card>
    );
  }

  if (error || !insights) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">AI Insights</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center h-[300px] text-center">
          <AlertCircle className="h-10 w-10 text-destructive mb-2" />
          <p className="text-sm text-muted-foreground">Failed to load AI insights</p>
          <Button onClick={() => generateInsights({ portfolio: portfolioData, tradeHistory })} variant="outline" size="sm" className="mt-4">
            <RefreshCw className="h-4 w-4 mr-2" /> Try again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg font-medium">AI Insights</CardTitle>
          <Button variant="outline" size="sm" onClick={() => generateInsights({ portfolio: portfolioData, tradeHistory })}>
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
            <TabsTrigger value="market">Market</TabsTrigger>
            <TabsTrigger value="opportunity">Opportunities</TabsTrigger>
          </TabsList>
          
          <TabsContent value={activeTab} className="pt-4">
            <div className="space-y-4">
              {filteredInsights?.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  No insights available
                </div>
              ) : (
                filteredInsights?.map((insight) => (
                  <Collapsible
                    key={insight.id}
                    open={expandedInsights.includes(insight.id)}
                    onOpenChange={() => toggleInsight(insight.id)}
                    className="border rounded-md"
                  >
                    <CollapsibleTrigger asChild>
                      <div className="flex justify-between items-center p-4 cursor-pointer hover:bg-muted/50">
                        <div className="flex items-center space-x-2">
                          <div className="flex-shrink-0">
                            {getTypeIcon(insight.type)}
                          </div>
                          <div>
                            <h3 className="font-medium">{insight.title}</h3>
                            <div className="flex items-center space-x-2 mt-1">
                              <Badge variant="outline" className={cn(getImportanceColor(insight.importance))}>
                                {insight.importance}
                              </Badge>
                              <span className="text-xs text-muted-foreground">
                                {new Date(insight.timestamp).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        </div>
                        <div>
                          {expandedInsights.includes(insight.id) ? (
                            <ChevronUp className="h-5 w-5 text-muted-foreground" />
                          ) : (
                            <ChevronDown className="h-5 w-5 text-muted-foreground" />
                          )}
                        </div>
                      </div>
                    </CollapsibleTrigger>
                    <CollapsibleContent className="p-4 pt-0 border-t">
                      <p className="text-sm mb-4">{insight.description}</p>
                      
                      {insight.metrics && (
                        <div className="grid grid-cols-2 gap-4 mb-4">
                          {insight.metrics.map((metric, index) => (
                            <div key={index} className="bg-muted/50 p-3 rounded-md">
                              <p className="text-xs text-muted-foreground">{metric.name}</p>
                              <div className="flex items-center mt-1">
                                <span className="text-lg font-medium">{metric.value}</span>
                                {metric.change !== undefined && (
                                  <span className={cn(
                                    "ml-2 text-xs flex items-center",
                                    metric.change >= 0 ? "text-green-600" : "text-red-600"
                                  )}>
                                    {metric.change >= 0 ? (
                                      <>
                                        <TrendingUp className="h-3 w-3 mr-1" />
                                        +{metric.change}%
                                      </>
                                    ) : (
                                      <>
                                        <TrendingDown className="h-3 w-3 mr-1" />
                                        {metric.change}%
                                      </>
                                    )}
                                  </span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {insight.recommendation && (
                        <div className="bg-blue-50 border-l-4 border-blue-500 p-3 rounded-md">
                          <p className="text-sm font-medium text-blue-800">Recommendation:</p>
                          <p className="text-sm text-blue-700">{insight.recommendation}</p>
                        </div>
                      )}
                    </CollapsibleContent>
                  </Collapsible>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}

export { AIInsights };
</file>

<file path="src/components/dashboard/MLInsights.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { useQuery } from '@tanstack/react-query';
import { api } from '@/lib/api';
import { Loader2, AlertCircle, TrendingUp, TrendingDown, RefreshCw, ChevronDown, ChevronUp, Lightbulb, BarChart, LineChart, PieChart } from 'lucide-react';
import { cn } from '@/lib/utils';

interface MLInsightsProps {
  className?: string;
}

// Mock insights data structure
interface Insight {
  id: string;
  title: string;
  description: string;
  type: 'portfolio' | 'market' | 'opportunity';
  importance: 'high' | 'medium' | 'low';
  timestamp: string;
  metrics?: {
    name: string;
    value: string;
    change?: number;
  }[];
  recommendation?: string;
}

// Mock function to get insights (replace with actual API call when available)
const getInsights = async (): Promise<Insight[]> => {
  // Simulate API call
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Return mock data
  return [
    {
      id: '1',
      title: 'Portfolio Diversification Alert',
      description: 'Your portfolio is heavily concentrated in BTC (65%). Consider diversifying to reduce risk.',
      type: 'portfolio',
      importance: 'high',
      timestamp: new Date().toISOString(),
      metrics: [
        { name: 'Concentration Risk', value: 'High', change: 15 },
        { name: 'Volatility', value: '32%', change: 5 }
      ],
      recommendation: 'Reduce BTC allocation to 40% and distribute to ETH, SOL, and AVAX.'
    },
    {
      id: '2',
      title: 'Market Trend Analysis',
      description: 'The market is showing signs of recovery after recent correction. DeFi tokens are leading the recovery.',
      type: 'market',
      importance: 'medium',
      timestamp: new Date().toISOString(),
      metrics: [
        { name: 'Market Sentiment', value: 'Bullish', change: 10 },
        { name: 'DeFi Index', value: '+8.5%', change: 8.5 }
      ]
    },
    {
      id: '3',
      title: 'Trading Opportunity: SOL',
      description: 'SOL is showing strong technical signals with increasing volume and breaking resistance.',
      type: 'opportunity',
      importance: 'high',
      timestamp: new Date().toISOString(),
      metrics: [
        { name: 'Technical Score', value: '85/100', change: 12 },
        { name: 'Volume Change', value: '+45%', change: 45 }
      ],
      recommendation: 'Consider increasing SOL position by 2-3% of portfolio.'
    },
    {
      id: '4',
      title: 'Risk Assessment Update',
      description: 'Market volatility has increased by 25% in the last week. Consider adjusting stop-loss levels.',
      type: 'market',
      importance: 'medium',
      timestamp: new Date().toISOString(),
      metrics: [
        { name: 'Volatility Index', value: '28', change: 25 },
        { name: 'Risk Score', value: '65/100', change: 15 }
      ],
      recommendation: 'Tighten stop-loss orders to 5-7% below current prices.'
    },
    {
      id: '5',
      title: 'Performance Analysis',
      description: 'Your trading strategy has outperformed the market by 3.2% this month. Most gains from altcoin positions.',
      type: 'portfolio',
      importance: 'low',
      timestamp: new Date().toISOString(),
      metrics: [
        { name: 'Alpha', value: '+3.2%', change: 3.2 },
        { name: 'Win Rate', value: '68%', change: 5 }
      ]
    }
  ];
};

export function MLInsights({ className }: MLInsightsProps) {
  const [activeTab, setActiveTab] = useState('all');
  const [expandedInsights, setExpandedInsights] = useState<string[]>([]);
  
  const { data: insights, isLoading, error, refetch } = useQuery({
    queryKey: ['ml-insights'],
    queryFn: getInsights,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
  
  // Toggle insight expansion
  const toggleInsight = (id: string) => {
    setExpandedInsights(prev => 
      prev.includes(id) 
        ? prev.filter(i => i !== id) 
        : [...prev, id]
    );
  };
  
  // Filter insights based on active tab
  const filteredInsights = insights?.filter(insight => {
    if (activeTab === 'all') return true;
    return insight.type === activeTab;
  });
  
  // Get importance color
  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  // Get type icon
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'portfolio':
        return <PieChart className="h-4 w-4" />;
      case 'market':
        return <BarChart className="h-4 w-4" />;
      case 'opportunity':
        return <LineChart className="h-4 w-4" />;
      default:
        return <Lightbulb className="h-4 w-4" />;
    }
  };

  if (isLoading) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">ML Insights</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-[300px]">
          <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        </CardContent>
      </Card>
    );
  }

  if (error || !insights) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">ML Insights</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center h-[300px] text-center">
          <AlertCircle className="h-10 w-10 text-destructive mb-2" />
          <p className="text-sm text-muted-foreground">Failed to load ML insights</p>
          <Button onClick={() => refetch()} variant="outline" size="sm" className="mt-4">
            <RefreshCw className="h-4 w-4 mr-2" /> Try again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg font-medium">ML Insights</CardTitle>
          <Button variant="outline" size="sm" onClick={() => refetch()}>
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
            <TabsTrigger value="market">Market</TabsTrigger>
            <TabsTrigger value="opportunity">Opportunities</TabsTrigger>
          </TabsList>
          
          <TabsContent value={activeTab} className="pt-4">
            <div className="space-y-4">
              {filteredInsights?.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  No insights available
                </div>
              ) : (
                filteredInsights?.map((insight) => (
                  <Collapsible
                    key={insight.id}
                    open={expandedInsights.includes(insight.id)}
                    onOpenChange={() => toggleInsight(insight.id)}
                    className="border rounded-md"
                  >
                    <CollapsibleTrigger asChild>
                      <div className="flex justify-between items-center p-4 cursor-pointer hover:bg-muted/50">
                        <div className="flex items-center space-x-2">
                          <div className="flex-shrink-0">
                            {getTypeIcon(insight.type)}
                          </div>
                          <div>
                            <h3 className="font-medium">{insight.title}</h3>
                            <div className="flex items-center space-x-2 mt-1">
                              <Badge variant="outline" className={cn(getImportanceColor(insight.importance))}>
                                {insight.importance}
                              </Badge>
                              <span className="text-xs text-muted-foreground">
                                {new Date(insight.timestamp).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        </div>
                        <div>
                          {expandedInsights.includes(insight.id) ? (
                            <ChevronUp className="h-5 w-5 text-muted-foreground" />
                          ) : (
                            <ChevronDown className="h-5 w-5 text-muted-foreground" />
                          )}
                        </div>
                      </div>
                    </CollapsibleTrigger>
                    <CollapsibleContent className="p-4 pt-0 border-t">
                      <p className="text-sm mb-4">{insight.description}</p>
                      
                      {insight.metrics && (
                        <div className="grid grid-cols-2 gap-4 mb-4">
                          {insight.metrics.map((metric, index) => (
                            <div key={index} className="bg-muted/50 p-3 rounded-md">
                              <p className="text-xs text-muted-foreground">{metric.name}</p>
                              <div className="flex items-center mt-1">
                                <span className="text-lg font-medium">{metric.value}</span>
                                {metric.change !== undefined && (
                                  <span className={cn(
                                    "ml-2 text-xs flex items-center",
                                    metric.change >= 0 ? "text-green-600" : "text-red-600"
                                  )}>
                                    {metric.change >= 0 ? (
                                      <>
                                        <TrendingUp className="h-3 w-3 mr-1" />
                                        +{metric.change}%
                                      </>
                                    ) : (
                                      <>
                                        <TrendingDown className="h-3 w-3 mr-1" />
                                        {metric.change}%
                                      </>
                                    )}
                                  </span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {insight.recommendation && (
                        <div className="bg-blue-50 border-l-4 border-blue-500 p-3 rounded-md">
                          <p className="text-sm font-medium text-blue-800">Recommendation:</p>
                          <p className="text-sm text-blue-700">{insight.recommendation}</p>
                        </div>
                      )}
                    </CollapsibleContent>
                  </Collapsible>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}

export { MLInsights };
</file>

<file path="src/components/dashboard/Overview.tsx">
'use client';

import React from 'react';
import { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';

// Sample data - replace with real data fetching
const data = [
  { date: 'Jan', value: 2000 },
  { date: 'Feb', value: 2400 },
  { date: 'Mar', value: 1800 },
  { date: 'Apr', value: 2800 },
  { date: 'May', value: 3000 },
  { date: 'Jun', value: 3200 },
  { date: 'Jul', value: 3500 },
  { date: 'Aug', value: 3700 },
  { date: 'Sep', value: 4000 },
  { date: 'Oct', value: 4200 },
  { date: 'Nov', value: 4500 },
  { date: 'Dec', value: 5000 },
];

export function Overview() {
  return (
    <ResponsiveContainer width="100%" height={300}>
      <LineChart data={data} margin={{ top: 5, right: 10, left: 0, bottom: 5 }}>
        <XAxis 
          dataKey="date" 
          stroke="#888888" 
          fontSize={12} 
          tickLine={false} 
          axisLine={false} 
        />
        <YAxis
          stroke="#888888"
          fontSize={12}
          tickLine={false}
          axisLine={false}
          tickFormatter={(value) => `$${value}`}
        />
        <Tooltip
          contentStyle={{ 
            background: "hsl(var(--card))",
            border: "1px solid hsl(var(--border))",
            borderRadius: "6px", 
            fontSize: "12px" 
          }}
          formatter={(value: any) => [`$${value}`, 'Portfolio Value']}
          labelFormatter={(label) => `${label}`}
        />
        <Line
          type="monotone"
          dataKey="value"
          stroke="hsl(var(--primary))"
          strokeWidth={2}
          dot={false}
          activeDot={{ r: 6, strokeWidth: 0 }}
        />
      </LineChart>
    </ResponsiveContainer>
  );
}
</file>

<file path="src/components/dashboard/PerformanceChart.tsx">
import React, { useState } from 'react';
import { useBalanceHistoryQuery } from '@/hooks/queries/useAnalyticsQueries';
import { useToast } from '@/hooks/use-toast';
import {
  Area,
  AreaChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis
} from 'recharts';

// Sample data for the chart
const data = {
  '1D': [
    { time: '00:00', value: 24600 },
    { time: '04:00', value: 25200 },
    { time: '08:00', value: 25400 },
    { time: '12:00', value: 25100 },
    { time: '16:00', value: 26300 },
    { time: '20:00', value: 27200 },
    { time: '24:00', value: 27432 },
  ],
  '1W': [
    { time: 'Mon', value: 24200 },
    { time: 'Tue', value: 24800 },
    { time: 'Wed', value: 25600 },
    { time: 'Thu', value: 26400 },
    { time: 'Fri', value: 25900 },
    { time: 'Sat', value: 26800 },
    { time: 'Sun', value: 27432 },
  ],
  '1M': [
    { time: 'Week 1', value: 22400 },
    { time: 'Week 2', value: 23500 },
    { time: 'Week 3', value: 25300 },
    { time: 'Week 4', value: 27432 },
  ],
  '3M': [
    { time: 'Jan', value: 20500 },
    { time: 'Feb', value: 24200 },
    { time: 'Mar', value: 27432 },
  ],
};

interface TimeframeButtonProps {
  active: boolean;
  onClick: () => void;
  children: React.ReactNode;
}

function TimeframeButton({ active, onClick, children }: TimeframeButtonProps) {
  return (
    <button
      className={`px-3 py-1 text-xs ${
        active
          ? 'bg-brutal-panel border border-brutal-border text-brutal-text'
          : 'text-brutal-text/60 hover:text-brutal-text'
      }`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}

export function PerformanceChart() {
  const { toast } = useToast();
  const [timeframe, setTimeframe] = useState<'1D' | '1W' | '1M' | '3M'>('1D');

  // Use the query hook to fetch balance history
  const { data: balanceHistoryData, isLoading, error } = useBalanceHistoryQuery();

  // Format the data based on the selected timeframe
  const formatChartData = () => {
    // If no data or error, use fallback data
    if (!balanceHistoryData || error || balanceHistoryData.length === 0) {
      return data[timeframe];
    }

    // Format data based on selected timeframe
    let formattedData;

    switch (timeframe) {
      case '1D':
        // Filter last 24 hours of data
        formattedData = balanceHistoryData
          .filter(item => {
            const date = new Date(item.timestamp);
            const now = new Date();
            return (now.getTime() - date.getTime()) <= 24 * 60 * 60 * 1000;
          })
          .map(item => ({
            time: new Date(item.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', hour12: false }),
            value: item.balance
          }));
        break;

      case '1W':
        // Filter last 7 days of data
        formattedData = balanceHistoryData
          .filter(item => {
            const date = new Date(item.timestamp);
            const now = new Date();
            return (now.getTime() - date.getTime()) <= 7 * 24 * 60 * 60 * 1000;
          })
          .map(item => ({
            time: new Date(item.timestamp).toLocaleDateString('en-US', { weekday: 'short' }),
            value: item.balance
          }));
        break;

      case '1M':
        // Filter last 30 days of data
        formattedData = balanceHistoryData
          .filter(item => {
            const date = new Date(item.timestamp);
            const now = new Date();
            return (now.getTime() - date.getTime()) <= 30 * 24 * 60 * 60 * 1000;
          })
          .map(item => ({
            time: new Date(item.timestamp).toLocaleDateString('en-US', { day: '2-digit', month: 'short' }),
            value: item.balance
          }));
        break;

      case '3M':
        // Filter last 90 days of data
        formattedData = balanceHistoryData
          .filter(item => {
            const date = new Date(item.timestamp);
            const now = new Date();
            return (now.getTime() - date.getTime()) <= 90 * 24 * 60 * 60 * 1000;
          })
          .map(item => ({
            time: new Date(item.timestamp).toLocaleDateString('en-US', { day: '2-digit', month: 'short' }),
            value: item.balance
          }));
        break;

      default:
        formattedData = [];
    }

    // If we have data, use it; otherwise fall back to mock data
    return formattedData.length > 0 ? formattedData : data[timeframe];
  };

  // Get the formatted chart data
  const chartData = formatChartData();

  // Show error toast if there was an error
  if (error) {
    console.error('Failed to fetch chart data:', error);
    toast({
      title: 'Error',
      description: 'Failed to fetch performance chart data',
      variant: 'destructive',
    });
  }

  return (
    <div className="brutal-card h-[380px]">
      <div className="flex justify-between items-center mb-4">
        <div className="brutal-card-header">Portfolio Performance</div>
        <div className="flex space-x-1 border border-brutal-border">
          <TimeframeButton
            active={timeframe === '1D'}
            onClick={() => setTimeframe('1D')}
          >
            1D
          </TimeframeButton>
          <TimeframeButton
            active={timeframe === '1W'}
            onClick={() => setTimeframe('1W')}
          >
            1W
          </TimeframeButton>
          <TimeframeButton
            active={timeframe === '1M'}
            onClick={() => setTimeframe('1M')}
          >
            1M
          </TimeframeButton>
          <TimeframeButton
            active={timeframe === '3M'}
            onClick={() => setTimeframe('3M')}
          >
            3M
          </TimeframeButton>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-[320px] w-full">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900"></div>
        </div>
      ) : (
        <div className="h-[320px] w-full">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart
            data={chartData}
            margin={{ top: 20, right: 10, left: 10, bottom: 0 }}
          >
            <defs>
              <linearGradient id="colorValue" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#3a86ff" stopOpacity={0.3} />
                <stop offset="95%" stopColor="#3a86ff" stopOpacity={0} />
              </linearGradient>
            </defs>
            <XAxis
              dataKey="time"
              axisLine={{ stroke: '#333333' }}
              tick={{ fill: '#f7f7f7', fontSize: 10 }}
              tickLine={{ stroke: '#333333' }}
            />
            <YAxis
              domain={['auto', 'auto']}
              axisLine={{ stroke: '#333333' }}
              tick={{ fill: '#f7f7f7', fontSize: 10 }}
              tickLine={{ stroke: '#333333' }}
              tickFormatter={(value) => `$${value.toLocaleString()}`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: '#1e1e1e',
                border: '1px solid #333333',
                borderRadius: 0,
                color: '#f7f7f7',
                fontSize: 12
              }}
              formatter={(value: number) => [`$${value.toLocaleString()}`, 'Value']}
            />
            <Area
              type="monotone"
              dataKey="value"
              stroke="#3a86ff"
              strokeWidth={2}
              fillOpacity={1}
              fill="url(#colorValue)"
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/dashboard/PortfolioOverview.tsx">
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useWebSocket } from '@/hooks/use-websocket';
import { usePortfolioQuery } from '@/hooks/queries/usePortfolioQueries';
import { Loader2, TrendingUp, TrendingDown, AlertCircle, RefreshCw } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';

interface PortfolioOverviewProps {
  className?: string;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82ca9d', '#ffc658', '#8dd1e1', '#a4de6c', '#d0ed57'];

export function PortfolioOverview({ className }: PortfolioOverviewProps) {
  const [activeTab, setActiveTab] = useState('allocation');
  const { isConnected, portfolioData } = useWebSocket();
  const { data, isLoading, error, refetch } = usePortfolioQuery();
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());

  // Use WebSocket data if available, otherwise use query data
  const portfolio = portfolioData || data;

  // Update last updated timestamp when data changes
  useEffect(() => {
    if (portfolio) {
      setLastUpdated(new Date());
    }
  }, [portfolio]);

  // Format currency value
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };

  // Format percentage value
  const formatPercentage = (value: number) => {
    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
  };

  // Prepare data for pie chart
  const getPieChartData = () => {
    if (!portfolio?.assets) return [];

    // Sort assets by value
    const sortedAssets = [...portfolio.assets].sort((a, b) => b.value_usd - a.value_usd);
    
    // Take top 5 assets and group the rest as "Others"
    const topAssets = sortedAssets.slice(0, 5);
    const otherAssets = sortedAssets.slice(5);
    
    const result = topAssets.map(asset => ({
      name: asset.symbol,
      value: asset.value_usd
    }));
    
    if (otherAssets.length > 0) {
      const otherValue = otherAssets.reduce((sum, asset) => sum + asset.value_usd, 0);
      result.push({
        name: 'Others',
        value: otherValue
      });
    }
    
    return result;
  };

  // Handle manual refresh
  const handleRefresh = () => {
    refetch();
    setLastUpdated(new Date());
  };

  if (isLoading) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">Portfolio Overview</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-[300px]">
          <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        </CardContent>
      </Card>
    );
  }

  if (error || !portfolio) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">Portfolio Overview</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center h-[300px] text-center">
          <AlertCircle className="h-10 w-10 text-destructive mb-2" />
          <p className="text-sm text-muted-foreground">Failed to load portfolio data</p>
          <button 
            onClick={handleRefresh}
            className="mt-4 flex items-center text-sm text-primary hover:underline"
          >
            <RefreshCw className="h-4 w-4 mr-1" /> Try again
          </button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg font-medium">Portfolio Overview</CardTitle>
          <div className="flex items-center">
            <span className={cn(
              "text-xs px-2 py-1 rounded-full mr-2",
              isConnected ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
            )}>
              {isConnected ? 'LIVE' : 'STATIC'}
            </span>
            <button 
              onClick={handleRefresh}
              className="p-1 rounded-full hover:bg-gray-100"
              title="Refresh data"
            >
              <RefreshCw className="h-4 w-4" />
            </button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div>
            <p className="text-sm text-muted-foreground">Total Value</p>
            <h3 className="text-2xl font-bold">{formatCurrency(portfolio.total_value)}</h3>
          </div>
          <div>
            <p className="text-sm text-muted-foreground">Performance (24h)</p>
            <div className="flex items-center">
              <h3 className={cn(
                "text-2xl font-bold",
                portfolio.performance?.daily >= 0 ? "text-green-600" : "text-red-600"
              )}>
                {formatPercentage(portfolio.performance?.daily || 0)}
              </h3>
              {portfolio.performance?.daily >= 0 ? (
                <TrendingUp className="ml-1 h-5 w-5 text-green-600" />
              ) : (
                <TrendingDown className="ml-1 h-5 w-5 text-red-600" />
              )}
            </div>
          </div>
        </div>

        <Tabs defaultValue="allocation" value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="allocation">Allocation</TabsTrigger>
            <TabsTrigger value="performance">Performance</TabsTrigger>
          </TabsList>
          
          <TabsContent value="allocation" className="pt-4">
            <div className="flex flex-col md:flex-row">
              <div className="w-full md:w-1/2 h-[200px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={getPieChartData()}
                      cx="50%"
                      cy="50%"
                      innerRadius={50}
                      outerRadius={80}
                      paddingAngle={2}
                      dataKey="value"
                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                      labelLine={false}
                    >
                      {getPieChartData().map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip 
                      formatter={(value: number) => formatCurrency(value)}
                      labelFormatter={(name) => `${name}`}
                    />
                  </PieChart>
                </ResponsiveContainer>
              </div>
              
              <div className="w-full md:w-1/2 space-y-2 mt-4 md:mt-0">
                {portfolio.assets?.slice(0, 5).map((asset, index) => (
                  <div key={asset.symbol} className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <span className="font-medium">{asset.symbol}</span>
                      <span>{formatCurrency(asset.value_usd)}</span>
                    </div>
                    <Progress value={asset.allocation_percentage} className="h-2" 
                      indicatorClassName={`bg-[${COLORS[index % COLORS.length]}]`}
                    />
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="performance" className="pt-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Daily</p>
                <p className={cn(
                  "text-lg font-medium",
                  portfolio.performance?.daily >= 0 ? "text-green-600" : "text-red-600"
                )}>
                  {formatPercentage(portfolio.performance?.daily || 0)}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Weekly</p>
                <p className={cn(
                  "text-lg font-medium",
                  portfolio.performance?.weekly >= 0 ? "text-green-600" : "text-red-600"
                )}>
                  {formatPercentage(portfolio.performance?.weekly || 0)}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Monthly</p>
                <p className={cn(
                  "text-lg font-medium",
                  portfolio.performance?.monthly >= 0 ? "text-green-600" : "text-red-600"
                )}>
                  {formatPercentage(portfolio.performance?.monthly || 0)}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Yearly</p>
                <p className={cn(
                  "text-lg font-medium",
                  portfolio.performance?.yearly >= 0 ? "text-green-600" : "text-red-600"
                )}>
                  {formatPercentage(portfolio.performance?.yearly || 0)}
                </p>
              </div>
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="mt-4 text-xs text-muted-foreground">
          Last updated: {lastUpdated.toLocaleString()}
        </div>
      </CardContent>
    </Card>
  );
}

export { PortfolioOverview };
</file>

<file path="src/components/dashboard/RecentActivity.tsx">
'use client';

import React from 'react';
import { ArrowDownIcon, ArrowUpIcon, DotIcon } from 'lucide-react';

// Sample data - replace with real data fetching
const activities = [
  {
    id: 1,
    type: 'buy',
    asset: 'BTC',
    amount: '0.058',
    value: '$1,532.25',
    time: '14:32',
  },
  {
    id: 2,
    type: 'sell',
    asset: 'ETH',
    amount: '1.25',
    value: '$2,145.90',
    time: '11:15',
  },
  {
    id: 3,
    type: 'bot',
    asset: 'BOT #3',
    amount: 'Started',
    value: 'SOL/USDT',
    time: '09:41',
  },
  {
    id: 4,
    type: 'buy',
    asset: 'SOL',
    amount: '12.5',
    value: '$562.75',
    time: 'Yesterday',
  },
  {
    id: 5,
    type: 'bot',
    asset: 'BOT #2',
    amount: 'Stopped',
    value: 'ETH/USDT',
    time: 'Yesterday',
  },
];

export function RecentActivity() {
  return (
    <div className="space-y-4">
      {activities.map((activity) => (
        <div key={activity.id} className="flex items-center gap-3 rounded-lg border p-3">
          <div className="flex h-9 w-9 items-center justify-center rounded-full bg-muted">
            {activity.type === 'buy' && (
              <ArrowDownIcon className="h-4 w-4 text-green-500" />
            )}
            {activity.type === 'sell' && (
              <ArrowUpIcon className="h-4 w-4 text-red-500" />
            )}
            {activity.type === 'bot' && (
              <DotIcon className="h-4 w-4 text-blue-500" />
            )}
          </div>
          <div className="flex flex-1 flex-col space-y-1">
            <div className="flex justify-between">
              <span className="text-sm font-medium">{activity.asset}</span>
              <span className="text-xs text-muted-foreground">{activity.time}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-xs text-muted-foreground">{activity.amount}</span>
              <span className="text-xs font-medium">{activity.value}</span>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/dashboard/SalesHistory.tsx">
import React, { useState } from 'react';
import { format } from 'date-fns';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { DateRangePicker } from '@/components/ui/date-range-picker';
import { useTradeHistoryQuery } from '@/hooks/queries/useTradeQueries';
import { Loader2, AlertCircle, ArrowUpDown, Download, Filter, RefreshCw } from 'lucide-react';
import { cn } from '@/lib/utils';
import { TradeResponse } from '@/lib/api';

interface SalesHistoryProps {
  className?: string;
}

type SortField = 'timestamp' | 'symbol' | 'side' | 'amount' | 'price' | 'value' | 'status';
type SortDirection = 'asc' | 'desc';

export function SalesHistory({ className }: SalesHistoryProps) {
  const [limit, setLimit] = useState(10);
  const [sortField, setSortField] = useState<SortField>('timestamp');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [filterSymbol, setFilterSymbol] = useState('');
  const [filterSide, setFilterSide] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  const [dateRange, setDateRange] = useState<{ from: Date | undefined; to: Date | undefined }>({
    from: undefined,
    to: undefined,
  });

  const { data: tradeHistory = [], isLoading, error, refetch } = useTradeHistoryQuery(100); // Get more trades for filtering

  // Apply filters and sorting
  const filteredTrades = tradeHistory.filter(trade => {
    // Apply symbol filter
    if (filterSymbol && !trade.symbol.toLowerCase().includes(filterSymbol.toLowerCase())) {
      return false;
    }
    
    // Apply side filter
    if (filterSide && trade.side !== filterSide) {
      return false;
    }
    
    // Apply status filter
    if (filterStatus && trade.status !== filterStatus) {
      return false;
    }
    
    // Apply date range filter
    if (dateRange.from && new Date(trade.timestamp) < dateRange.from) {
      return false;
    }
    
    if (dateRange.to) {
      const toDateEnd = new Date(dateRange.to);
      toDateEnd.setHours(23, 59, 59, 999);
      if (new Date(trade.timestamp) > toDateEnd) {
        return false;
      }
    }
    
    return true;
  });

  // Sort trades
  const sortedTrades = [...filteredTrades].sort((a, b) => {
    let comparison = 0;
    
    switch (sortField) {
      case 'timestamp':
        comparison = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
        break;
      case 'symbol':
        comparison = a.symbol.localeCompare(b.symbol);
        break;
      case 'side':
        comparison = a.side.localeCompare(b.side);
        break;
      case 'amount':
        comparison = a.amount - b.amount;
        break;
      case 'price':
        comparison = a.price - b.price;
        break;
      case 'value':
        comparison = a.value - b.value;
        break;
      case 'status':
        comparison = a.status.localeCompare(b.status);
        break;
      default:
        comparison = 0;
    }
    
    return sortDirection === 'asc' ? comparison : -comparison;
  });

  // Paginate trades
  const paginatedTrades = sortedTrades.slice(0, limit);

  // Handle sort
  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  // Reset filters
  const resetFilters = () => {
    setFilterSymbol('');
    setFilterSide('');
    setFilterStatus('');
    setDateRange({ from: undefined, to: undefined });
  };

  // Export to CSV
  const exportToCSV = () => {
    const headers = ['Date', 'Type', 'Symbol', 'Amount', 'Price', 'Total', 'Status'];
    const csvContent = [
      headers.join(','),
      ...filteredTrades.map(trade => [
        format(new Date(trade.timestamp), 'yyyy-MM-dd HH:mm:ss'),
        trade.side.toUpperCase(),
        trade.symbol,
        trade.amount,
        trade.price,
        trade.value,
        trade.status.toUpperCase()
      ].join(','))
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `trade_history_${format(new Date(), 'yyyy-MM-dd')}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (isLoading) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">Trade History</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-[400px]">
          <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={cn("h-full", className)}>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">Trade History</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center h-[400px] text-center">
          <AlertCircle className="h-10 w-10 text-destructive mb-2" />
          <p className="text-sm text-muted-foreground">Failed to load trade history</p>
          <Button onClick={() => refetch()} variant="outline" size="sm" className="mt-4">
            <RefreshCw className="h-4 w-4 mr-2" /> Try again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg font-medium">Trade History</CardTitle>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={exportToCSV}>
              <Download className="h-4 w-4 mr-2" /> Export
            </Button>
            <Button variant="outline" size="sm" onClick={() => refetch()}>
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col md:flex-row gap-4 mb-4">
          <div className="flex flex-col md:flex-row gap-2 flex-1">
            <Input
              placeholder="Filter by symbol"
              value={filterSymbol}
              onChange={(e) => setFilterSymbol(e.target.value)}
              className="w-full md:w-auto"
            />
            <Select value={filterSide} onValueChange={setFilterSide}>
              <SelectTrigger className="w-full md:w-[120px]">
                <SelectValue placeholder="Side" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">All</SelectItem>
                <SelectItem value="buy">Buy</SelectItem>
                <SelectItem value="sell">Sell</SelectItem>
              </SelectContent>
            </Select>
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-full md:w-[120px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">All</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="failed">Failed</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex gap-2">
            <DateRangePicker
              value={dateRange}
              onChange={setDateRange}
              className="w-full md:w-auto"
            />
            <Button variant="ghost" size="sm" onClick={resetFilters} className="h-10">
              <Filter className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[120px] cursor-pointer" onClick={() => handleSort('timestamp')}>
                  <div className="flex items-center">
                    Date
                    {sortField === 'timestamp' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort('side')}>
                  <div className="flex items-center">
                    Type
                    {sortField === 'side' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort('symbol')}>
                  <div className="flex items-center">
                    Symbol
                    {sortField === 'symbol' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right cursor-pointer" onClick={() => handleSort('amount')}>
                  <div className="flex items-center justify-end">
                    Amount
                    {sortField === 'amount' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right cursor-pointer" onClick={() => handleSort('price')}>
                  <div className="flex items-center justify-end">
                    Price
                    {sortField === 'price' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right cursor-pointer" onClick={() => handleSort('value')}>
                  <div className="flex items-center justify-end">
                    Total
                    {sortField === 'value' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right cursor-pointer" onClick={() => handleSort('status')}>
                  <div className="flex items-center justify-end">
                    Status
                    {sortField === 'status' && (
                      <ArrowUpDown className={cn("ml-1 h-4 w-4", sortDirection === 'asc' ? "rotate-180" : "")} />
                    )}
                  </div>
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {paginatedTrades.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={7} className="h-24 text-center">
                    No trades found
                  </TableCell>
                </TableRow>
              ) : (
                paginatedTrades.map((trade) => (
                  <TableRow key={trade.id} className="border-b border-muted/30">
                    <TableCell className="py-3 text-xs text-muted-foreground">
                      {format(new Date(trade.timestamp), 'yyyy-MM-dd HH:mm:ss')}
                    </TableCell>
                    <TableCell className="py-3">
                      <span className={cn(
                        'text-xs px-2 py-1 rounded-full',
                        trade.side === 'buy'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      )}>
                        {trade.side.toUpperCase()}
                      </span>
                    </TableCell>
                    <TableCell className="py-3 font-medium">{trade.symbol}</TableCell>
                    <TableCell className="py-3 text-right">{trade.amount.toLocaleString()}</TableCell>
                    <TableCell className="py-3 text-right">${trade.price.toLocaleString()}</TableCell>
                    <TableCell className="py-3 text-right font-medium">${trade.value.toLocaleString()}</TableCell>
                    <TableCell className="py-3 text-right">
                      <span className={cn(
                        'text-xs px-2 py-1 rounded-full',
                        trade.status === 'completed'
                          ? 'bg-green-100 text-green-800'
                          : trade.status === 'pending'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-red-100 text-red-800'
                      )}>
                        {trade.status.toUpperCase()}
                      </span>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>

        <div className="flex justify-between items-center mt-4">
          <div className="text-sm text-muted-foreground">
            Showing {paginatedTrades.length} of {filteredTrades.length} trades
          </div>
          <Select
            value={limit.toString()}
            onValueChange={(value) => setLimit(parseInt(value))}
          >
            <SelectTrigger className="w-[80px]">
              <SelectValue placeholder="10" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="10">10</SelectItem>
              <SelectItem value="25">25</SelectItem>
              <SelectItem value="50">50</SelectItem>
              <SelectItem value="100">100</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </CardContent>
    </Card>
  );
}

export { SalesHistory };
</file>

<file path="src/components/dashboard/SimpleAccountBalance.tsx">
import React, { useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { Loader2, WifiOff, RefreshCw } from 'lucide-react';
import { useWalletQuery } from '@/hooks/queries';
import { useWebSocket } from '@/hooks/use-websocket';
import { API_CONFIG } from '@/config';

export function SimpleAccountBalance() {
  const { toast } = useToast();
  const { isConnected, accountData } = useWebSocket();

  // Use TanStack Query for wallet data with more frequent refetching
  const {
    data: walletData,
    isLoading,
    isError,
    error,
    refetch,
    isFetching
  } = useWalletQuery({
    refetchInterval: 30000, // Refetch every 30 seconds
    staleTime: 10000, // Consider data stale after 10 seconds
  });

  // Show error toast if query fails
  useEffect(() => {
    if (isError && error) {
      toast({
        title: 'Error',
        description: `Failed to fetch account balance data: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: 'destructive',
      });
    }
  }, [isError, error, toast]);

  // Log the API configuration and wallet data for debugging
  useEffect(() => {
    console.log('API Configuration:', API_CONFIG.USE_LOCAL_API ? 'Local' : 'Remote');
    console.log('Wallet Data:', walletData);
  }, [walletData]);

  // Use WebSocket data if available, otherwise use query data
  const balanceData = accountData || walletData;
  console.log('Using balance data:', balanceData);

  if (isLoading) {
    return (
      <div className="bg-brutal-panel p-4 rounded-md border border-brutal-border h-full flex items-center justify-center">
        <Loader2 className="h-8 w-8 text-brutal-info animate-spin" />
      </div>
    );
  }

  if (isError && !balanceData) {
    return (
      <div className="bg-brutal-panel p-4 rounded-md border border-brutal-border h-full flex flex-col items-center justify-center">
        <WifiOff className="h-8 w-8 text-brutal-error mb-2" />
        <p className="text-sm text-brutal-text/70">Failed to load balance data</p>
      </div>
    );
  }

  // Get total balance
  console.log('Balance Data:', balanceData);
  const balances = balanceData?.balances || {};
  console.log('Balances:', balances);
  console.log('Balances type:', typeof balances);
  console.log('Balances entries:', Object.entries(balances));
  console.log('Balances keys:', Object.keys(balances));
  console.log('Balances values:', Object.values(balances));

  let totalBalance = 0;
  try {
    totalBalance = Object.values(balances).reduce((sum, balance: any) => {
      if (!balance) return sum;
      // Multiply the token amount by its price
      const value = (balance.total || 0) * (balance.price || 0);
      console.log(`Asset: ${balance?.asset}, Total: ${balance?.total}, Price: ${balance?.price}, Value: ${value}`);
      return sum + value;
    }, 0);
  } catch (error) {
    console.error('Error calculating total balance:', error);
    totalBalance = 0;
  }

  console.log('Total balance:', totalBalance);

  return (
    <div className="bg-brutal-panel p-4 rounded-md border border-brutal-border h-full">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-brutal-text font-bold text-sm">ACCOUNT BALANCE</h3>
        <div className="flex items-center gap-2">
          <div className="text-xs text-brutal-info">
            {isConnected ? 'LIVE' : 'STATIC'}
          </div>
          <button
            onClick={() => refetch()}
            disabled={isFetching}
            className="text-brutal-info hover:text-brutal-info-hover transition-colors"
            title="Refresh balance data"
          >
            <RefreshCw size={14} className={isFetching ? 'animate-spin' : ''} />
          </button>
        </div>
      </div>

      <div className="text-2xl font-bold text-brutal-text mb-4">
        ${totalBalance.toFixed(2)}
      </div>

      <div className="space-y-3 max-h-[200px] overflow-y-auto">
        <div className="grid grid-cols-3 text-xs text-brutal-text/70 border-b border-brutal-border pb-1">
          <div>Asset</div>
          <div className="text-right">Amount</div>
          <div className="text-right">Value (USD)</div>
        </div>

        {Object.entries(balances).length > 0 ? (
          Object.entries(balances).map(([symbol, balance]: [string, any]) => {
            if (!balance) return null;
            return (
              <div key={symbol} className="grid grid-cols-3 items-center text-xs">
                <div className="text-brutal-text font-medium">{symbol}</div>
                <div className="text-brutal-info text-right">{(balance.total || 0).toFixed(6)}</div>
                <div className="text-brutal-info text-right">
                  ${((balance.total || 0) * (balance.price || 0)).toFixed(2)}
                </div>
              </div>
            );
          })
        ) : (
          <div className="text-center text-brutal-text/50 py-4">No assets found</div>
        )}
      </div>

      <div className="mt-4 flex justify-between items-center text-xs text-brutal-text/50">
        <div>
          API: {API_CONFIG.USE_LOCAL_API ? 'Local' : 'Remote'}
        </div>
        <div>
          Last updated: {balanceData?.updatedAt
            ? new Date(balanceData.updatedAt).toLocaleString()
            : 'Unknown'
          }
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/dashboard/StatsCard.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface StatsCardProps {
  title: string;
  value: string | number;
  change?: string;
  isPositive?: boolean;
  className?: string;
}

export function StatsCard({ title, value, change, isPositive = true, className }: StatsCardProps) {
  return (
    <div className={cn('brutal-card min-w-[200px]', className)}>
      <div className="brutal-card-header">{title}</div>
      <div className="text-2xl font-bold">{value}</div>
      {change && (
        <div className={cn(
          'text-sm mt-2',
          isPositive ? 'text-brutal-success' : 'text-brutal-error'
        )}>
          {isPositive ? '+' : ''}{change}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/dashboard/TopHoldings.tsx">
import React from 'react';
import { cn } from '@/lib/utils';
import { useTopHoldingsQuery } from '@/hooks/queries/usePortfolioQueries';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

type CoinData = {
  symbol: string;
  name: string;
  value: string;
  change: string;
  isPositive: boolean;
};

const holdings: CoinData[] = [
  {
    symbol: "BTC",
    name: "Bitcoin",
    value: "$18,245.32",
    change: "8.2%",
    isPositive: true,
  },
  {
    symbol: "ETH",
    name: "Ethereum",
    value: "$5,432.12",
    change: "4.7%",
    isPositive: true,
  },
  {
    symbol: "BNB",
    name: "Binance Coin",
    value: "$2,104.53",
    change: "-1.3%",
    isPositive: false,
  },
  {
    symbol: "SOL",
    name: "Solana",
    value: "$1,253.45",
    change: "12.5%",
    isPositive: true,
  },
  {
    symbol: "ADA",
    name: "Cardano",
    value: "$397.43",
    change: "-0.8%",
    isPositive: false,
  }
];

export function TopHoldings() {
  const { toast } = useToast();

  // Use TanStack Query for top holdings data
  const {
    data: topHoldingsData,
    isLoading,
    isError,
    error
  } = useTopHoldingsQuery();

  // Show error toast if query fails
  React.useEffect(() => {
    if (isError && error) {
      toast({
        title: 'Error',
        description: 'Failed to fetch top holdings data',
        variant: 'destructive',
      });
    }
  }, [isError, error, toast]);

  // Use real data if available, otherwise use mock data
  const coins = topHoldingsData && topHoldingsData.length > 0 ? topHoldingsData : holdings;

  return (
    <div className="brutal-card">
      <div className="brutal-card-header mb-4">Top Holdings</div>

      <div className="grid grid-cols-12 text-xs text-brutal-text/70 border-b border-brutal-border pb-2 mb-2">
        <div className="col-span-2">SYMBOL</div>
        <div className="col-span-4">NAME</div>
        <div className="col-span-3 text-right">VALUE</div>
        <div className="col-span-3 text-right">CHANGE</div>
      </div>

      {isLoading ? (
        <div className="py-4 text-center text-brutal-text/70 flex items-center justify-center">
          <Loader2 className="h-4 w-4 text-brutal-info animate-spin mr-2" />
          Loading top holdings...
        </div>
      ) : coins.map((coin) => (
        <div key={coin.symbol} className="grid grid-cols-12 py-3 border-b border-brutal-border/30 text-sm">
          <div className="col-span-2 font-bold text-brutal-info">{coin.symbol}</div>
          <div className="col-span-4">{coin.name}</div>
          <div className="col-span-3 text-right font-bold">${coin.value}</div>
          <div className={cn(
            'col-span-3 text-right',
            coin.isPositive ? 'text-brutal-success' : 'text-brutal-error'
          )}>
            {coin.change}
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/dashboard/UpcomingCoins.tsx">
import React from 'react';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';
import { Star, TrendingUp, TrendingDown, Loader2 } from 'lucide-react';
import { useUpcomingCoinsForTodayAndTomorrowQuery } from '@/hooks/queries/useNewCoinQueries';

type CoinData = {
  symbol: string;
  name: string;
  releaseDate: string;
  potentialRating: number;
  expectedChange: string;
  isPositive: boolean;
};

const upcomingCoins: CoinData[] = [
  {
    symbol: "META",
    name: "MetaChain",
    releaseDate: "Apr 15",
    potentialRating: 4.5,
    expectedChange: "12.2%",
    isPositive: true,
  },
  {
    symbol: "QNT",
    name: "QuantumNet",
    releaseDate: "Apr 18",
    potentialRating: 4.2,
    expectedChange: "9.7%",
    isPositive: true,
  },
  {
    symbol: "AIX",
    name: "AI Exchange",
    releaseDate: "Apr 21",
    potentialRating: 3.8,
    expectedChange: "7.5%",
    isPositive: true,
  },
  {
    symbol: "DFX",
    name: "DeFi X",
    releaseDate: "Apr 24",
    potentialRating: 3.2,
    expectedChange: "-2.1%",
    isPositive: false,
  },
  {
    symbol: "WEB4",
    name: "Web4Token",
    releaseDate: "Apr 29",
    potentialRating: 4.0,
    expectedChange: "8.3%",
    isPositive: true,
  }
];

export function UpcomingCoins() {
  const { toast } = useToast();

  // Use TanStack Query for new coins data
  const {
    data: newCoinsData,
    isLoading,
    isError,
    error
  } = useUpcomingCoinsForTodayAndTomorrowQuery();

  // Show error toast if query fails
  React.useEffect(() => {
    if (isError && error) {
      toast({
        title: 'Error',
        description: 'Failed to fetch upcoming coins data',
        variant: 'destructive',
      });
    }
  }, [isError, error, toast]);

  // Format new coins data to match our UI requirements
  const formatCoins = (coinsData: any): CoinData[] => {
    // Check if coinsData is an array and has items
    if (!coinsData || !Array.isArray(coinsData) || coinsData.length === 0) {
      console.log('Using fallback data for upcoming coins');
      return upcomingCoins; // Use fallback data
    }

    console.log('Formatting coins data:', coinsData);

    try {
      return coinsData
        .slice(0, 5) // Limit to 5 coins
        .map(coin => ({
        symbol: coin.symbol || 'UNKNOWN',
        name: coin.name || 'Unknown Coin',
        releaseDate: new Date(coin.firstOpenTime || coin.first_open_time || Date.now()).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
        potentialRating: coin.potential_rating || Math.random() * 3 + 2, // Random rating between 2-5 if not provided
        expectedChange: `${(coin.expected_change || Math.random() * 15).toFixed(1)}%`,
        isPositive: coin.expected_change > 0 || Math.random() > 0.2 // Mostly positive if not provided
      }));
    } catch (error) {
      console.error('Error formatting coins data:', error);
      return upcomingCoins; // Use fallback data on error
    }
  };

  // Get formatted coins
  const coins = formatCoins(newCoinsData || []);

  const renderStars = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;

    for (let i = 0; i < fullStars; i++) {
      stars.push(<Star key={`full-${i}`} className="h-3 w-3 fill-brutal-warning text-brutal-warning" />);
    }

    if (hasHalfStar) {
      stars.push(<Star key="half" className="h-3 w-3 fill-brutal-warning text-brutal-warning opacity-50" />);
    }

    const emptyStars = 5 - stars.length;
    for (let i = 0; i < emptyStars; i++) {
      stars.push(<Star key={`empty-${i}`} className="h-3 w-3 text-brutal-text/30" />);
    }

    return stars;
  };

  return (
    <div className="brutal-card">
      <div className="brutal-card-header mb-4">Upcoming Coins (Today & Tomorrow)</div>

      <div className="grid grid-cols-12 text-xs text-brutal-text/70 border-b border-brutal-border pb-2 mb-2">
        <div className="col-span-2">SYMBOL</div>
        <div className="col-span-3">NAME</div>
        <div className="col-span-2">RELEASE</div>
        <div className="col-span-3">POTENTIAL</div>
        <div className="col-span-2 text-right">FORECAST</div>
      </div>

      {isLoading ? (
        <div className="py-4 text-center text-brutal-text/70 flex items-center justify-center">
          <Loader2 className="h-4 w-4 text-brutal-info animate-spin mr-2" />
          Loading upcoming coins...
        </div>
      ) : coins.map((coin) => (
        <div key={coin.symbol} className="grid grid-cols-12 py-3 border-b border-brutal-border/30 text-sm">
          <div className="col-span-2 font-bold text-brutal-info">{coin.symbol}</div>
          <div className="col-span-3">{coin.name}</div>
          <div className="col-span-2 font-mono text-brutal-warning">{coin.releaseDate}</div>
          <div className="col-span-3 flex items-center">
            {renderStars(coin.potentialRating)}
          </div>
          <div className={cn(
            'col-span-2 text-right flex items-center justify-end',
            coin.isPositive ? 'text-brutal-success' : 'text-brutal-error'
          )}>
            {coin.isPositive
              ? <TrendingUp className="h-3 w-3 mr-1" />
              : <TrendingDown className="h-3 w-3 mr-1" />
            }
            {coin.expectedChange}
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/layout/AppSidebar.tsx">
'use client';
import React, { useState } from 'react';
import Link from 'next/link';
import { ApiToggle } from '@/components/ApiToggle';
import {
  BarChart3,
  CircleDollarSign,
  LineChart,
  Star,
  Cpu,
  Settings,
  MessageSquare,
  Send,
  Zap,
  FileBarChart
} from 'lucide-react';
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
} from "@/components/ui/sidebar";

type NavItem = {
  name: string;
  path: string;
  icon: React.ElementType;
};

const navItems: NavItem[] = [
  { name: 'Dashboard', path: '/', icon: BarChart3 },
  { name: 'Portfolio', path: '/portfolio', icon: CircleDollarSign },
  { name: 'Trading', path: '/trading', icon: LineChart },
  { name: 'New Coins', path: '/new-coins', icon: Star },
  { name: 'Backtesting', path: '/backtesting', icon: FileBarChart },
  { name: 'System Status', path: '/system', icon: Cpu },
  { name: 'Bot Config', path: '/config', icon: Settings },
  { name: 'Settings', path: '/settings', icon: Zap },
];

type Message = {
  text: string;
  fromBot: boolean;
  timestamp: Date;
};

export function AppSidebar() {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      text: "Welcome to BruteBot. How can I assist you today?",
      fromBot: true,
      timestamp: new Date(),
    }
  ]);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!message.trim()) return;
    const userMessage: Message = {
      text: message,
      fromBot: false,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setMessage('');
    setTimeout(() => {
      const botMessage: Message = {
        text: "I'm analyzing the market. Will update you soon.",
        fromBot: true,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    }, 1000);
  };

  return (
    <Sidebar>
      <SidebarHeader className="p-0 border-b border-brutal-border">
        <div className="p-6">
          <h1 className="text-lg font-bold uppercase tracking-widest flex items-center">
            BRUTE<span className="text-sidebar-foreground/30 mx-2">/</span>DASH
          </h1>
        </div>
      </SidebarHeader>
      <SidebarContent className="p-0">
        <nav className="flex-1 py-6">
          <SidebarMenu>
            {navItems.map((item) => (
              <SidebarMenuItem key={item.name}>
                <SidebarMenuButton asChild>
                  <Link href={item.path} className="flex items-center px-6 py-3 text-sm">
                    <item.icon className="h-5 w-5 mr-3" />
                    {item.name}
                  </Link>
                </SidebarMenuButton>
              </SidebarMenuItem>
            ))}
          </SidebarMenu>
        </nav>
      </SidebarContent>
      <SidebarFooter className="p-3 border-t border-brutal-border">
        <div className="text-sm font-bold flex items-center mb-2 text-brutal-text">
          <MessageSquare className="h-4 w-4 mr-2" />
          BRUTEBOT CHAT
        </div>
        <div className="h-48 overflow-y-auto mb-2 p-2 bg-brutal-panel/30 rounded text-xs">
          {messages.map((msg, index) => (
            <div
              key={index}
              className={`mb-2 ${msg.fromBot ? 'text-brutal-info' : 'text-brutal-text'}`}
            >
              <span className="opacity-70 text-[10px]">
                {msg.fromBot ? 'BOT' : 'YOU'} ‚Ä¢ {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
              </span>
              <div className="mt-1">{msg.text}</div>
            </div>
          ))}
        </div>
        <form onSubmit={handleSendMessage} className="flex items-center">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Message BruteBot..."
            className="bg-brutal-panel text-brutal-text text-xs flex-1 rounded-l p-2 outline-none border-l border-y border-brutal-border focus:border-brutal-info"
          />
          <button
            type="submit"
            className="bg-brutal-panel text-brutal-text p-2 rounded-r border-r border-y border-brutal-border hover:bg-brutal-info hover:text-brutal-background"
          >
            <Send className="h-4 w-4" />
          </button>
        </form>
        <div className="mt-3 flex justify-between items-center">
          <div className="text-xs text-brutal-text/50">
            Bot version: 1.4.2
          </div>
          <ApiToggle />
        </div>
      </SidebarFooter>
    </Sidebar>
  );
}
</file>

<file path="src/components/layout/ConnectionStatus.tsx">
import React from 'react';
import { useWebSocket } from '@/hooks/use-websocket';
import { useStatusQuery } from '@/hooks/queries';
import { Wifi, WifiOff, Server } from 'lucide-react';
import { cn } from '@/lib/utils';

// Flag to disable backend connection checks during development
const DISABLE_BACKEND_CHECK = true;

export function ConnectionStatus() {
  const { isConnected } = useWebSocket();

  // Skip the backend status query if disabled
  const {
    data: statusData,
    isLoading,
    isError
  } = useStatusQuery({
    enabled: !DISABLE_BACKEND_CHECK
  });

  // Always show as connected in development mode if backend check is disabled
  const isBackendConnected = DISABLE_BACKEND_CHECK ? true : (!isError && !isLoading && statusData?.status === 'ok');

  return (
    <div className="flex items-center space-x-3">
      <div className="flex items-center">
        <div
          className={cn(
            "w-2 h-2 rounded-full mr-2",
            isBackendConnected ? "bg-brutal-success" : "bg-brutal-error"
          )}
        />
        <div className="flex items-center text-xs">
          <Server className="h-3 w-3 mr-1" />
          <span>Backend</span>
        </div>
      </div>

      <div className="flex items-center">
        <div
          className={cn(
            "w-2 h-2 rounded-full mr-2",
            isConnected ? "bg-brutal-success" : "bg-brutal-error"
          )}
        />
        <div className="flex items-center text-xs">
          {isConnected ? (
            <>
              <Wifi className="h-3 w-3 mr-1" />
              <span>Live</span>
            </>
          ) : (
            <>
              <WifiOff className="h-3 w-3 mr-1" />
              <span>Offline</span>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/layout/ErrorBoundary.tsx">
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

/**
 * Error Boundary component to catch JavaScript errors anywhere in the child component tree,
 * log those errors, and display a fallback UI instead of crashing the whole app.
 */
export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
    error: null,
  };

  public static getDerivedStateFromError(error: Error): State {
    // Update state so the next render will show the fallback UI
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    console.error('Error caught by ErrorBoundary:', error, errorInfo);
    
    // Call the optional onError callback
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
    
    // Show a toast notification
    toast.error('An error occurred', {
      description: error.message || 'Please try again or contact support if the issue persists.',
      duration: 5000,
    });
  }

  private handleReset = (): void => {
    this.setState({ hasError: false, error: null });
  };

  public render(): ReactNode {
    if (this.state.hasError) {
      // Render custom fallback UI if provided
      if (this.props.fallback) {
        return this.props.fallback;
      }
      
      // Default fallback UI
      return (
        <div className="flex flex-col items-center justify-center h-full p-6 text-center">
          <AlertTriangle className="w-12 h-12 text-destructive mb-4" />
          <h2 className="text-2xl font-bold mb-2">Something went wrong</h2>
          <p className="text-brutal-text/70 mb-6 max-w-md">
            {this.state.error?.message || 'An unexpected error occurred. Please try again.'}
          </p>
          <Button onClick={this.handleReset} variant="default">
            Try Again
          </Button>
        </div>
      );
    }

    // When there's no error, render children normally
    return this.props.children;
  }
}

/**
 * Higher-order component that wraps a component with an ErrorBoundary
 */
export function withErrorBoundary<P extends object>(
  Component: React.ComponentType<P>,
  errorBoundaryProps?: Omit<Props, 'children'>
): React.FC<P> {
  const displayName = Component.displayName || Component.name || 'Component';
  
  const ComponentWithErrorBoundary: React.FC<P> = (props) => (
    <ErrorBoundary {...errorBoundaryProps}>
      <Component {...props} />
    </ErrorBoundary>
  );
  
  ComponentWithErrorBoundary.displayName = `withErrorBoundary(${displayName})`;
  
  return ComponentWithErrorBoundary;
}
</file>

<file path="src/components/layout/Header.tsx">
import React, { useState, useEffect } from 'react';
import { useBackendStatus } from '../../hooks/useBackendStatus';

export function Header() {
  const { isConnected, isLoading } = useBackendStatus({
    refetchInterval: 5000, // Check every 5 seconds
  });

  const [currentDateTime, setCurrentDateTime] = useState(new Date());

  // Update the date and time every second
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentDateTime(new Date());
    }, 1000);

    return () => {
      clearInterval(timer);
    };
  }, []);

  const currentDate = currentDateTime.toLocaleDateString('en-US', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });

  const currentTime = currentDateTime.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false,
  });

  return (
    <header className="h-12 md:h-14 border-b border-brutal-border flex items-center justify-between px-3 md:px-6">
      <div className="flex items-center">
        <div className="uppercase text-xs tracking-wider">
          DASHBOARD<span className="text-brutal-text/30 mx-2">/</span>OVERVIEW
        </div>
      </div>

      <div className="flex items-center space-x-3 md:space-x-6 text-xs md:text-sm">
        <div className="hidden sm:flex items-center">
          {isConnected ? (
            <>
              <div className="h-2 w-2 rounded-full bg-green-500 mr-1"></div>
              <span className="uppercase text-xs tracking-wider mr-2">Backend</span>
              <div className="h-2 w-2 rounded-full bg-green-500 mr-1"></div>
              <span className="uppercase text-xs tracking-wider">Online</span>
            </>
          ) : (
            <>
              <div className="h-2 w-2 rounded-full bg-green-500 mr-1"></div>
              <span className="uppercase text-xs tracking-wider mr-2">Backend</span>
              <div className="h-2 w-2 rounded-full bg-red-500 mr-1"></div>
              <span className="uppercase text-xs tracking-wider">{isLoading ? 'Connecting...' : 'Offline'}</span>
            </>
          )}
        </div>
        <div className="text-brutal-text/70 font-mono">
          {currentDate.replace(/\//g, '/')} {currentTime}
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/layout/index.tsx">
import React from 'react';
import { Sidebar } from '@/components/layout/Sidebar';
import { Header } from '@/components/layout/Header';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <>
      <Header />
      <Sidebar />
      <main style={{ flexGrow: 1, padding: 24, width: '100%' }}>
        {children}
      </main>
    </>
  );
};

export { Layout };
</file>

<file path="src/components/layout/MainLayout.tsx">
import React from 'react';
import { Sidebar } from './Sidebar';
import { Header } from './Header';
import { ErrorBoundary } from './ErrorBoundary';
import { toast } from 'sonner';

interface MainLayoutProps {
  children?: React.ReactNode;
}

export function MainLayout({ children }: MainLayoutProps) {
  const handleGlobalError = (error: Error) => {
    toast.error('Application Error', {
      description: 'An unexpected error occurred. Some features may be unavailable.',
      duration: 5000,
    });
    console.error('Global application error:', error);
  };

  return (
    <ErrorBoundary onError={handleGlobalError}>
      <div className="flex h-screen bg-brutal-background text-brutal-text">
        <Sidebar />
        <div className="flex flex-col flex-1 overflow-hidden">
          <Header />
          <main className="flex-1 overflow-auto">
            {children}
          </main>
        </div>
      </div>
    </ErrorBoundary>
  );
}
</file>

<file path="src/components/layout/PageLayout.tsx">
import React from 'react';

interface PageLayoutProps {
  children: React.ReactNode;
}

export function PageLayout({ children }: PageLayoutProps) {
  return (
    <div className="container mx-auto p-4">
      {children}
    </div>
  );
}
</file>

<file path="src/components/layout/Sidebar.tsx">
import React, { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { 
  BarChart3, 
  CircleDollarSign, 
  Cpu, 
  LineChart, 
  LucideIcon, 
  MessageSquare, 
  Send,
  Settings, 
  Star 
} from 'lucide-react';

type NavItem = {
  name: string;
  path: string;
  icon: LucideIcon;
};

const navItems: NavItem[] = [
  {
    name: 'Dashboard',
    path: '/',
    icon: BarChart3,
  },
  {
    name: 'Portfolio',
    path: '/portfolio',
    icon: CircleDollarSign,
  },
  {
    name: 'Trading',
    path: '/trading',
    icon: LineChart,
  },
  {
    name: 'New Coins',
    path: '/new-coins',
    icon: Star,
  },
  {
    name: 'System Status',
    path: '/system',
    icon: Cpu,
  },
  {
    name: 'Bot Config',
    path: '/config',
    icon: Settings,
  },
];

type Message = {
  text: string;
  fromBot: boolean;
  timestamp: Date;
};

export function Sidebar() {
  const pathname = usePathname();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      text: "Welcome to BruteBot. How can I assist you today?",
      fromBot: true,
      timestamp: new Date(),
    }
  ]);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!message.trim()) return;
    
    // Add user message
    const userMessage: Message = {
      text: message,
      fromBot: false,
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setMessage('');
    
    // Simulate bot response
    setTimeout(() => {
      const botMessage: Message = {
        text: "I'm analyzing the market. Will update you soon.",
        fromBot: true,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    }, 1000);
  };
  
  return (
    <div className="w-60 h-screen border-r border-brutal-border flex flex-col bg-brutal-background">
      <div className="p-6 border-b border-brutal-border">
        <h1 className="text-lg font-bold uppercase tracking-widest flex items-center">
          BRUTE<span className="text-brutal-text/30 mx-2">/</span>DASH
        </h1>
      </div>
      
      <nav className="flex-1 py-6">
        <ul className="space-y-1">
          {navItems.map((item) => {
            const isActive = pathname === item.path;
            return (
              <li key={item.name}>
                <Link
                  href={item.path}
                  className={
                    `flex items-center px-6 py-3 text-sm ` +
                    (isActive 
                      ? 'bg-brutal-panel border-l-2 border-brutal-info text-brutal-text' 
                      : 'text-brutal-text/70 hover:text-brutal-text hover:bg-brutal-panel/50')
                  }
                >
                  <item.icon className="h-5 w-5 mr-3" />
                  {item.name}
                </Link>
              </li>
            );
          })}
        </ul>
      </nav>
      
      <div className="p-3 border-t border-brutal-border">
        <div className="text-sm font-bold flex items-center mb-2 text-brutal-text">
          <MessageSquare className="h-4 w-4 mr-2" />
          BRUTEBOT CHAT
        </div>
        
        <div className="h-48 overflow-y-auto mb-2 p-2 bg-brutal-panel/30 rounded text-xs">
          {messages.map((msg, index) => (
            <div 
              key={index}
              className={`mb-2 ${msg.fromBot ? 'text-brutal-info' : 'text-brutal-text'}`}
            >
              <span className="opacity-70 text-[10px]">
                {msg.fromBot ? 'BOT' : 'YOU'} ‚Ä¢ {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
              </span>
              <div className="mt-1">{msg.text}</div>
            </div>
          ))}
        </div>
        
        <form onSubmit={handleSendMessage} className="flex items-center">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Message BruteBot..."
            className="bg-brutal-panel text-brutal-text text-xs flex-1 rounded-l p-2 outline-none border-l border-y border-brutal-border focus:border-brutal-info"
          />
          <button 
            type="submit"
            className="bg-brutal-panel text-brutal-text p-2 rounded-r border-r border-y border-brutal-border hover:bg-brutal-info hover:text-brutal-background"
          >
            <Send className="h-4 w-4" />
          </button>
        </form>
        
        <div className="mt-3 text-xs text-brutal-text/50">
          Bot version: 1.4.2
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/portfolio/performance/__tests__/dataProcessor.test.ts">
import {
  convertPortfolioHistoryToTimeSeries,
  convertMarketDataToTimeSeries,
  calculateInitialValues,
  generateMockPortfolioHistory,
  generateMockMarketData
} from '../dataProcessor';
import { PortfolioAsset } from '../../PortfolioCard';

describe('Portfolio Data Processor', () => {
  // Sample data for tests
  const mockAssets: PortfolioAsset[] = [
    { symbol: 'BTC', amount: 0.5, value: 20000, change: 5 },
    { symbol: 'ETH', amount: 5, value: 10000, change: -2 }
  ];
  
  describe('convertPortfolioHistoryToTimeSeries', () => {
    it('should convert portfolio history to time series data', () => {
      const portfolioHistory = [
        {
          date: '2023-01-01',
          assets: [
            { symbol: 'BTC', price: 38000, amount: 0.5, value: 19000 },
            { symbol: 'ETH', price: 2040, amount: 5, value: 10200 }
          ],
          totalValue: 29200
        },
        {
          date: '2023-01-02',
          assets: [
            { symbol: 'BTC', price: 40000, amount: 0.5, value: 20000 },
            { symbol: 'ETH', price: 2000, amount: 5, value: 10000 }
          ],
          totalValue: 30000
        }
      ];
      
      const result = convertPortfolioHistoryToTimeSeries(portfolioHistory);
      
      expect(result).toEqual([
        { date: '2023-01-01', value: 29200 },
        { date: '2023-01-02', value: 30000 }
      ]);
    });
    
    it('should handle empty history', () => {
      const result = convertPortfolioHistoryToTimeSeries([]);
      expect(result).toEqual([]);
    });
  });
  
  describe('convertMarketDataToTimeSeries', () => {
    it('should convert market data to time series data', () => {
      const marketData = [
        { date: '2023-01-01', symbol: 'BTC', price: 38000 },
        { date: '2023-01-02', symbol: 'BTC', price: 40000 },
        { date: '2023-01-01', symbol: 'ETH', price: 2040 },
        { date: '2023-01-02', symbol: 'ETH', price: 2000 }
      ];
      
      const result = convertMarketDataToTimeSeries(marketData, 'BTC');
      
      expect(result).toEqual([
        { date: '2023-01-01', value: 38000 },
        { date: '2023-01-02', value: 40000 }
      ]);
    });
    
    it('should filter by symbol', () => {
      const marketData = [
        { date: '2023-01-01', symbol: 'BTC', price: 38000 },
        { date: '2023-01-02', symbol: 'BTC', price: 40000 },
        { date: '2023-01-01', symbol: 'ETH', price: 2040 },
        { date: '2023-01-02', symbol: 'ETH', price: 2000 }
      ];
      
      const result = convertMarketDataToTimeSeries(marketData, 'ETH');
      
      expect(result).toEqual([
        { date: '2023-01-01', value: 2040 },
        { date: '2023-01-02', value: 2000 }
      ]);
    });
    
    it('should handle empty data', () => {
      const result = convertMarketDataToTimeSeries([], 'BTC');
      expect(result).toEqual([]);
    });
  });
  
  describe('calculateInitialValues', () => {
    it('should calculate initial values based on current values and change percentages', () => {
      const result = calculateInitialValues(mockAssets);
      
      // BTC: 20000 / (1 + 0.05) = 19047.62
      expect(result['BTC']).toBeCloseTo(19047.62, 2);
      
      // ETH: 10000 / (1 - 0.02) = 10204.08
      expect(result['ETH']).toBeCloseTo(10204.08, 2);
    });
    
    it('should handle zero change', () => {
      const assets = [
        { symbol: 'BTC', amount: 0.5, value: 20000, change: 0 }
      ];
      
      const result = calculateInitialValues(assets);
      
      expect(result['BTC']).toBe(20000);
    });
    
    it('should handle empty assets', () => {
      const result = calculateInitialValues([]);
      expect(result).toEqual({});
    });
  });
  
  describe('generateMockPortfolioHistory', () => {
    it('should generate mock portfolio history data', () => {
      const days = 7;
      const result = generateMockPortfolioHistory(days, mockAssets);
      
      expect(result.length).toBe(days);
      expect(result[0].date).toBeDefined();
      expect(result[0].assets.length).toBe(mockAssets.length);
      expect(result[0].totalValue).toBeGreaterThan(0);
    });
    
    it('should handle empty assets', () => {
      const days = 7;
      const result = generateMockPortfolioHistory(days, []);
      
      expect(result.length).toBe(days);
      expect(result[0].assets.length).toBe(0);
      expect(result[0].totalValue).toBe(0);
    });
  });
  
  describe('generateMockMarketData', () => {
    it('should generate mock market data', () => {
      const days = 7;
      const symbols = ['BTC', 'ETH'];
      const result = generateMockMarketData(days, symbols);
      
      expect(result.length).toBe(days * symbols.length);
      expect(result[0].date).toBeDefined();
      expect(result[0].symbol).toBeDefined();
      expect(result[0].price).toBeGreaterThan(0);
    });
    
    it('should use default symbols if none provided', () => {
      const days = 7;
      const result = generateMockMarketData(days);
      
      // Default symbols are ['BTC', 'ETH', 'TOTAL']
      expect(result.length).toBe(days * 3);
    });
  });
});
</file>

<file path="src/components/portfolio/performance/__tests__/metrics.test.ts">
import {
  calculateTotalReturn,
  calculateAnnualizedReturn,
  calculateVolatility,
  calculateSharpeRatio,
  calculateMaxDrawdown,
  calculateBeta,
  calculateAlpha,
  calculateAllMetrics,
  TimeSeriesData
} from '../metrics';

describe('Portfolio Performance Metrics', () => {
  describe('calculateTotalReturn', () => {
    it('should calculate total return correctly', () => {
      expect(calculateTotalReturn(1000, 1100)).toBeCloseTo(10, 2);
      expect(calculateTotalReturn(1000, 900)).toBeCloseTo(-10, 2);
      expect(calculateTotalReturn(0, 100)).toBe(0); // Handle division by zero
    });
  });

  describe('calculateAnnualizedReturn', () => {
    it('should calculate annualized return correctly', () => {
      // 10% return over 365 days = 10% annualized
      expect(calculateAnnualizedReturn(10, 365)).toBeCloseTo(10, 1);
      
      // 10% return over 182.5 days (half a year) ‚âà 21% annualized
      // Using a less precise comparison (only 0 decimal places) to handle floating point math differences
      expect(calculateAnnualizedReturn(10, 182.5)).toBeCloseTo(21, 0);
      
      // Handle edge case
      expect(calculateAnnualizedReturn(10, 0)).toBe(0);
    });
  });

  describe('calculateVolatility', () => {
    it('should calculate volatility correctly', () => {
      const dailyReturns = [0.5, -0.3, 0.2, 0.1, -0.2, 0.4, -0.1];
      // The exact value depends on the calculation, but we can check it's reasonable
      expect(calculateVolatility(dailyReturns)).toBeGreaterThan(0);
      
      // Edge cases
      expect(calculateVolatility([])).toBe(0);
      expect(calculateVolatility([1])).toBe(0);
    });
  });

  describe('calculateSharpeRatio', () => {
    it('should calculate Sharpe ratio correctly', () => {
      // Annualized return of 12%, volatility of 8%, risk-free rate of 2%
      // Sharpe = (12 - 2) / 8 = 1.25
      expect(calculateSharpeRatio(12, 8, 2)).toBeCloseTo(1.25, 2);
      
      // Handle edge case
      expect(calculateSharpeRatio(10, 0, 2)).toBe(0);
    });
  });

  describe('calculateMaxDrawdown', () => {
    it('should calculate maximum drawdown correctly', () => {
      const portfolioValues = [100, 110, 105, 95, 90, 100, 105];
      // Max drawdown is from 110 to 90 = (110-90)/110 = 18.18%
      expect(calculateMaxDrawdown(portfolioValues)).toBeCloseTo(18.18, 1);
      
      // Edge cases
      expect(calculateMaxDrawdown([])).toBe(0);
      expect(calculateMaxDrawdown([100])).toBe(0);
    });
  });

  describe('calculateBeta', () => {
    it('should calculate beta correctly', () => {
      const portfolioReturns = [1.2, -0.5, 0.8, -0.2, 1.0];
      const marketReturns = [1.0, -0.3, 0.6, -0.1, 0.8];
      
      // Beta should be positive and reasonable
      const beta = calculateBeta(portfolioReturns, marketReturns);
      expect(beta).toBeGreaterThan(0);
      
      // Edge cases
      expect(calculateBeta([], [])).toBe(0);
      expect(calculateBeta([1], [1])).toBe(0);
      expect(calculateBeta(portfolioReturns, [1, 2])).toBe(0); // Mismatched lengths
    });
  });

  describe('calculateAlpha', () => {
    it('should calculate alpha correctly', () => {
      // Portfolio return: 15%, risk-free rate: 2%, beta: 1.2, market return: 10%
      // Alpha = 15 - (2 + 1.2 * (10 - 2)) = 15 - (2 + 9.6) = 15 - 11.6 = 3.4
      expect(calculateAlpha(15, 2, 1.2, 10)).toBeCloseTo(3.4, 2);
    });
  });

  describe('calculateAllMetrics', () => {
    it('should calculate all metrics correctly', () => {
      const portfolioHistory: TimeSeriesData[] = [
        { date: '2023-01-01', value: 10000 },
        { date: '2023-01-02', value: 10100 },
        { date: '2023-01-03', value: 10050 },
        { date: '2023-01-04', value: 10200 },
        { date: '2023-01-05', value: 10150 },
        { date: '2023-01-06', value: 10300 },
        { date: '2023-01-07', value: 10400 }
      ];
      
      const marketHistory: TimeSeriesData[] = [
        { date: '2023-01-01', value: 5000 },
        { date: '2023-01-02', value: 5050 },
        { date: '2023-01-03', value: 5025 },
        { date: '2023-01-04', value: 5100 },
        { date: '2023-01-05', value: 5075 },
        { date: '2023-01-06', value: 5150 },
        { date: '2023-01-07', value: 5200 }
      ];
      
      const metrics = calculateAllMetrics(portfolioHistory, marketHistory);
      
      // Check that all metrics are calculated
      expect(metrics.totalReturn).toBeDefined();
      expect(metrics.dailyReturn).toBeDefined();
      expect(metrics.weeklyReturn).toBeDefined();
      expect(metrics.monthlyReturn).toBeDefined();
      expect(metrics.yearlyReturn).toBeDefined();
      expect(metrics.sharpeRatio).toBeDefined();
      expect(metrics.volatility).toBeDefined();
      expect(metrics.maxDrawdown).toBeDefined();
      expect(metrics.beta).toBeDefined();
      expect(metrics.alpha).toBeDefined();
      
      // Total return should be 4% (10400 - 10000) / 10000
      expect(metrics.totalReturn).toBeCloseTo(4, 2);
      
      // Edge case
      expect(calculateAllMetrics([], [])).toEqual({
        totalReturn: 0,
        dailyReturn: 0,
        weeklyReturn: 0,
        monthlyReturn: 0,
        yearlyReturn: 0,
        sharpeRatio: 0,
        volatility: 0,
        maxDrawdown: 0,
        beta: 0,
        alpha: 0
      });
    });
  });
});
</file>

<file path="src/components/portfolio/performance/__tests__/PortfolioPerformance.test.tsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { PortfolioPerformance } from '../PortfolioPerformance';
import { vi, describe, it, expect, beforeEach } from 'vitest';

// Create mock hooks
const mockUsePortfolioData = vi.fn();
const mockUsePortfolioMetrics = vi.fn();

// Mock the modules using Vitest syntax
vi.mock('../usePortfolioData', () => ({
  usePortfolioData: () => mockUsePortfolioData()
}));

vi.mock('../usePortfolioMetrics', () => ({
  usePortfolioMetrics: () => mockUsePortfolioMetrics()
}));

describe('PortfolioPerformance', () => {
  beforeEach(() => {
    // Reset mocks
    mockUsePortfolioData.mockReset();
    mockUsePortfolioMetrics.mockReset();
    
    // Mock implementation for usePortfolioData
    mockUsePortfolioData.mockReturnValue({
      assets: [
        { symbol: 'BTC', amount: 0.5, value: 20000, change: 5 },
        { symbol: 'ETH', amount: 5, value: 10000, change: -2 }
      ],
      timeSeriesData: {
        portfolio: [
          { date: '2023-01-01', value: 30000 },
          { date: '2023-01-02', value: 31000 }
        ],
        market: [
          { date: '2023-01-01', value: 15000 },
          { date: '2023-01-02', value: 15300 }
        ]
      },
      initialValues: {
        'BTC': 19000,
        'ETH': 10200
      },
      isLoading: false,
      error: null,
      refetch: vi.fn()
    });

    // Mock implementation for usePortfolioMetrics
    mockUsePortfolioMetrics.mockReturnValue({
      metrics: {
        totalReturn: 16.67,
        dailyReturn: 3.33,
        weeklyReturn: 5.5,
        monthlyReturn: 12.2,
        yearlyReturn: 42.5,
        sharpeRatio: 1.2,
        volatility: 25.3,
        maxDrawdown: 12.5,
        beta: 1.1,
        alpha: 8.2
      },
      allocation: {
        assetClass: { 'Cryptocurrency': 66.7, 'Altcoin': 33.3 },
        sector: { 'Large Cap': 66.7, 'Smart Contract': 33.3 },
        geography: { 'Global': 100 }
      },
      attribution: {
        topContributors: [
          { symbol: 'BTC', contribution: 1000 }
        ],
        topDetractors: [
          { symbol: 'ETH', contribution: -200 }
        ],
        sectorAttribution: [
          { sector: 'Large Cap', contribution: 65 },
          { sector: 'Smart Contract', contribution: 25 }
        ]
      },
      isLoading: false,
      error: null,
      timeframe: '1M',
      setTimeframe: vi.fn()
    });
  });

  it('renders all performance components', async () => {
    render(<PortfolioPerformance />);
    
    // Wait for all components to render
    await waitFor(() => {
      // Check for metrics dashboard
      expect(screen.getByText('Performance Metrics')).toBeInTheDocument();
      
      // Check for historical performance chart
      expect(screen.getByText('Historical Performance')).toBeInTheDocument();
      
      // Check for asset allocation chart
      expect(screen.getByText('Asset Allocation')).toBeInTheDocument();
      
      // Check for risk analysis chart
      expect(screen.getByText('Risk Analysis')).toBeInTheDocument();
      
      // Check for performance attribution
      expect(screen.getByText('Performance Attribution')).toBeInTheDocument();
    });
  });

  it('displays loading state when data is loading', async () => {
    // Mock loading state
    mockUsePortfolioData.mockReturnValue({
      assets: [],
      timeSeriesData: { portfolio: [], market: [] },
      initialValues: {},
      isLoading: true,
      error: null,
      refetch: vi.fn()
    });
    
    mockUsePortfolioMetrics.mockReturnValue({
      metrics: {
        totalReturn: 0,
        dailyReturn: 0,
        weeklyReturn: 0,
        monthlyReturn: 0,
        yearlyReturn: 0,
        sharpeRatio: 0,
        volatility: 0,
        maxDrawdown: 0,
        beta: 0,
        alpha: 0
      },
      allocation: {
        assetClass: {},
        sector: {},
        geography: {}
      },
      attribution: {
        topContributors: [],
        topDetractors: [],
        sectorAttribution: []
      },
      isLoading: true,
      error: null,
      timeframe: '1M',
      setTimeframe: vi.fn()
    });
    
    render(<PortfolioPerformance />);
    
    // Check for loading spinners
    const loadingSpinners = document.querySelectorAll('.animate-spin');
    expect(loadingSpinners.length).toBeGreaterThan(0);
  });
});
</file>

<file path="src/components/portfolio/performance/__tests__/usePortfolioData.test.ts">
import { renderHook, act } from '@testing-library/react';
import { usePortfolioData } from '../usePortfolioData';

describe('usePortfolioData', () => {
  it('should fetch and process portfolio data', async () => {
    const { result, waitForNextUpdate } = renderHook(() => usePortfolioData());

    // Initially loading
    expect(result.current.isLoading).toBe(true);

    // Wait for data to load
    await waitForNextUpdate();

    // Should have loaded data
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBeNull();

    // Check assets
    expect(result.current.assets.length).toBeGreaterThan(0);

    // Check portfolio history
    expect(result.current.portfolioHistory.length).toBeGreaterThan(0);

    // Check market data
    expect(result.current.marketData.length).toBeGreaterThan(0);

    // Check time series data
    expect(result.current.timeSeriesData.portfolio.length).toBeGreaterThan(0);
    expect(result.current.timeSeriesData.market.length).toBeGreaterThan(0);

    // Check initial values
    expect(Object.keys(result.current.initialValues).length).toBeGreaterThan(0);
  });

  it('should refetch data when requested', async () => {
    const { result, waitForNextUpdate } = renderHook(() => usePortfolioData());

    // Wait for initial data to load
    await waitForNextUpdate();

    // Refetch data
    act(() => {
      result.current.refetch();
    });

    // Should be loading again
    expect(result.current.isLoading).toBe(true);

    // Wait for refetch to complete
    await waitForNextUpdate();

    // Should have loaded data again
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBeNull();
  });
});
</file>

<file path="src/components/portfolio/performance/__tests__/usePortfolioMetrics.test.ts">
import { renderHook, act } from '@testing-library/react';
import { usePortfolioMetrics } from '../usePortfolioMetrics';
import { PortfolioAsset } from '../../PortfolioCard';
import { TimeSeriesData } from '../metrics';

// Mock data
const mockAssets: PortfolioAsset[] = [
  { symbol: 'BTC', amount: 0.5, value: 20000, change: 5 },
  { symbol: 'ETH', amount: 5, value: 10000, change: -2 },
  { symbol: 'SOL', amount: 50, value: 5000, change: 10 }
];

const mockPortfolioHistory: TimeSeriesData[] = [
  { date: '2023-01-01', value: 30000 },
  { date: '2023-01-02', value: 31000 },
  { date: '2023-01-03', value: 30500 },
  { date: '2023-01-04', value: 32000 },
  { date: '2023-01-05', value: 31500 },
  { date: '2023-01-06', value: 33000 },
  { date: '2023-01-07', value: 35000 }
];

const mockMarketHistory: TimeSeriesData[] = [
  { date: '2023-01-01', value: 15000 },
  { date: '2023-01-02', value: 15300 },
  { date: '2023-01-03', value: 15100 },
  { date: '2023-01-04', value: 15600 },
  { date: '2023-01-05', value: 15400 },
  { date: '2023-01-06', value: 15800 },
  { date: '2023-01-07', value: 16200 }
];

const mockInitialValues = {
  'BTC': 19000,
  'ETH': 10200,
  'SOL': 4500
};

describe('usePortfolioMetrics', () => {
  it('should calculate metrics correctly', () => {
    const { result } = renderHook(() => usePortfolioMetrics(
      mockAssets,
      { portfolio: mockPortfolioHistory, market: mockMarketHistory },
      mockInitialValues
    ));

    // Wait for calculations to complete
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBeNull();

    // Check metrics
    expect(result.current.metrics.totalReturn).toBeCloseTo(16.67, 2); // (35000 - 30000) / 30000 * 100
    expect(result.current.metrics.sharpeRatio).toBeGreaterThan(0);

    // Check allocation
    expect(Object.keys(result.current.allocation.assetClass).length).toBeGreaterThan(0);
    expect(Object.keys(result.current.allocation.sector).length).toBeGreaterThan(0);

    // Check attribution
    expect(result.current.attribution.topContributors.length).toBeGreaterThan(0);
    expect(result.current.attribution.topDetractors.length).toBeGreaterThan(0);
  });

  it('should handle timeframe changes', () => {
    const { result } = renderHook(() => usePortfolioMetrics(
      mockAssets,
      { portfolio: mockPortfolioHistory, market: mockMarketHistory },
      mockInitialValues
    ));

    // Initial timeframe should be 1M
    expect(result.current.timeframe).toBe('1M');

    // Change timeframe
    act(() => {
      result.current.setTimeframe('1Y');
    });

    // Timeframe should be updated
    expect(result.current.timeframe).toBe('1Y');
  });

  it('should handle empty data', () => {
    const { result } = renderHook(() => usePortfolioMetrics(
      [],
      { portfolio: [], market: [] },
      {}
    ));

    // Should not throw errors
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBeNull();

    // Metrics should be zero
    expect(result.current.metrics.totalReturn).toBe(0);
    expect(result.current.metrics.sharpeRatio).toBe(0);

    // Allocation should be empty
    expect(Object.keys(result.current.allocation.assetClass).length).toBe(0);

    // Attribution should be empty
    expect(result.current.attribution.topContributors.length).toBe(0);
  });
});
</file>

<file path="src/components/portfolio/performance/AssetAllocationChart.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';
import { PieChartIcon } from 'lucide-react';
import { AssetAllocation } from './metrics';

interface AssetAllocationChartProps {
  allocation: AssetAllocation;
  isLoading?: boolean;
}

/**
 * Component for displaying asset allocation charts
 */
export function AssetAllocationChart({
  allocation,
  isLoading = false
}: AssetAllocationChartProps) {
  const [category, setCategory] = useState<'assetClass' | 'sector' | 'geography'>('assetClass');
  
  // Convert allocation data to chart format
  const getChartData = () => {
    const data = allocation[category];
    return Object.entries(data).map(([name, value]) => ({
      name,
      value: parseFloat(value.toFixed(2))
    }));
  };
  
  // Colors for the pie chart
  const COLORS = ['#3a86ff', '#ff006e', '#ffbe0b', '#8338ec', '#fb5607', '#06d6a0', '#118ab2'];
  
  return (
    <Card className="bg-brutal-panel border-brutal-border">
      <CardHeader className="pb-2">
        <CardTitle className="text-brutal-text flex items-center text-lg">
          <PieChartIcon className="mr-2 h-5 w-5 text-brutal-warning" />
          Asset Allocation
        </CardTitle>
      </CardHeader>
      <CardContent>
        {/* Category selector */}
        <div className="mb-4">
          <Tabs 
            defaultValue="assetClass" 
            onValueChange={(value) => setCategory(value as any)}
            className="w-full"
          >
            <TabsList className="grid grid-cols-3 w-full">
              <TabsTrigger value="assetClass">Asset Class</TabsTrigger>
              <TabsTrigger value="sector">Sector</TabsTrigger>
              <TabsTrigger value="geography">Geography</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
        
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brutal-warning"></div>
          </div>
        ) : (
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={getChartData()}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  innerRadius={40}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {getChartData().map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  formatter={(value: number) => [`${value}%`, 'Allocation']}
                  contentStyle={{
                    backgroundColor: '#1e1e1e',
                    borderColor: '#333333',
                    color: '#f7f7f7',
                    fontFamily: 'JetBrains Mono, monospace'
                  }}
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/portfolio/performance/dataProcessor.ts">
import { TimeSeriesData } from './metrics';
import { PortfolioAsset } from '../PortfolioCard';

/**
 * Interface for portfolio history data
 */
export interface PortfolioHistoryItem {
  date: string;
  assets: {
    symbol: string;
    price: number;
    amount: number;
    value: number;
  }[];
  totalValue: number;
}

/**
 * Interface for market data
 */
export interface MarketDataItem {
  date: string;
  symbol: string;
  price: number;
}

/**
 * Convert portfolio history to time series data
 * 
 * @param history - Portfolio history data
 * @returns Time series data for portfolio values
 */
export function convertPortfolioHistoryToTimeSeries(
  history: PortfolioHistoryItem[]
): TimeSeriesData[] {
  return history.map(item => ({
    date: item.date,
    value: item.totalValue
  }));
}

/**
 * Convert market data to time series data
 * 
 * @param marketData - Market data
 * @param symbol - Market symbol to extract
 * @returns Time series data for market values
 */
export function convertMarketDataToTimeSeries(
  marketData: MarketDataItem[],
  symbol: string = 'BTC'
): TimeSeriesData[] {
  // Filter by symbol and convert to time series
  const filteredData = marketData.filter(item => item.symbol === symbol);
  
  return filteredData.map(item => ({
    date: item.date,
    value: item.price
  }));
}

/**
 * Calculate initial values for assets based on current values and change percentages
 * 
 * @param assets - Current portfolio assets
 * @returns Object mapping symbols to initial values
 */
export function calculateInitialValues(assets: PortfolioAsset[]): { [symbol: string]: number } {
  const initialValues: { [symbol: string]: number } = {};
  
  assets.forEach(asset => {
    // If change is 0, initial value is the same as current value
    if (asset.change === 0) {
      initialValues[asset.symbol] = asset.value;
    } else {
      // Calculate initial value based on current value and change percentage
      initialValues[asset.symbol] = asset.value / (1 + asset.change / 100);
    }
  });
  
  return initialValues;
}

/**
 * Generate mock portfolio history data for testing
 * 
 * @param days - Number of days of history to generate
 * @param assets - Current portfolio assets
 * @returns Mock portfolio history data
 */
export function generateMockPortfolioHistory(
  days: number,
  assets: PortfolioAsset[]
): PortfolioHistoryItem[] {
  const history: PortfolioHistoryItem[] = [];
  const today = new Date();
  const initialValues = calculateInitialValues(assets);
  
  // Calculate total initial value
  const totalInitialValue = Object.values(initialValues).reduce((sum, value) => sum + value, 0);
  
  // Generate history for each day
  for (let i = 0; i < days; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() - (days - i - 1));
    const dateStr = date.toISOString().split('T')[0];
    
    // Calculate progress factor (0 to 1) from start to end
    const progressFactor = i / (days - 1);
    
    // Generate assets data for this day
    const assetsData = assets.map(asset => {
      const initialValue = initialValues[asset.symbol] || 0;
      const currentValue = asset.value;
      
      // Interpolate value based on progress factor with some randomness
      const randomFactor = 0.9 + Math.random() * 0.2; // 0.9 to 1.1
      const interpolatedValue = initialValue + (currentValue - initialValue) * progressFactor * randomFactor;
      
      // Calculate price based on current price and change
      const currentPrice = asset.value / asset.amount;
      const initialPrice = initialValue / asset.amount;
      const interpolatedPrice = initialPrice + (currentPrice - initialPrice) * progressFactor * randomFactor;
      
      return {
        symbol: asset.symbol,
        price: interpolatedPrice,
        amount: asset.amount,
        value: interpolatedValue
      };
    });
    
    // Calculate total value for this day
    const totalValue = assetsData.reduce((sum, asset) => sum + asset.value, 0);
    
    history.push({
      date: dateStr,
      assets: assetsData,
      totalValue
    });
  }
  
  return history;
}

/**
 * Generate mock market data for testing
 * 
 * @param days - Number of days of history to generate
 * @param symbols - Market symbols to include
 * @returns Mock market data
 */
export function generateMockMarketData(
  days: number,
  symbols: string[] = ['BTC', 'ETH', 'TOTAL']
): MarketDataItem[] {
  const marketData: MarketDataItem[] = [];
  const today = new Date();
  
  // Initial prices
  const initialPrices: { [key: string]: number } = {
    'BTC': 40000,
    'ETH': 2000,
    'TOTAL': 1000000
  };
  
  // Current prices (with some growth)
  const currentPrices: { [key: string]: number } = {
    'BTC': 45000,
    'ETH': 2200,
    'TOTAL': 1100000
  };
  
  // Generate data for each day and symbol
  for (let i = 0; i < days; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() - (days - i - 1));
    const dateStr = date.toISOString().split('T')[0];
    
    // Calculate progress factor (0 to 1) from start to end
    const progressFactor = i / (days - 1);
    
    for (const symbol of symbols) {
      const initialPrice = initialPrices[symbol] || 1000;
      const currentPrice = currentPrices[symbol] || 1100;
      
      // Interpolate price based on progress factor with some randomness
      const randomFactor = 0.95 + Math.random() * 0.1; // 0.95 to 1.05
      const price = initialPrice + (currentPrice - initialPrice) * progressFactor * randomFactor;
      
      marketData.push({
        date: dateStr,
        symbol,
        price
      });
    }
  }
  
  return marketData;
}
</file>

<file path="src/components/portfolio/performance/HistoricalPerformanceChart.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { TrendingUp } from 'lucide-react';
import { TimeSeriesData } from './metrics';

interface HistoricalPerformanceChartProps {
  portfolioData: TimeSeriesData[];
  marketData: TimeSeriesData[];
  timeframe: string;
  isLoading?: boolean;
}

/**
 * Component for displaying historical performance chart
 */
export function HistoricalPerformanceChart({
  portfolioData,
  marketData,
  timeframe,
  isLoading = false
}: HistoricalPerformanceChartProps) {
  const [normalized, setNormalized] = useState<boolean>(false);
  
  // Prepare chart data
  const prepareChartData = () => {
    if (portfolioData.length === 0 || marketData.length === 0) {
      return [];
    }
    
    // Find matching dates between portfolio and market data
    const portfolioMap = new Map(portfolioData.map(item => [item.date, item.value]));
    const marketMap = new Map(marketData.map(item => [item.date, item.value]));
    
    // Get common dates
    const commonDates = [...portfolioMap.keys()].filter(date => marketMap.has(date));
    
    // If normalized, convert to percentage change from first value
    if (normalized) {
      const firstPortfolioValue = portfolioMap.get(commonDates[0]) || 0;
      const firstMarketValue = marketMap.get(commonDates[0]) || 0;
      
      return commonDates.map(date => {
        const portfolioValue = portfolioMap.get(date) || 0;
        const marketValue = marketMap.get(date) || 0;
        
        const portfolioChange = firstPortfolioValue > 0 
          ? ((portfolioValue - firstPortfolioValue) / firstPortfolioValue) * 100 
          : 0;
          
        const marketChange = firstMarketValue > 0 
          ? ((marketValue - firstMarketValue) / firstMarketValue) * 100 
          : 0;
        
        return {
          date,
          portfolio: parseFloat(portfolioChange.toFixed(2)),
          market: parseFloat(marketChange.toFixed(2))
        };
      });
    }
    
    // Return absolute values
    return commonDates.map(date => ({
      date,
      portfolio: portfolioMap.get(date) || 0,
      market: marketMap.get(date) || 0
    }));
  };
  
  // Format Y-axis tick
  const formatYAxisTick = (value: number) => {
    if (normalized) {
      return `${value}%`;
    } else {
      return value >= 1000 ? `$${(value / 1000).toFixed(1)}K` : `$${value}`;
    }
  };
  
  return (
    <Card className="bg-brutal-panel border-brutal-border">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-brutal-text flex items-center text-lg">
            <TrendingUp className="mr-2 h-5 w-5 text-brutal-success" />
            Historical Performance
          </CardTitle>
          <div className="flex items-center space-x-2">
            <Switch
              id="normalized"
              checked={normalized}
              onCheckedChange={setNormalized}
            />
            <Label htmlFor="normalized" className="text-brutal-text text-sm">
              Normalize
            </Label>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brutal-success"></div>
          </div>
        ) : (
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={prepareChartData()}
                margin={{
                  top: 5,
                  right: 30,
                  left: 20,
                  bottom: 5,
                }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke="#333" opacity={0.2} />
                <XAxis 
                  dataKey="date" 
                  stroke="#f7f7f7" 
                  opacity={0.5}
                  tick={{ fill: '#f7f7f7', fontSize: 12 }}
                  tickFormatter={(value) => {
                    // Format date based on timeframe
                    const date = new Date(value);
                    if (timeframe === '1D' || timeframe === '1W') {
                      return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
                    } else {
                      return date.toLocaleDateString(undefined, { month: 'short', year: '2-digit' });
                    }
                  }}
                />
                <YAxis 
                  stroke="#f7f7f7" 
                  opacity={0.5}
                  tick={{ fill: '#f7f7f7', fontSize: 12 }}
                  tickFormatter={formatYAxisTick}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1e1e1e',
                    borderColor: '#333333',
                    color: '#f7f7f7',
                    fontFamily: 'JetBrains Mono, monospace'
                  }}
                  formatter={(value, name) => {
                    if (normalized) {
                      return [`${value}%`, name === 'portfolio' ? 'Portfolio' : 'Market'];
                    } else {
                      return [`$${value.toLocaleString()}`, name === 'portfolio' ? 'Portfolio' : 'Market'];
                    }
                  }}
                  labelFormatter={(label) => {
                    const date = new Date(label);
                    return date.toLocaleDateString(undefined, { 
                      year: 'numeric', 
                      month: 'short', 
                      day: 'numeric' 
                    });
                  }}
                />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="portfolio"
                  name="Portfolio"
                  stroke="#3a86ff"
                  activeDot={{ r: 8 }}
                  strokeWidth={2}
                />
                <Line 
                  type="monotone" 
                  dataKey="market" 
                  name="Market" 
                  stroke="#ff006e" 
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/portfolio/performance/index.ts">
// Export metrics functions
export * from './metrics';

// Export data processing utilities
export * from './dataProcessor';

// Export hooks
export * from './usePortfolioData';
export * from './usePortfolioMetrics';
</file>

<file path="src/components/portfolio/performance/metrics.ts">
/**
 * Portfolio Performance Metrics Calculation Utilities
 *
 * This module provides functions for calculating various portfolio performance metrics
 * including returns, risk-adjusted metrics, and other financial indicators.
 */

import { PortfolioData, PortfolioAsset } from '../PortfolioCard';

export interface TimeSeriesData {
  date: string;
  value: number;
}

export interface PerformanceMetrics {
  totalReturn: number;
  dailyReturn: number;
  weeklyReturn: number;
  monthlyReturn: number;
  yearlyReturn: number;
  sharpeRatio: number;
  volatility: number;
  maxDrawdown: number;
  beta: number;
  alpha: number;
}

export interface AssetAllocation {
  assetClass: { [key: string]: number };
  sector: { [key: string]: number };
  geography: { [key: string]: number };
}

export interface PerformanceAttribution {
  topContributors: { symbol: string; contribution: number }[];
  topDetractors: { symbol: string; contribution: number }[];
  sectorAttribution: { sector: string; contribution: number }[];
}

/**
 * Calculate total return for a portfolio over a given time period
 *
 * @param initialValue - Portfolio value at the start of the period
 * @param currentValue - Portfolio value at the end of the period
 * @returns Total return as a percentage
 */
export function calculateTotalReturn(initialValue: number, currentValue: number): number {
  if (initialValue === 0) return 0;
  return ((currentValue - initialValue) / initialValue) * 100;
}

/**
 * Calculate annualized return from a total return and time period
 *
 * @param totalReturn - Total return as a percentage
 * @param daysHeld - Number of days the portfolio was held
 * @returns Annualized return as a percentage
 */
export function calculateAnnualizedReturn(totalReturn: number, daysHeld: number): number {
  if (daysHeld === 0) return 0;
  const yearsHeld = daysHeld / 365;
  return (Math.pow(1 + totalReturn / 100, 1 / yearsHeld) - 1) * 100;
}

/**
 * Calculate portfolio volatility (standard deviation of returns)
 *
 * @param dailyReturns - Array of daily returns as percentages
 * @returns Volatility as a percentage
 */
export function calculateVolatility(dailyReturns: number[]): number {
  if (dailyReturns.length <= 1) return 0;

  // Convert percentage returns to decimal
  const decimalReturns = dailyReturns.map(r => r / 100);

  // Calculate mean
  const mean = decimalReturns.reduce((sum, r) => sum + r, 0) / decimalReturns.length;

  // Calculate sum of squared differences from mean
  const squaredDiffs = decimalReturns.map(r => Math.pow(r - mean, 2));
  const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (decimalReturns.length - 1);

  // Standard deviation
  const stdDev = Math.sqrt(variance);

  // Annualize (assuming daily returns, multiply by sqrt of trading days in a year)
  const annualizedStdDev = stdDev * Math.sqrt(252);

  // Return as percentage
  return annualizedStdDev * 100;
}

/**
 * Calculate Sharpe Ratio (risk-adjusted return)
 *
 * @param annualizedReturn - Annualized return as a percentage
 * @param volatility - Annualized volatility as a percentage
 * @param riskFreeRate - Risk-free rate as a percentage (default: 2%)
 * @returns Sharpe Ratio
 */
export function calculateSharpeRatio(
  annualizedReturn: number,
  volatility: number,
  riskFreeRate: number = 2
): number {
  if (volatility === 0) return 0;
  return (annualizedReturn - riskFreeRate) / volatility;
}

/**
 * Calculate Maximum Drawdown
 *
 * @param portfolioValues - Array of portfolio values over time
 * @returns Maximum drawdown as a percentage
 */
export function calculateMaxDrawdown(portfolioValues: number[]): number {
  if (portfolioValues.length <= 1) return 0;

  let maxDrawdown = 0;
  let peak = portfolioValues[0];

  for (let i = 1; i < portfolioValues.length; i++) {
    if (portfolioValues[i] > peak) {
      peak = portfolioValues[i];
    } else {
      const drawdown = (peak - portfolioValues[i]) / peak;
      maxDrawdown = Math.max(maxDrawdown, drawdown);
    }
  }

  return maxDrawdown * 100;
}

/**
 * Calculate Beta (portfolio volatility relative to market)
 *
 * @param portfolioReturns - Array of portfolio returns as percentages
 * @param marketReturns - Array of market returns as percentages
 * @returns Beta value
 */
export function calculateBeta(portfolioReturns: number[], marketReturns: number[]): number {
  if (portfolioReturns.length !== marketReturns.length || portfolioReturns.length <= 1) {
    return 0;
  }

  // Convert percentage returns to decimal
  const decimalPortfolioReturns = portfolioReturns.map(r => r / 100);
  const decimalMarketReturns = marketReturns.map(r => r / 100);

  // Calculate covariance
  const portfolioMean = decimalPortfolioReturns.reduce((sum, r) => sum + r, 0) / decimalPortfolioReturns.length;
  const marketMean = decimalMarketReturns.reduce((sum, r) => sum + r, 0) / decimalMarketReturns.length;

  let covariance = 0;
  for (let i = 0; i < decimalPortfolioReturns.length; i++) {
    covariance += (decimalPortfolioReturns[i] - portfolioMean) * (decimalMarketReturns[i] - marketMean);
  }
  covariance /= (decimalPortfolioReturns.length - 1);

  // Calculate market variance
  const marketVariance = decimalMarketReturns.reduce(
    (sum, r) => sum + Math.pow(r - marketMean, 2), 0
  ) / (decimalMarketReturns.length - 1);

  // Beta = covariance / market variance
  return covariance / marketVariance;
}

/**
 * Calculate Alpha (excess return over what would be predicted by beta)
 *
 * @param portfolioReturn - Annualized portfolio return as a percentage
 * @param riskFreeRate - Risk-free rate as a percentage
 * @param beta - Portfolio beta
 * @param marketReturn - Annualized market return as a percentage
 * @returns Alpha value as a percentage
 */
export function calculateAlpha(
  portfolioReturn: number,
  riskFreeRate: number,
  beta: number,
  marketReturn: number
): number {
  return portfolioReturn - (riskFreeRate + beta * (marketReturn - riskFreeRate));
}

/**
 * Calculate asset allocation percentages
 *
 * @param assets - Array of portfolio assets
 * @returns Asset allocation object with percentages by category
 */
export function calculateAssetAllocation(assets: PortfolioAsset[]): AssetAllocation {
  // This is a simplified implementation - in a real app, you would have
  // more asset data including asset class, sector, and geography

  const totalValue = assets.reduce((sum, asset) => sum + asset.value, 0);

  // Mock implementation - in a real app, you would categorize based on actual asset data
  const assetClass: { [key: string]: number } = {};
  const sector: { [key: string]: number } = {};
  const geography: { [key: string]: number } = {};

  // Simplified mock categorization
  assets.forEach(asset => {
    // Asset class (mock categorization based on symbol)
    const assetClassName = asset.symbol.startsWith('B') ? 'Cryptocurrency' :
                          asset.symbol.includes('USD') ? 'Stablecoin' : 'Altcoin';

    assetClass[assetClassName] = (assetClass[assetClassName] || 0) + (asset.value / totalValue * 100);

    // Sector (mock categorization)
    const sectorName = asset.symbol === 'BTC' || asset.symbol === 'ETH' ? 'Large Cap' :
                      asset.symbol === 'SOL' || asset.symbol === 'ADA' ? 'Smart Contract' : 'Exchange';

    sector[sectorName] = (sector[sectorName] || 0) + (asset.value / totalValue * 100);

    // Geography (mock categorization)
    const geoName = asset.symbol === 'BNB' ? 'Asia' : 'Global';
    geography[geoName] = (geography[geoName] || 0) + (asset.value / totalValue * 100);
  });

  return { assetClass, sector, geography };
}

/**
 * Calculate performance attribution
 *
 * @param assets - Array of portfolio assets with performance data
 * @param initialValues - Initial values of each asset
 * @returns Performance attribution data
 */
export function calculatePerformanceAttribution(
  assets: PortfolioAsset[],
  initialValues: { [symbol: string]: number }
): PerformanceAttribution {
  const contributions: { symbol: string; contribution: number }[] = assets.map(asset => {
    const initialValue = initialValues[asset.symbol] || asset.value / (1 + asset.change / 100);
    const contribution = asset.value - initialValue;
    return { symbol: asset.symbol, contribution };
  });

  // Sort by contribution
  contributions.sort((a, b) => b.contribution - a.contribution);

  // Get top contributors and detractors
  const topContributors = contributions.filter(c => c.contribution > 0).slice(0, 3);
  const topDetractors = [...contributions.filter(c => c.contribution < 0)]
    .sort((a, b) => a.contribution - b.contribution)
    .slice(0, 3);

  // Mock sector attribution
  const sectorAttribution = [
    { sector: 'Large Cap', contribution: 65 },
    { sector: 'Smart Contract', contribution: 25 },
    { sector: 'Exchange', contribution: 10 }
  ];

  return { topContributors, topDetractors, sectorAttribution };
}

/**
 * Calculate all performance metrics for a portfolio
 *
 * @param portfolioHistory - Time series of portfolio values
 * @param marketHistory - Time series of market values
 * @param riskFreeRate - Risk-free rate as a percentage
 * @returns Complete set of performance metrics
 */
export function calculateAllMetrics(
  portfolioHistory: TimeSeriesData[],
  marketHistory: TimeSeriesData[],
  riskFreeRate: number = 2
): PerformanceMetrics {
  if (portfolioHistory.length < 2) {
    return {
      totalReturn: 0,
      dailyReturn: 0,
      weeklyReturn: 0,
      monthlyReturn: 0,
      yearlyReturn: 0,
      sharpeRatio: 0,
      volatility: 0,
      maxDrawdown: 0,
      beta: 0,
      alpha: 0
    };
  }

  // Extract values
  const portfolioValues = portfolioHistory.map(d => d.value);
  const marketValues = marketHistory.map(d => d.value);

  // Calculate daily returns
  const portfolioReturns = [];
  for (let i = 1; i < portfolioValues.length; i++) {
    portfolioReturns.push(
      ((portfolioValues[i] - portfolioValues[i-1]) / portfolioValues[i-1]) * 100
    );
  }

  const marketReturns = [];
  for (let i = 1; i < marketValues.length; i++) {
    marketReturns.push(
      ((marketValues[i] - marketValues[i-1]) / marketValues[i-1]) * 100
    );
  }

  // Calculate metrics
  const initialValue = portfolioValues[0];
  const currentValue = portfolioValues[portfolioValues.length - 1];
  const totalReturn = calculateTotalReturn(initialValue, currentValue);

  // Assuming the history covers the appropriate time periods
  const daysHeld = portfolioHistory.length - 1;
  const annualizedReturn = calculateAnnualizedReturn(totalReturn, daysHeld);

  const volatility = calculateVolatility(portfolioReturns);
  const sharpeRatio = calculateSharpeRatio(annualizedReturn, volatility, riskFreeRate);
  const maxDrawdown = calculateMaxDrawdown(portfolioValues);
  const beta = calculateBeta(portfolioReturns, marketReturns);

  // Calculate market return
  const marketInitialValue = marketValues[0];
  const marketCurrentValue = marketValues[marketValues.length - 1];
  const marketTotalReturn = calculateTotalReturn(marketInitialValue, marketCurrentValue);
  const marketAnnualizedReturn = calculateAnnualizedReturn(marketTotalReturn, daysHeld);

  const alpha = calculateAlpha(annualizedReturn, riskFreeRate, beta, marketAnnualizedReturn);

  // Calculate period returns (simplified)
  const dailyReturn = portfolioReturns[portfolioReturns.length - 1] || 0;

  // For weekly, monthly, yearly returns, we'd normally look back the appropriate number of days
  // This is simplified for demonstration
  const weeklyReturn = totalReturn / (daysHeld / 7);
  const monthlyReturn = totalReturn / (daysHeld / 30);
  const yearlyReturn = annualizedReturn;

  return {
    totalReturn,
    dailyReturn,
    weeklyReturn,
    monthlyReturn,
    yearlyReturn,
    sharpeRatio,
    volatility,
    maxDrawdown,
    beta,
    alpha
  };
}
</file>

<file path="src/components/portfolio/performance/PerformanceAttribution.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { TrendingUp, TrendingDown } from 'lucide-react';
import { PerformanceAttribution as PerformanceAttributionData } from './metrics';

interface PerformanceAttributionProps {
  attribution: PerformanceAttributionData;
  isLoading?: boolean;
}

/**
 * Component for displaying performance attribution
 */
export function PerformanceAttribution({
  attribution,
  isLoading = false
}: PerformanceAttributionProps) {
  // Prepare chart data for top contributors and detractors
  const prepareContributionData = () => {
    // Combine contributors and detractors
    const combined = [
      ...attribution.topContributors.map(item => ({
        symbol: item.symbol,
        contribution: item.contribution,
        type: 'contributor'
      })),
      ...attribution.topDetractors.map(item => ({
        symbol: item.symbol,
        contribution: item.contribution,
        type: 'detractor'
      }))
    ];
    
    // Sort by contribution (descending)
    combined.sort((a, b) => b.contribution - a.contribution);
    
    return combined;
  };
  
  // Prepare chart data for sector attribution
  const prepareSectorData = () => {
    return attribution.sectorAttribution.map(item => ({
      sector: item.sector,
      contribution: item.contribution
    }));
  };
  
  return (
    <Card className="bg-brutal-panel border-brutal-border">
      <CardHeader className="pb-2">
        <CardTitle className="text-brutal-text flex items-center text-lg">
          <TrendingUp className="mr-2 h-5 w-5 text-brutal-info" />
          Performance Attribution
        </CardTitle>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brutal-info"></div>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Top Contributors and Detractors */}
            <div>
              <h3 className="text-sm font-medium text-brutal-text mb-2">Top Contributors & Detractors</h3>
              <div className="h-48">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={prepareContributionData()}
                    margin={{
                      top: 5,
                      right: 30,
                      left: 20,
                      bottom: 5,
                    }}
                    layout="vertical"
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#333" opacity={0.2} />
                    <XAxis 
                      type="number" 
                      stroke="#f7f7f7" 
                      opacity={0.5}
                      tick={{ fill: '#f7f7f7', fontSize: 12 }}
                      tickFormatter={(value) => `$${value.toLocaleString()}`}
                    />
                    <YAxis 
                      type="category" 
                      dataKey="symbol" 
                      stroke="#f7f7f7" 
                      opacity={0.5}
                      tick={{ fill: '#f7f7f7', fontSize: 12 }}
                      width={40}
                    />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1e1e1e',
                        borderColor: '#333333',
                        color: '#f7f7f7',
                        fontFamily: 'JetBrains Mono, monospace'
                      }}
                      formatter={(value) => [`$${value.toLocaleString()}`, 'Contribution']}
                    />
                    <Bar 
                      dataKey="contribution" 
                      fill={(entry) => entry.contribution >= 0 ? '#3a86ff' : '#ff006e'}
                      radius={[4, 4, 4, 4]}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
            
            {/* Sector Attribution */}
            <div>
              <h3 className="text-sm font-medium text-brutal-text mb-2">Sector Attribution</h3>
              <div className="h-48">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={prepareSectorData()}
                    margin={{
                      top: 5,
                      right: 30,
                      left: 20,
                      bottom: 5,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#333" opacity={0.2} />
                    <XAxis 
                      dataKey="sector" 
                      stroke="#f7f7f7" 
                      opacity={0.5}
                      tick={{ fill: '#f7f7f7', fontSize: 12 }}
                    />
                    <YAxis 
                      stroke="#f7f7f7" 
                      opacity={0.5}
                      tick={{ fill: '#f7f7f7', fontSize: 12 }}
                      tickFormatter={(value) => `${value}%`}
                    />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1e1e1e',
                        borderColor: '#333333',
                        color: '#f7f7f7',
                        fontFamily: 'JetBrains Mono, monospace'
                      }}
                      formatter={(value) => [`${value}%`, 'Contribution']}
                    />
                    <Bar 
                      dataKey="contribution" 
                      fill="#8338ec"
                      radius={[4, 4, 0, 0]}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/portfolio/performance/PerformanceMetricsDashboard.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { PerformanceMetrics } from './metrics';
import { TrendingUp, TrendingDown, BarChart3, AlertTriangle } from 'lucide-react';

interface PerformanceMetricsDashboardProps {
  metrics: PerformanceMetrics;
  timeframe: string;
  onTimeframeChange: (timeframe: string) => void;
  isLoading?: boolean;
}

/**
 * Component for displaying portfolio performance metrics
 */
export function PerformanceMetricsDashboard({
  metrics,
  timeframe,
  onTimeframeChange,
  isLoading = false
}: PerformanceMetricsDashboardProps) {
  // Available timeframes
  const timeframes = ['1D', '1W', '1M', '3M', '6M', '1Y', '5Y', 'All'];
  
  return (
    <Card className="bg-brutal-panel border-brutal-border">
      <CardHeader className="pb-2">
        <CardTitle className="text-brutal-text flex items-center text-lg">
          <BarChart3 className="mr-2 h-5 w-5 text-brutal-info" />
          Performance Metrics
        </CardTitle>
      </CardHeader>
      <CardContent>
        {/* Timeframe selector */}
        <div className="mb-4">
          <Tabs 
            defaultValue={timeframe} 
            onValueChange={onTimeframeChange}
            className="w-full"
          >
            <TabsList className="grid grid-cols-8 w-full">
              {timeframes.map(tf => (
                <TabsTrigger 
                  key={tf} 
                  value={tf}
                  className="text-xs"
                >
                  {tf}
                </TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
        </div>
        
        {isLoading ? (
          <div className="flex justify-center items-center h-40">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brutal-info"></div>
          </div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {/* Total Return */}
            <MetricCard
              title="Total Return"
              value={`${metrics.totalReturn.toFixed(2)}%`}
              isPositive={metrics.totalReturn >= 0}
              icon={metrics.totalReturn >= 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
            />
            
            {/* Annualized Return */}
            <MetricCard
              title="Annualized Return"
              value={`${metrics.yearlyReturn.toFixed(2)}%`}
              isPositive={metrics.yearlyReturn >= 0}
              icon={metrics.yearlyReturn >= 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
            />
            
            {/* Sharpe Ratio */}
            <MetricCard
              title="Sharpe Ratio"
              value={metrics.sharpeRatio.toFixed(2)}
              isPositive={metrics.sharpeRatio >= 1}
              icon={metrics.sharpeRatio >= 1 ? <TrendingUp size={16} /> : <AlertTriangle size={16} />}
            />
            
            {/* Volatility */}
            <MetricCard
              title="Volatility"
              value={`${metrics.volatility.toFixed(2)}%`}
              isPositive={metrics.volatility < 20}
              icon={metrics.volatility < 20 ? <TrendingUp size={16} /> : <AlertTriangle size={16} />}
              invertColor={true}
            />
            
            {/* Max Drawdown */}
            <MetricCard
              title="Max Drawdown"
              value={`${metrics.maxDrawdown.toFixed(2)}%`}
              isPositive={metrics.maxDrawdown < 15}
              icon={metrics.maxDrawdown < 15 ? <TrendingUp size={16} /> : <AlertTriangle size={16} />}
              invertColor={true}
            />
            
            {/* Beta */}
            <MetricCard
              title="Beta"
              value={metrics.beta.toFixed(2)}
              isPositive={metrics.beta <= 1.2}
              icon={metrics.beta <= 1.2 ? <TrendingUp size={16} /> : <AlertTriangle size={16} />}
              invertColor={true}
            />
            
            {/* Alpha */}
            <MetricCard
              title="Alpha"
              value={`${metrics.alpha.toFixed(2)}%`}
              isPositive={metrics.alpha > 0}
              icon={metrics.alpha > 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
            />
            
            {/* Daily Return */}
            <MetricCard
              title="Daily Return"
              value={`${metrics.dailyReturn.toFixed(2)}%`}
              isPositive={metrics.dailyReturn >= 0}
              icon={metrics.dailyReturn >= 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
            />
          </div>
        )}
      </CardContent>
    </Card>
  );
}

interface MetricCardProps {
  title: string;
  value: string;
  isPositive: boolean;
  icon: React.ReactNode;
  invertColor?: boolean;
}

/**
 * Card for displaying an individual performance metric
 */
function MetricCard({ title, value, isPositive, icon, invertColor = false }: MetricCardProps) {
  // Determine color based on positive/negative and whether to invert the color logic
  const getColorClass = () => {
    if (invertColor) {
      return isPositive ? 'text-brutal-success' : 'text-brutal-error';
    } else {
      return isPositive ? 'text-brutal-success' : 'text-brutal-error';
    }
  };
  
  return (
    <div className="bg-brutal-panel-light p-3 rounded-md border border-brutal-border">
      <div className="text-xs text-brutal-text/70 mb-1">{title}</div>
      <div className="flex items-center">
        <span className={`text-lg font-mono font-bold ${getColorClass()}`}>
          {value}
        </span>
        <span className={`ml-1 ${getColorClass()}`}>
          {icon}
        </span>
      </div>
    </div>
  );
}
</file>

<file path="src/components/portfolio/performance/PortfolioPerformance.tsx">
import React from 'react';
import { usePortfolioData } from './usePortfolioData';
import { usePortfolioMetrics } from './usePortfolioMetrics';
import { PerformanceMetricsDashboard } from './PerformanceMetricsDashboard';
import { AssetAllocationChart } from './AssetAllocationChart';
import { HistoricalPerformanceChart } from './HistoricalPerformanceChart';
import { RiskAnalysisChart } from './RiskAnalysisChart';
import { PerformanceAttribution } from './PerformanceAttribution';

/**
 * Main component for portfolio performance analysis
 */
export function PortfolioPerformance() {
  // Fetch portfolio data
  const {
    assets,
    timeSeriesData,
    initialValues,
    isLoading: isDataLoading
  } = usePortfolioData();
  
  // Calculate metrics
  const {
    metrics,
    allocation,
    attribution,
    isLoading: isMetricsLoading,
    timeframe,
    setTimeframe
  } = usePortfolioMetrics(assets, timeSeriesData, initialValues);
  
  // Mock benchmark data
  const benchmarks = [
    { name: 'BTC', return: 42.5, volatility: 65.2, sharpeRatio: 0.62 },
    { name: 'ETH', return: 38.7, volatility: 72.1, sharpeRatio: 0.51 },
    { name: 'Crypto Index', return: 35.2, volatility: 58.7, sharpeRatio: 0.57 },
    { name: 'S&P 500', return: 12.8, volatility: 18.3, sharpeRatio: 0.65 }
  ];
  
  const isLoading = isDataLoading || isMetricsLoading;
  
  return (
    <div className="space-y-6">
      {/* Performance Metrics Dashboard */}
      <PerformanceMetricsDashboard
        metrics={metrics}
        timeframe={timeframe}
        onTimeframeChange={setTimeframe}
        isLoading={isLoading}
      />
      
      {/* Charts Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Historical Performance Chart */}
        <HistoricalPerformanceChart
          portfolioData={timeSeriesData.portfolio}
          marketData={timeSeriesData.market}
          timeframe={timeframe}
          isLoading={isLoading}
        />
        
        {/* Asset Allocation Chart */}
        <AssetAllocationChart
          allocation={allocation}
          isLoading={isLoading}
        />
        
        {/* Risk Analysis Chart */}
        <RiskAnalysisChart
          portfolioMetrics={metrics}
          benchmarks={benchmarks}
          isLoading={isLoading}
        />
        
        {/* Performance Attribution */}
        <PerformanceAttribution
          attribution={attribution}
          isLoading={isLoading}
        />
      </div>
    </div>
  );
}
</file>

<file path="src/components/portfolio/performance/RiskAnalysisChart.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ZAxis } from 'recharts';
import { AlertTriangle } from 'lucide-react';
import { PerformanceMetrics } from './metrics';

interface RiskAnalysisChartProps {
  portfolioMetrics: PerformanceMetrics;
  benchmarks: {
    name: string;
    return: number;
    volatility: number;
    sharpeRatio: number;
  }[];
  isLoading?: boolean;
}

/**
 * Component for displaying risk analysis chart
 */
export function RiskAnalysisChart({
  portfolioMetrics,
  benchmarks,
  isLoading = false
}: RiskAnalysisChartProps) {
  // Prepare chart data
  const prepareChartData = () => {
    // Portfolio data point
    const portfolioData = [{
      x: portfolioMetrics.volatility,
      y: portfolioMetrics.yearlyReturn,
      z: portfolioMetrics.sharpeRatio * 10, // Scale up for better visibility
      name: 'Portfolio'
    }];
    
    // Benchmark data points
    const benchmarkData = benchmarks.map(benchmark => ({
      x: benchmark.volatility,
      y: benchmark.return,
      z: benchmark.sharpeRatio * 10, // Scale up for better visibility
      name: benchmark.name
    }));
    
    return [
      { name: 'Portfolio', data: portfolioData },
      { name: 'Benchmarks', data: benchmarkData }
    ];
  };
  
  return (
    <Card className="bg-brutal-panel border-brutal-border">
      <CardHeader className="pb-2">
        <CardTitle className="text-brutal-text flex items-center text-lg">
          <AlertTriangle className="mr-2 h-5 w-5 text-brutal-error" />
          Risk Analysis
        </CardTitle>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brutal-error"></div>
          </div>
        ) : (
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <ScatterChart
                margin={{
                  top: 20,
                  right: 20,
                  bottom: 20,
                  left: 20,
                }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke="#333" opacity={0.2} />
                <XAxis 
                  type="number" 
                  dataKey="x" 
                  name="Volatility" 
                  unit="%" 
                  stroke="#f7f7f7" 
                  opacity={0.5}
                  tick={{ fill: '#f7f7f7', fontSize: 12 }}
                  label={{ 
                    value: 'Volatility (%)', 
                    position: 'bottom', 
                    fill: '#f7f7f7',
                    opacity: 0.7,
                    fontSize: 12
                  }}
                />
                <YAxis 
                  type="number" 
                  dataKey="y" 
                  name="Return" 
                  unit="%" 
                  stroke="#f7f7f7" 
                  opacity={0.5}
                  tick={{ fill: '#f7f7f7', fontSize: 12 }}
                  label={{ 
                    value: 'Return (%)', 
                    angle: -90, 
                    position: 'left', 
                    fill: '#f7f7f7',
                    opacity: 0.7,
                    fontSize: 12
                  }}
                />
                <ZAxis 
                  type="number" 
                  dataKey="z" 
                  range={[50, 400]} 
                  name="Sharpe Ratio" 
                />
                <Tooltip 
                  cursor={{ strokeDasharray: '3 3' }}
                  contentStyle={{ 
                    backgroundColor: '#1e1e1e',
                    borderColor: '#333333',
                    color: '#f7f7f7',
                    fontFamily: 'JetBrains Mono, monospace'
                  }}
                  formatter={(value, name, props) => {
                    if (name === 'Volatility') {
                      return [`${value}%`, name];
                    } else if (name === 'Return') {
                      return [`${value}%`, name];
                    } else if (name === 'Sharpe Ratio') {
                      return [(value / 10).toFixed(2), name];
                    }
                    return [value, name];
                  }}
                  labelFormatter={(label) => {
                    return '';
                  }}
                  itemSorter={(item) => {
                    if (item.name === 'name') return -1;
                    if (item.name === 'Return') return 0;
                    if (item.name === 'Volatility') return 1;
                    if (item.name === 'Sharpe Ratio') return 2;
                    return 3;
                  }}
                  wrapperStyle={{ zIndex: 100 }}
                />
                <Scatter 
                  name="Portfolio" 
                  data={prepareChartData()[0].data} 
                  fill="#3a86ff" 
                  shape="circle"
                />
                <Scatter 
                  name="Benchmarks" 
                  data={prepareChartData()[1].data} 
                  fill="#ff006e" 
                  shape="triangle"
                />
              </ScatterChart>
            </ResponsiveContainer>
          </div>
        )}
        
        <div className="mt-4 text-xs text-brutal-text/70">
          <p>This chart shows the risk-return profile of your portfolio compared to benchmarks. The size of each point represents the Sharpe ratio (risk-adjusted return).</p>
          <p className="mt-1">Higher returns with lower volatility (top-left) indicate better risk-adjusted performance.</p>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/portfolio/performance/usePortfolioData.ts">
import { PortfolioAsset } from '../PortfolioCard';
import { 
  PortfolioHistoryItem, 
  MarketDataItem,
  generateMockPortfolioHistory,
  generateMockMarketData,
  convertPortfolioHistoryToTimeSeries,
  convertMarketDataToTimeSeries,
  calculateInitialValues
} from './dataProcessor';
import { TimeSeriesData } from './metrics';
import { useQuery } from '@tanstack/react-query';

export interface PortfolioDataResult {
  assets: PortfolioAsset[];
  portfolioHistory: PortfolioHistoryItem[];
  marketData: MarketDataItem[];
  timeSeriesData: {
    portfolio: TimeSeriesData[];
    market: TimeSeriesData[];
  };
  initialValues: { [symbol: string]: number };
  isLoading: boolean;
  error: Error | null;
  refetch: () => void;
}

// Placeholder async function to simulate API call
async function fetchPortfolioData(): Promise<PortfolioDataResult> {
  // In a real app, replace this with an actual API call
  // For now, use the same mock data logic as before
  const mockAssets: PortfolioAsset[] = [
    { symbol: 'BTC', amount: 0.42, value: 24541.53, change: 3.2 },
    { symbol: 'ETH', amount: 2.15, value: 6113.89, change: 2.6 },
    { symbol: 'SOL', amount: 32.5, value: 4642.95, change: -1.2 },
    { symbol: 'BNB', amount: 8.7, value: 4899.93, change: 1.8 },
    { symbol: 'ADA', amount: 2750, value: 2447.50, change: -2.1 }
  ];
  const calculatedInitialValues = calculateInitialValues(mockAssets);
  const days = 90;
  const mockPortfolioHistory = generateMockPortfolioHistory(days, mockAssets);
  const mockMarketData = generateMockMarketData(days);
  const portfolioTimeSeries = convertPortfolioHistoryToTimeSeries(mockPortfolioHistory);
  const marketTimeSeries = convertMarketDataToTimeSeries(mockMarketData, 'TOTAL');
  return {
    assets: mockAssets,
    portfolioHistory: mockPortfolioHistory,
    marketData: mockMarketData,
    timeSeriesData: {
      portfolio: portfolioTimeSeries,
      market: marketTimeSeries
    },
    initialValues: calculatedInitialValues,
    isLoading: false,
    error: null,
    refetch: () => {}, // Will be replaced by useQuery's refetch
  };
}

export function usePortfolioData(): PortfolioDataResult {
  const { data, isLoading, error, refetch } = useQuery<PortfolioDataResult, Error>({
    queryKey: ['portfolio-data'],
    queryFn: fetchPortfolioData,
    staleTime: 30000,
  });

  // Return the same shape as before, but from the query
  return {
    assets: data?.assets || [],
    portfolioHistory: data?.portfolioHistory || [],
    marketData: data?.marketData || [],
    timeSeriesData: data?.timeSeriesData || { portfolio: [], market: [] },
    initialValues: data?.initialValues || {},
    isLoading,
    error: error || null,
    refetch,
  };
}
</file>

<file path="src/components/portfolio/performance/usePortfolioMetrics.ts">
import { useState, useEffect } from 'react';
import { 
  calculateAllMetrics, 
  calculateAssetAllocation,
  calculatePerformanceAttribution,
  PerformanceMetrics,
  AssetAllocation,
  PerformanceAttribution,
  TimeSeriesData
} from './metrics';
import { PortfolioAsset } from '../PortfolioCard';

export interface PortfolioMetricsResult {
  metrics: PerformanceMetrics;
  allocation: AssetAllocation;
  attribution: PerformanceAttribution;
  isLoading: boolean;
  error: Error | null;
  timeframe: string;
  setTimeframe: (timeframe: string) => void;
}

export interface PortfolioHistoryData {
  portfolio: TimeSeriesData[];
  market: TimeSeriesData[];
}

/**
 * Custom hook for calculating and managing portfolio performance metrics
 * 
 * @param assets - Current portfolio assets
 * @param historyData - Historical data for portfolio and market
 * @param initialValues - Initial values of assets for attribution calculation
 * @returns Portfolio metrics, allocation, attribution, and state management
 */
export function usePortfolioMetrics(
  assets: PortfolioAsset[],
  historyData: PortfolioHistoryData,
  initialValues: { [symbol: string]: number } = {}
): PortfolioMetricsResult {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    totalReturn: 0,
    dailyReturn: 0,
    weeklyReturn: 0,
    monthlyReturn: 0,
    yearlyReturn: 0,
    sharpeRatio: 0,
    volatility: 0,
    maxDrawdown: 0,
    beta: 0,
    alpha: 0
  });
  
  const [allocation, setAllocation] = useState<AssetAllocation>({
    assetClass: {},
    sector: {},
    geography: {}
  });
  
  const [attribution, setAttribution] = useState<PerformanceAttribution>({
    topContributors: [],
    topDetractors: [],
    sectorAttribution: []
  });
  
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);
  const [timeframe, setTimeframe] = useState<string>('1M'); // Default to 1 month
  
  useEffect(() => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Filter history data based on selected timeframe
      const filteredHistory = filterHistoryByTimeframe(historyData, timeframe);
      
      // Calculate metrics
      const calculatedMetrics = calculateAllMetrics(
        filteredHistory.portfolio,
        filteredHistory.market
      );
      setMetrics(calculatedMetrics);
      
      // Calculate allocation
      const calculatedAllocation = calculateAssetAllocation(assets);
      setAllocation(calculatedAllocation);
      
      // Calculate attribution
      const calculatedAttribution = calculatePerformanceAttribution(assets, initialValues);
      setAttribution(calculatedAttribution);
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Unknown error calculating metrics'));
    } finally {
      setIsLoading(false);
    }
  }, [assets, historyData, timeframe, initialValues]);
  
  return {
    metrics,
    allocation,
    attribution,
    isLoading,
    error,
    timeframe,
    setTimeframe
  };
}

/**
 * Filter history data based on selected timeframe
 * 
 * @param historyData - Complete history data
 * @param timeframe - Selected timeframe (1D, 1W, 1M, 3M, 6M, 1Y, 5Y, All)
 * @returns Filtered history data
 */
function filterHistoryByTimeframe(
  historyData: PortfolioHistoryData,
  timeframe: string
): PortfolioHistoryData {
  if (timeframe === 'All' || historyData.portfolio.length === 0) {
    return historyData;
  }
  
  const now = new Date();
  let cutoffDate = new Date();
  
  // Set cutoff date based on timeframe
  switch (timeframe) {
    case '1D':
      cutoffDate.setDate(now.getDate() - 1);
      break;
    case '1W':
      cutoffDate.setDate(now.getDate() - 7);
      break;
    case '1M':
      cutoffDate.setMonth(now.getMonth() - 1);
      break;
    case '3M':
      cutoffDate.setMonth(now.getMonth() - 3);
      break;
    case '6M':
      cutoffDate.setMonth(now.getMonth() - 6);
      break;
    case '1Y':
      cutoffDate.setFullYear(now.getFullYear() - 1);
      break;
    case '5Y':
      cutoffDate.setFullYear(now.getFullYear() - 5);
      break;
    default:
      return historyData;
  }
  
  // Filter portfolio data
  const filteredPortfolio = historyData.portfolio.filter(item => {
    const itemDate = new Date(item.date);
    return itemDate >= cutoffDate;
  });
  
  // Filter market data
  const filteredMarket = historyData.market.filter(item => {
    const itemDate = new Date(item.date);
    return itemDate >= cutoffDate;
  });
  
  return {
    portfolio: filteredPortfolio,
    market: filteredMarket
  };
}
</file>

<file path="src/components/portfolio/PortfolioCard.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export interface PortfolioAsset {
  symbol: string;
  amount: number;
  value: number;
  change: number;
}

export interface PortfolioData {
  totalValue: number;
  change: number;
  assets: PortfolioAsset[];
}

interface PortfolioCardProps {
  data: PortfolioData;
}

export function PortfolioCard({ data }: PortfolioCardProps) {
  return (
    <Card className="portfolio-card border-2 border-black">
      <CardHeader className="border-b-2 border-black px-4 py-2">
        <CardTitle className="text-lg font-mono">Portfolio Summary</CardTitle>
      </CardHeader>
      <CardContent className="p-4">
        <div className="portfolio-value flex justify-between items-center mb-4 pb-2 border-b border-gray-200">
          <span className="label font-mono font-bold">Total Value:</span>
          <div className="flex items-center">
            <span className="value font-mono text-xl mr-2">${data.totalValue.toFixed(2)}</span>
            <span className={`change font-mono text-sm px-2 py-1 ${data.change >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>
              {data.change >= 0 ? '+' : ''}{data.change.toFixed(2)}%
            </span>
          </div>
        </div>
        <div className="assets">
          <h4 className="text-md font-mono font-bold mb-2">Assets</h4>
          <ul className="space-y-2">
            {data.assets.map((asset) => (
              <li key={asset.symbol} className="flex justify-between items-center py-1 border-b border-gray-100">
                <span className="symbol font-mono font-bold">{asset.symbol}</span>
                <span className="amount font-mono text-sm">{asset.amount.toFixed(6)}</span>
                <span className="value font-mono">${asset.value.toFixed(2)}</span>
                <span className={`change font-mono text-sm px-2 py-1 ${asset.change >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>
                  {asset.change >= 0 ? '+' : ''}{asset.change.toFixed(2)}%
                </span>
              </li>
            ))}
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}

export { PortfolioCard };
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/date-picker.tsx">
import * as React from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

interface DatePickerProps {
  date: Date | undefined;
  setDate: (date: Date | undefined) => void;
  label?: string;
  className?: string;
}

export function DatePicker({ date, setDate, label, className }: DatePickerProps) {
  return (
    <div className={cn("grid gap-2", className)}>
      {label && <label className="text-sm font-medium">{label}</label>}
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant={"outline"}
            className={cn(
              "w-full justify-start text-left font-normal",
              !date && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date ? format(date, "PPP") : <span>Pick a date</span>}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0">
          <Calendar
            mode="single"
            selected={date}
            onSelect={setDate}
            initialFocus
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}
</file>

<file path="src/components/ui/date-range-picker.tsx">
import * as React from "react";
import { Calendar as CalendarIcon } from "lucide-react";
import { DateRange } from "react-day-picker";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

interface DateRangePickerProps {
  dateRange: DateRange | undefined;
  setDateRange: React.Dispatch<React.SetStateAction<DateRange | undefined>>;
  className?: string;
}

export function DateRangePicker({
  dateRange,
  setDateRange,
  className,
}: DateRangePickerProps) {
  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn(
              "w-full justify-start text-left font-normal",
              !dateRange && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {dateRange?.from ? (
              dateRange.to ? (
                <>
                  {dateRange.from.toLocaleDateString()} -{" "}
                  {dateRange.to.toLocaleDateString()}
                </>
              ) : (
                dateRange.from.toLocaleDateString()
              )
            ) : (
              <span>Pick a date range</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={dateRange?.from}
            selected={dateRange}
            onSelect={setDateRange}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  // Simplified version without theme dependency
  return (
    <Sonner
      theme="dark"
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/components/AddressValidatorExample.tsx">
'use client';

import { useState, useEffect } from 'react';
import { useAddressValidator } from '@/hooks/useAddressValidator';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2 } from 'lucide-react';

export default function AddressValidatorExample() {
  const { isValidating, error, validateAddress, getAddressInfo, getSupportedNetworks } = useAddressValidator();
  const [network, setNetwork] = useState<string>('');
  const [address, setAddress] = useState<string>('');
  const [networks, setNetworks] = useState<string[]>([]);
  const [isValid, setIsValid] = useState<boolean | null>(null);
  const [addressInfo, setAddressInfo] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    async function fetchNetworks() {
      try {
        const supportedNetworks = await getSupportedNetworks();
        setNetworks(supportedNetworks);
        if (supportedNetworks.length > 0) {
          setNetwork(supportedNetworks[0]);
        }
      } catch (error) {
        console.error('Failed to fetch networks:', error);
      } finally {
        setLoading(false);
      }
    }

    fetchNetworks();
  }, [getSupportedNetworks]);

  const handleValidate = async () => {
    if (!network || !address) return;
    
    const isAddressValid = await validateAddress(network, address);
    setIsValid(isAddressValid);
    
    if (isAddressValid) {
      const info = await getAddressInfo(network, address);
      setAddressInfo(info);
    } else {
      setAddressInfo(null);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[200px]">
        <Loader2 className="w-6 h-6 animate-spin" />
      </div>
    );
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Address Validator</CardTitle>
        <CardDescription>Validate cryptocurrency addresses across different networks</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="network">Network</Label>
          <Select 
            value={network} 
            onValueChange={(value) => {
              setNetwork(value);
              setIsValid(null);
              setAddressInfo(null);
            }}
          >
            <SelectTrigger id="network">
              <SelectValue placeholder="Select a network" />
            </SelectTrigger>
            <SelectContent>
              {networks.map((networkName) => (
                <SelectItem key={networkName} value={networkName}>
                  {networkName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="address">Wallet Address</Label>
          <Input 
            id="address" 
            value={address} 
            onChange={(e) => {
              setAddress(e.target.value);
              setIsValid(null);
              setAddressInfo(null);
            }} 
            placeholder="Enter a wallet address" 
          />
        </div>
        
        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        
        {isValid !== null && (
          <Alert variant={isValid ? "default" : "destructive"}>
            <AlertDescription>
              {isValid ? "Address is valid" : "Address is invalid"}
            </AlertDescription>
          </Alert>
        )}
        
        {addressInfo && (
          <div className="space-y-2 p-4 bg-muted rounded-md text-sm">
            <p><strong>Network:</strong> {addressInfo.network}</p>
            <p><strong>Type:</strong> {addressInfo.addressType || 'Unknown'}</p>
            {addressInfo.chainId && <p><strong>Chain ID:</strong> {addressInfo.chainId}</p>}
            {addressInfo.explorer && (
              <p>
                <strong>Explorer:</strong>{' '}
                <a 
                  href={`${addressInfo.explorer}${address}`} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-primary underline"
                >
                  View on Explorer
                </a>
              </p>
            )}
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button 
          onClick={handleValidate} 
          disabled={!network || !address || isValidating}
          className="w-full"
        >
          {isValidating ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> 
              Validating...
            </>
          ) : (
            'Validate Address'
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/components/ApiToggle.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { API_CONFIG } from '@/config';

export const ApiToggle: React.FC = () => {
  const [useLocalApi, setUseLocalApi] = useState<boolean>(API_CONFIG.USE_LOCAL_API);
  
  // Update localStorage when toggle changes
  useEffect(() => {
    localStorage.setItem('useLocalApi', useLocalApi.toString());
    // Implement reload logic if needed to apply change
  }, [useLocalApi]);
  
  const handleToggle = () => {
    setUseLocalApi(prev => !prev);
  };
  
  return (
    <div className="flex items-center space-x-2 py-2">
      <span className={`text-sm ${!useLocalApi ? 'font-medium' : ''}`}>
        Remote API
      </span>
      <button
        onClick={handleToggle}
        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${
          useLocalApi ? 'bg-indigo-600' : 'bg-gray-200'
        }`}
      >
        <span 
          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
            useLocalApi ? 'translate-x-6' : 'translate-x-1'
          }`} 
        />
      </button>
      <span className={`text-sm ${useLocalApi ? 'font-medium' : ''}`}>
        Local API
      </span>
    </div>
  );
};

export default ApiToggle;
</file>

<file path="src/components/BacktestList.tsx">
'use client';

import React from 'react';
import { useBacktests } from '@/hooks/useBacktests';
import { formatDate, formatCurrency, formatPercent } from '@/lib/utils';

export const BacktestList: React.FC = () => {
  const { getAll, loading, error } = useBacktests();
  const backtestsQuery = getAll();
  
  if (loading || backtestsQuery.isLoading) {
    return <div>Loading backtests...</div>;
  }

  if (error || backtestsQuery.error) {
    const errorMessage = backtestsQuery.error instanceof Error 
      ? backtestsQuery.error.message 
      : error?.message || 'Unknown error';
    return <div>Error loading backtests: {errorMessage}</div>;
  }

  const backtests = backtestsQuery.data || [];

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">Backtests</h2>
      {backtests.length === 0 ? (
        <p className="text-gray-500">No backtests found.</p>
      ) : (
        <ul className="space-y-6">
          {backtests.map((backtest) => {
            const profitLoss = backtest.finalBalance - backtest.initialBalance;
            const profitLossPct = (backtest.finalBalance / backtest.initialBalance - 1);
            
            return (
              <li key={backtest.id} className="border rounded-lg p-4 shadow-sm">
                <h3 className="text-xl font-medium mb-2">{backtest.name}</h3>
                <p className="text-gray-700 mb-2">{backtest.description}</p>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                  <p><span className="font-medium">Strategy:</span> {backtest.strategyId}</p>
                  <p><span className="font-medium">Period:</span> {formatDate(backtest.startDate)} - {formatDate(backtest.endDate)}</p>
                  <p><span className="font-medium">Initial Balance:</span> {formatCurrency(backtest.initialBalance)}</p>
                  <p><span className="font-medium">Final Balance:</span> {formatCurrency(backtest.finalBalance)}</p>
                  <p>
                    <span className="font-medium">Profit/Loss:</span>{' '}
                    <span className={profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}>
                      {formatCurrency(profitLoss)} ({formatPercent(profitLossPct)})
                    </span>
                  </p>
                  <p><span className="font-medium">Win Rate:</span> {formatPercent(backtest.winRate)}</p>
                  <p><span className="font-medium">Profit Factor:</span> {backtest.profitFactor.toFixed(2)}</p>
                  <p><span className="font-medium">Sharpe Ratio:</span> {backtest.sharpeRatio.toFixed(2)}</p>
                  <p><span className="font-medium">Max Drawdown:</span> {formatPercent(backtest.maxDrawdown)}</p>
                  <p><span className="font-medium">Total Trades:</span> {backtest.totalTrades}</p>
                  <p>
                    <span className="font-medium">Status:</span>{' '}
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      backtest.status === 'completed' 
                        ? 'bg-green-100 text-green-800' 
                        : backtest.status === 'in_progress' 
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-gray-100 text-gray-800'
                    }`}>
                      {backtest.status}
                    </span>
                  </p>
                </div>
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
};

export default BacktestList;
</file>

<file path="src/components/ProtectedRoute.tsx">
'use client';

import { ReactNode, useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface ProtectedRouteProps {
  children: ReactNode;
}

export const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const router = useRouter();
  
  useEffect(() => {
    // Check if user is authenticated
    const token = localStorage.getItem('token');
    
    if (!token) {
      // Redirect to login page if not authenticated
      router.push('/login');
    }
  }, [router]);
  
  // You can add additional logic here to display a loading state
  // while checking authentication
  
  return <>{children}</>;
};

export default ProtectedRoute;
</file>

<file path="src/components/StrategyList.tsx">
'use client';

import React from 'react';
import { useStrategies } from '@/hooks/useStrategies';
import { formatDate } from '@/lib/utils';

export const StrategyList: React.FC = () => {
  const { getAll, loading, error } = useStrategies();
  const strategiesQuery = getAll();
  
  if (loading || strategiesQuery.isLoading) {
    return <div>Loading strategies...</div>;
  }

  if (error || strategiesQuery.error) {
    const errorMessage = strategiesQuery.error instanceof Error 
      ? strategiesQuery.error.message 
      : error?.message || 'Unknown error';
    return <div>Error loading strategies: {errorMessage}</div>;
  }

  const strategies = strategiesQuery.data || [];

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">Strategies</h2>
      {strategies.length === 0 ? (
        <p className="text-gray-500">No strategies found.</p>
      ) : (
        <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {strategies.map((strategy) => (
            <li key={strategy.id} className="border rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow">
              <h3 className="text-xl font-medium mb-2">{strategy.name}</h3>
              <p className="text-gray-700 mb-4">{strategy.description}</p>
              <div className="flex justify-between items-center text-sm">
                <span 
                  className={`px-2 py-1 rounded-full ${
                    strategy.isEnabled 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  {strategy.isEnabled ? 'Enabled' : 'Disabled'}
                </span>
                <span className="text-gray-500">
                  Updated: {formatDate(strategy.updatedAt)}
                </span>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default StrategyList;
</file>

<file path="src/contexts/auth-context.tsx">
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';

interface User {
  id: string;
  name: string;
  email: string;
}

interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  signup: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const pathname = usePathname();

  // Check if user is logged in on initial load
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem('token');
        
        if (token) {
          // In a real app, verify the token with the backend
          // For now, we'll simulate a user
          setUser({
            id: '1',
            name: 'Demo User',
            email: 'demo@example.com',
          });
        }
      } catch (error) {
        console.error('Auth check error:', error);
        localStorage.removeItem('token');
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  // Redirect unauthenticated users from protected routes
  useEffect(() => {
    if (!isLoading) {
      const isAuthRoute = pathname?.startsWith('/login') || pathname?.startsWith('/signup');
      
      if (!user && !isAuthRoute && pathname !== '/') {
        router.push('/login');
      } else if (user && isAuthRoute) {
        router.push('/');
      }
    }
  }, [user, isLoading, pathname, router]);

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      // TODO: Implement actual API login
      // For now, just simulate a successful login
      
      // Store token in localStorage
      localStorage.setItem('token', 'mock-jwt-token');
      
      // Set user data
      setUser({
        id: '1',
        name: 'Demo User',
        email,
      });
      
      router.push('/');
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const signup = async (name: string, email: string, password: string) => {
    setIsLoading(true);
    try {
      // TODO: Implement actual API signup
      // For now, just simulate a successful registration
      
      // Redirect to login page after successful signup
      router.push('/login');
    } catch (error) {
      console.error('Signup error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    router.push('/login');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        isAuthenticated: !!user,
        login,
        signup,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
}
</file>

<file path="src/hooks/queries.ts">
import { useQuery } from '@tanstack/react-query';

// Mock wallet data for testing
const mockWalletData = {
  balances: {
    BTC: { asset: 'BTC', total: 0.5, price: 60000 },
    ETH: { asset: 'ETH', total: 5, price: 3000 },
    USDT: { asset: 'USDT', total: 1000, price: 1 },
  },
  updatedAt: new Date().toISOString(),
};

interface QueryOptions {
  refetchInterval?: number;
  staleTime?: number;
}

export function useWalletQuery(options: QueryOptions = {}) {
  return useQuery({
    queryKey: ['wallet'],
    queryFn: async () => {
      // In a real app, this would be an API call
      // For testing, we'll just return mock data after a short delay
      await new Promise(resolve => setTimeout(resolve, 100));
      return mockWalletData;
    },
    refetchInterval: options.refetchInterval,
    staleTime: options.staleTime,
  });
}
</file>

<file path="src/hooks/use-mobile.ts">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import { useState } from 'react';

// Define types for toast messages
export type ToastType = 'success' | 'error' | 'info' | 'warning';

export interface ToastMessage {
  id: string;
  type: ToastType;
  title?: string;
  message: string;
  duration?: number;
}

// Default options for toast messages
const DEFAULT_TOAST_DURATION = 5000; // 5 seconds

// Hook for managing toast messages
export function useToast() {
  const [toasts, setToasts] = useState<ToastMessage[]>([]);

  // Function to add a toast
  const toast = (options: Omit<ToastMessage, 'id'>) => {
    const id = Math.random().toString(36).substring(2, 9);
    const newToast: ToastMessage = {
      id,
      duration: DEFAULT_TOAST_DURATION,
      ...options,
    };

    setToasts((prevToasts) => [...prevToasts, newToast]);

    // Auto-remove toast after duration
    if (newToast.duration !== Infinity) {
      setTimeout(() => {
        dismiss(id);
      }, newToast.duration);
    }

    return id;
  };

  // Function to dismiss a toast
  const dismiss = (id: string) => {
    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
  };

  // Function to dismiss all toasts
  const dismissAll = () => {
    setToasts([]);
  };

  // Convenience methods for different toast types
  const success = (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => 
    toast({ type: 'success', message, ...options });

  const error = (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => 
    toast({ type: 'error', message, ...options });

  const info = (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => 
    toast({ type: 'info', message, ...options });

  const warning = (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => 
    toast({ type: 'warning', message, ...options });

  return {
    toasts,
    toast,
    dismiss,
    dismissAll,
    success,
    error,
    info,
    warning,
  };
}

// Singleton for use outside of React components
const toastMethods = {
  success: (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => {},
  error: (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => {},
  info: (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => {},
  warning: (message: string, options: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>> = {}) => {},
  dismiss: (id: string) => {},
  dismissAll: () => {},
};

// Export for use outside React components
export const toast = toastMethods;
</file>

<file path="src/hooks/use-websocket.ts">
import { useState, useEffect } from 'react';

// Define the shape of the account data
interface AccountData {
  balances: {
    [key: string]: {
      asset: string;
      total: number;
      price: number;
    };
  };
  updatedAt: string;
}

export function useWebSocket() {
  const [isConnected, setIsConnected] = useState(false);
  const [accountData, setAccountData] = useState<AccountData | null>(null);

  // Mock websocket connection for testing
  useEffect(() => {
    // In a real app, this would establish a WebSocket connection

    // Simulate connected state after a delay
    const connectTimeout = setTimeout(() => {
      setIsConnected(true);
    }, 1000);

    // Mock receiving data periodically
    const dataInterval = setInterval(() => {
      if (isConnected) {
        // Simulate receiving account data
        setAccountData({
          balances: {
            BTC: { asset: 'BTC', total: 0.5, price: 60000 + Math.random() * 1000 },
            ETH: { asset: 'ETH', total: 5, price: 3000 + Math.random() * 100 },
            USDT: { asset: 'USDT', total: 1000, price: 1 },
          },
          updatedAt: new Date().toISOString(),
        });
      }
    }, 5000);

    // Clean up
    return () => {
      clearTimeout(connectTimeout);
      clearInterval(dataInterval);
      setIsConnected(false);
    };
  }, [isConnected]);

  return {
    isConnected,
    accountData,
  };
}
</file>

<file path="src/hooks/useAddressValidator.ts">
import { useState } from 'react';

export interface AddressInfo {
  network: string;
  address: string;
  isValid: boolean;
  addressType?: string;
  chainId?: number;
  explorer?: string;
}

export interface UseAddressValidatorReturn {
  isValidating: boolean;
  error: string | null;
  validateAddress: (network: string, address: string) => Promise<boolean>;
  getAddressInfo: (network: string, address: string) => Promise<AddressInfo | null>;
  getSupportedNetworks: () => Promise<string[]>;
}

export function useAddressValidator(): UseAddressValidatorReturn {
  const [isValidating, setIsValidating] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const validateAddress = async (network: string, address: string): Promise<boolean> => {
    setIsValidating(true);
    setError(null);
    
    try {
      const response = await fetch('/api/address-validator/validate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ network, address }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to validate address');
      }
      
      const data = await response.json();
      return data.valid;
    } catch (error) {
      console.error('Error validating address:', error);
      setError('Failed to validate address. Please try again.');
      return false;
    } finally {
      setIsValidating(false);
    }
  };

  const getAddressInfo = async (network: string, address: string): Promise<AddressInfo | null> => {
    setIsValidating(true);
    setError(null);
    
    try {
      const response = await fetch('/api/address-validator/info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ network, address }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to get address info');
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error getting address info:', error);
      setError('Failed to get address info. Please try again.');
      return null;
    } finally {
      setIsValidating(false);
    }
  };

  const getSupportedNetworks = async (): Promise<string[]> => {
    setIsValidating(true);
    setError(null);
    
    try {
      const response = await fetch('/api/address-validator/networks');
      
      if (!response.ok) {
        throw new Error('Failed to get supported networks');
      }
      
      const data = await response.json();
      return data.networks || [];
    } catch (error) {
      console.error('Error getting supported networks:', error);
      setError('Failed to get supported networks. Please try again.');
      return [];
    } finally {
      setIsValidating(false);
    }
  };

  return {
    isValidating,
    error,
    validateAddress,
    getAddressInfo,
    getSupportedNetworks,
  };
}
</file>

<file path="src/hooks/useBackendStatus.ts">
import { useQuery } from '@tanstack/react-query';

/**
 * Hook to check if the backend is connected
 * @param options Optional configuration options
 * @returns Object with isConnected status and refetch function
 */
export function useBackendStatus(options?: {
  refetchInterval?: number;
  onSuccess?: (data: { connected: boolean; status?: any }) => void;
  onError?: (error: any) => void;
}) {
  const {
    data,
    isLoading,
    isError,
    refetch,
    error
  } = useQuery({
    queryKey: ['backendStatus'],
    queryFn: async () => {
      try {
        // Try to fetch the status from the backend
        // In a real implementation, this would call an actual API
        // For now, we'll simulate a successful connection
        return { connected: true, status: { version: '1.0.0' } };
      } catch (error) {
        console.error('Backend connection error:', error);
        return { connected: false, error };
      }
    },
    // Refetch more frequently for real-time updates
    refetchInterval: options?.refetchInterval || 5000,
    // Don't retry too many times to avoid flooding the network
    retry: 2,
    // Consider data stale after 2 seconds for more real-time feedback
    staleTime: 2000,
    // Initialize with disconnected state
    initialData: { connected: false },
    // Callbacks
    onSuccess: options?.onSuccess,
    onError: options?.onError,
    // Refetch on window focus for better user experience
    refetchOnWindowFocus: true,
  });

  return {
    isConnected: data?.connected || false,
    isLoading,
    isError,
    refetch,
    error,
    status: data?.status,
  };
}
</file>

<file path="src/hooks/useBacktests.ts">
'use client';

import { useRepository } from './useRepository';
import { createRepositories } from '@/lib/repositories';
import { Backtest, BacktestResults } from '@/lib/repositories/backtest.repository';
import { useQuery } from '@tanstack/react-query';

const repositories = createRepositories();

/**
 * Custom hook for working with backtests
 * @returns Backtest-specific repository methods with React Query
 */
export function useBacktests() {
  const baseRepo = useRepository<Backtest>(repositories.backtestRepository, 'backtests');
  
  /**
   * Fetch backtest results
   */
  const getResults = (backtestId: string | null, options = {}) => {
    return useQuery({
      queryKey: ['backtest-results', backtestId],
      queryFn: () => {
        if (!backtestId) throw new Error('Backtest ID is required');
        return repositories.backtestRepository.getResults(backtestId);
      },
      enabled: !!backtestId,
      ...options
    });
  };
  
  /**
   * Fetch backtests for a specific strategy
   */
  const getByStrategy = (strategyId: string | null, options = {}) => {
    return useQuery({
      queryKey: ['backtests-by-strategy', strategyId],
      queryFn: () => {
        if (!strategyId) throw new Error('Strategy ID is required');
        return repositories.backtestRepository.getByStrategy(strategyId);
      },
      enabled: !!strategyId,
      ...options
    });
  };
  
  /**
   * Start a new backtest
   */
  const startBacktest = async (data: { strategyId: string, parameters: Record<string, any> }) => {
    return repositories.backtestRepository.startBacktest(data.strategyId, data.parameters);
  };
  
  /**
   * Cancel a running backtest
   */
  const cancelBacktest = async (backtestId: string) => {
    return repositories.backtestRepository.cancelBacktest(backtestId);
  };
  
  return {
    ...baseRepo,
    getResults,
    getByStrategy,
    startBacktest,
    cancelBacktest
  };
}
</file>

<file path="src/hooks/useRepository.ts">
'use client';

import { useState } from 'react';
import { 
  useQuery, 
  useMutation, 
  useQueryClient,
  UseMutationResult,
  UseQueryResult 
} from '@tanstack/react-query';
import { BaseRepository } from '@/lib/repositories/interfaces';

/**
 * Custom hook wrapping repository with React Query
 * @param repository Repository instance
 * @param queryKey Base query key for React Query
 * @returns Object with query and mutation hooks
 */
export function useRepository<T>(repository: BaseRepository<T>, queryKey: string) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const queryClient = useQueryClient();
  
  /**
   * Get all entities
   */
  const getAll = (options: { 
    enabled?: boolean, 
    staleTime?: number, 
    refetchInterval?: number 
  } = {}) => {
    return useQuery({
      queryKey: [queryKey],
      queryFn: () => repository.getAll(),
      enabled: options.enabled,
      staleTime: options.staleTime,
      refetchInterval: options.refetchInterval,
    });
  };
  
  /**
   * Get entity by ID
   */
  const getById = (
    id: string | null, 
    options: { 
      enabled?: boolean, 
      staleTime?: number, 
      refetchInterval?: number 
    } = {}
  ): UseQueryResult<T, Error> => {
    return useQuery({
      queryKey: [queryKey, id],
      queryFn: () => {
        if (!id) throw new Error('ID is required');
        return repository.getById(id);
      },
      enabled: !!id && (options.enabled ?? true),
      staleTime: options.staleTime,
      refetchInterval: options.refetchInterval,
    });
  };
  
  /**
   * Create a new entity
   */
  const create = (): UseMutationResult<T, Error, Partial<T>, unknown> => {
    return useMutation({
      mutationFn: (data: Partial<T>) => repository.create(data),
      onSuccess: () => {
        queryClient.invalidateQueries({ queryKey: [queryKey] });
      },
      onError: (err: Error) => {
        setError(err);
      },
    });
  };
  
  /**
   * Update an existing entity
   */
  const update = (): UseMutationResult<T, Error, { id: string, data: Partial<T> }, unknown> => {
    return useMutation({
      mutationFn: ({ id, data }: { id: string, data: Partial<T> }) => repository.update(id, data),
      onSuccess: (_, variables) => {
        queryClient.invalidateQueries({ queryKey: [queryKey] });
        queryClient.invalidateQueries({ queryKey: [queryKey, variables.id] });
      },
      onError: (err: Error) => {
        setError(err);
      },
    });
  };
  
  /**
   * Delete an entity
   */
  const remove = (): UseMutationResult<void, Error, string, unknown> => {
    return useMutation({
      mutationFn: (id: string) => repository.delete(id),
      onSuccess: () => {
        queryClient.invalidateQueries({ queryKey: [queryKey] });
      },
      onError: (err: Error) => {
        setError(err);
      },
    });
  };
  
  return {
    loading,
    error,
    getAll,
    getById,
    create,
    update,
    remove,
  };
}
</file>

<file path="src/hooks/useStrategies.ts">
'use client';

import { useRepository } from './useRepository';
import { createRepositories } from '@/lib/repositories';
import { Strategy, StrategyParameter, StrategyPerformance } from '@/lib/repositories/strategy.repository';
import { useQuery } from '@tanstack/react-query';

const repositories = createRepositories();

/**
 * Custom hook for working with strategies
 * @returns Strategy-specific repository methods with React Query
 */
export function useStrategies() {
  const baseRepo = useRepository<Strategy>(repositories.strategyRepository, 'strategies');
  
  /**
   * Fetch strategy parameters
   */
  const getParameters = (strategyId: string | null, options = {}) => {
    return useQuery({
      queryKey: ['strategy-parameters', strategyId],
      queryFn: () => {
        if (!strategyId) throw new Error('Strategy ID is required');
        return repositories.strategyRepository.getParameters(strategyId);
      },
      enabled: !!strategyId,
      ...options
    });
  };
  
  /**
   * Fetch strategy performance metrics
   */
  const getPerformance = (strategyId: string | null, options = {}) => {
    return useQuery({
      queryKey: ['strategy-performance', strategyId],
      queryFn: () => {
        if (!strategyId) throw new Error('Strategy ID is required');
        return repositories.strategyRepository.getPerformance(strategyId);
      },
      enabled: !!strategyId,
      ...options
    });
  };
  
  /**
   * Sync full strategy data
   */
  const syncFullStrategyData = (strategyId: string | null, options = {}) => {
    return useQuery({
      queryKey: ['strategy-full', strategyId],
      queryFn: () => {
        if (!strategyId) throw new Error('Strategy ID is required');
        return repositories.strategyRepository.syncFullStrategyData(strategyId);
      },
      enabled: !!strategyId,
      ...options
    });
  };
  
  return {
    ...baseRepo,
    getParameters,
    getPerformance,
    syncFullStrategyData
  };
}
</file>

<file path="src/lib/repositories/backtest.repository.ts">
import { BaseRepository } from './interfaces';
import { API_CONFIG } from '@/config';

/**
 * Backtest entity
 */
export interface Backtest {
  id: string;
  userId: string;
  strategyId: string;
  name: string;
  description: string;
  startDate: Date;
  endDate: Date;
  initialBalance: number;
  finalBalance: number;
  totalTrades: number;
  winningTrades: number;
  losingTrades: number;
  winRate: number;
  profitFactor: number;
  sharpeRatio: number;
  maxDrawdown: number;
  parameters: Record<string, any>;
  status: string;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Backtest trade interface
 */
export interface BacktestTrade {
  id: number;
  backtestId: string;
  symbol: string;
  entryTime: Date;
  entryPrice: number;
  exitTime?: Date;
  exitPrice?: number;
  quantity: number;
  direction: string;
  profitLoss?: number;
  profitLossPct?: number;
  exitReason?: string;
}

/**
 * Backtest equity point interface
 */
export interface BacktestEquity {
  id: number;
  backtestId: string;
  timestamp: Date;
  equity: number;
  balance: number;
  drawdown: number;
}

/**
 * Implementation of the backtest repository for API communication
 */
export class BacktestRepository implements BaseRepository<Backtest> {
  private readonly endpoint = 'backtests';
  private readonly apiUrl: string;
  
  constructor() {
    this.apiUrl = API_CONFIG.API_URL;
  }
  
  /**
   * Get auth headers with JWT token
   */
  private getAuthHeaders(): HeadersInit {
    // Get token from local storage in client-side environments
    const token = typeof window !== 'undefined' 
      ? localStorage.getItem('token') 
      : null;
    
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
    };
  }
  
  /**
   * Get all backtests
   */
  async getAll(): Promise<Backtest[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch backtests: ${response.status}`);
    }
    
    const data = await response.json();
    return this.mapDatesToBacktests(data);
  }
  
  /**
   * Get backtest by ID
   */
  async getById(id: string): Promise<Backtest> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch backtest: ${response.status}`);
    }
    
    const data = await response.json();
    return this.mapDatesToBacktest(data);
  }
  
  /**
   * Create a new backtest
   */
  async create(data: Partial<Backtest>): Promise<Backtest> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}`, {
      method: 'POST',
      headers: this.getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to create backtest: ${response.status}`);
    }
    
    const responseData = await response.json();
    return this.mapDatesToBacktest(responseData);
  }
  
  /**
   * Update an existing backtest
   */
  async update(id: string, data: Partial<Backtest>): Promise<Backtest> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      method: 'PUT',
      headers: this.getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to update backtest: ${response.status}`);
    }
    
    const responseData = await response.json();
    return this.mapDatesToBacktest(responseData);
  }
  
  /**
   * Delete a backtest
   */
  async delete(id: string): Promise<void> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      method: 'DELETE',
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to delete backtest: ${response.status}`);
    }
  }
  
  /**
   * Run a new backtest
   */
  async runBacktest(strategyId: string, params: {
    startDate: Date;
    endDate: Date;
    initialBalance: number;
    parameters: Record<string, any>;
  }): Promise<Backtest> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/run`, {
      method: 'POST',
      headers: this.getAuthHeaders(),
      body: JSON.stringify({
        strategyId,
        ...params,
        startDate: params.startDate.toISOString(),
        endDate: params.endDate.toISOString(),
      }),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to run backtest: ${response.status}`);
    }
    
    const responseData = await response.json();
    return this.mapDatesToBacktest(responseData);
  }
  
  /**
   * Get trades for a backtest
   */
  async getTrades(backtestId: string): Promise<BacktestTrade[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${backtestId}/trades`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch backtest trades: ${response.status}`);
    }
    
    const data = await response.json();
    return data.map((item: any) => ({
      ...item,
      entryTime: new Date(item.entryTime),
      exitTime: item.exitTime ? new Date(item.exitTime) : undefined,
    }));
  }
  
  /**
   * Get equity curve for a backtest
   */
  async getEquityCurve(backtestId: string): Promise<BacktestEquity[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${backtestId}/equity`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch backtest equity: ${response.status}`);
    }
    
    const data = await response.json();
    return data.map((item: any) => ({
      ...item,
      timestamp: new Date(item.timestamp),
    }));
  }
  
  /**
   * Sync full backtest data including trades and equity curve
   */
  async syncFullBacktestData(backtestId: string): Promise<void> {
    try {
      // Get backtest details
      const backtest = await this.getById(backtestId);
      
      // Get and store trades
      await this.getTrades(backtestId);
      
      // Get and store equity curve
      await this.getEquityCurve(backtestId);
      
      console.log(`Synced full data for backtest ${backtestId}`);
    } catch (error) {
      console.error(`Failed to sync backtest data: ${error}`);
      throw error;
    }
  }
  
  /**
   * Convert API dates to Date objects
   */
  private mapDatesToBacktest(data: any): Backtest {
    return {
      ...data,
      startDate: data.startDate ? new Date(data.startDate) : new Date(),
      endDate: data.endDate ? new Date(data.endDate) : new Date(),
      createdAt: data.createdAt ? new Date(data.createdAt) : new Date(),
      updatedAt: data.updatedAt ? new Date(data.updatedAt) : new Date(),
    };
  }
  
  /**
   * Map dates for an array of backtests
   */
  private mapDatesToBacktests(data: any[]): Backtest[] {
    return data.map(item => this.mapDatesToBacktest(item));
  }
}
</file>

<file path="src/lib/repositories/index.ts">
import { StrategyRepository } from './strategy.repository';
import { BacktestRepository } from './backtest.repository';

/**
 * Factory function that creates repository instances
 * @returns Object containing repository instances
 */
export function createRepositories() {
  return {
    strategy: new StrategyRepository(),
    backtest: new BacktestRepository(),
  };
}

// Export repository interfaces and types
export * from './interfaces';
export * from './strategy.repository';
export * from './backtest.repository';
</file>

<file path="src/lib/repositories/interfaces.ts">
/**
 * Base repository interface defining common CRUD operations
 */
export interface BaseRepository<T> {
  /**
   * Get all entities
   */
  getAll(): Promise<T[]>;
  
  /**
   * Get entity by ID
   * @param id Entity ID
   */
  getById(id: string): Promise<T>;
  
  /**
   * Create a new entity
   * @param data Entity data to create
   */
  create(data: Partial<T>): Promise<T>;
  
  /**
   * Update an existing entity
   * @param id Entity ID
   * @param data Entity data to update
   */
  update(id: string, data: Partial<T>): Promise<T>;
  
  /**
   * Delete an entity
   * @param id Entity ID
   */
  delete(id: string): Promise<void>;
  
  /**
   * Sync data from remote API to local storage
   */
  syncFromApi?(): Promise<void>;
}
</file>

<file path="src/lib/repositories/strategy.repository.ts">
import { BaseRepository } from './interfaces';
import { API_CONFIG } from '@/config';

/**
 * Strategy entity
 */
export interface Strategy {
  id: string;
  name: string;
  description: string;
  parameters: Record<string, any>;
  isEnabled: boolean;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Strategy parameter interface
 */
export interface StrategyParameter {
  id: number;
  strategyId: string;
  name: string;
  type: string;
  description: string;
  defaultValue: string;
  min?: string;
  max?: string;
  options?: string[];
  required: boolean;
}

/**
 * Strategy performance interface
 */
export interface StrategyPerformance {
  id: number;
  strategyId: string;
  winRate: number;
  profitFactor: number;
  sharpeRatio: number;
  maxDrawdown: number;
  totalTrades: number;
  periodStart: Date;
  periodEnd: Date;
}

/**
 * Implementation of the strategy repository for API communication
 */
export class StrategyRepository implements BaseRepository<Strategy> {
  private readonly endpoint = 'strategies';
  private readonly apiUrl: string;
  
  constructor() {
    this.apiUrl = API_CONFIG.API_URL;
  }
  
  /**
   * Get auth headers with JWT token
   */
  private getAuthHeaders(): HeadersInit {
    // Get token from local storage in client-side environments
    const token = typeof window !== 'undefined' 
      ? localStorage.getItem('token') 
      : null;
    
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
    };
  }
  
  /**
   * Get all strategies
   */
  async getAll(): Promise<Strategy[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch strategies: ${response.status}`);
    }
    
    const data = await response.json();
    return this.mapDatesToStrategies(data);
  }
  
  /**
   * Get strategy by ID
   */
  async getById(id: string): Promise<Strategy> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch strategy: ${response.status}`);
    }
    
    const data = await response.json();
    return this.mapDatesToStrategy(data);
  }
  
  /**
   * Create a new strategy
   */
  async create(data: Partial<Strategy>): Promise<Strategy> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}`, {
      method: 'POST',
      headers: this.getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to create strategy: ${response.status}`);
    }
    
    const responseData = await response.json();
    return this.mapDatesToStrategy(responseData);
  }
  
  /**
   * Update an existing strategy
   */
  async update(id: string, data: Partial<Strategy>): Promise<Strategy> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      method: 'PUT',
      headers: this.getAuthHeaders(),
      body: JSON.stringify(data),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to update strategy: ${response.status}`);
    }
    
    const responseData = await response.json();
    return this.mapDatesToStrategy(responseData);
  }
  
  /**
   * Delete a strategy
   */
  async delete(id: string): Promise<void> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${id}`, {
      method: 'DELETE',
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to delete strategy: ${response.status}`);
    }
  }
  
  /**
   * Get parameters for a strategy
   */
  async getParameters(strategyId: string): Promise<StrategyParameter[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${strategyId}/parameters`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch strategy parameters: ${response.status}`);
    }
    
    return response.json();
  }
  
  /**
   * Get performance metrics for a strategy
   */
  async getPerformance(strategyId: string): Promise<StrategyPerformance[]> {
    const response = await fetch(`${this.apiUrl}/${this.endpoint}/${strategyId}/performance`, {
      headers: this.getAuthHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch strategy performance: ${response.status}`);
    }
    
    const data = await response.json();
    return data.map((item: any) => ({
      ...item,
      periodStart: new Date(item.periodStart),
      periodEnd: new Date(item.periodEnd),
    }));
  }
  
  /**
   * Sync full strategy data including parameters and performance
   */
  async syncFullStrategyData(strategyId: string): Promise<void> {
    try {
      // Get strategy details
      const strategy = await this.getById(strategyId);
      
      // Get and store parameters
      await this.getParameters(strategyId);
      
      // Get and store performance metrics
      await this.getPerformance(strategyId);
      
      console.log(`Synced full data for strategy ${strategyId}`);
    } catch (error) {
      console.error(`Failed to sync strategy data: ${error}`);
      throw error;
    }
  }
  
  /**
   * Convert API dates to Date objects
   */
  private mapDatesToStrategy(data: any): Strategy {
    return {
      ...data,
      createdAt: data.createdAt ? new Date(data.createdAt) : new Date(),
      updatedAt: data.updatedAt ? new Date(data.updatedAt) : new Date(),
    };
  }
  
  /**
   * Map dates for an array of strategies
   */
  private mapDatesToStrategies(data: any[]): Strategy[] {
    return data.map(item => this.mapDatesToStrategy(item));
  }
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * Combines class names using clsx and tailwind-merge
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Format a date to a readable string
 */
export function formatDate(date: Date | string): string {
  if (!date) return 'N/A';
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}

/**
 * Format a number as currency (USD)
 */
export function formatCurrency(amount: number): string {
  if (amount === undefined || amount === null) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(amount);
}

/**
 * Format a number as percentage
 */
export function formatPercent(value: number): string {
  if (value === undefined || value === null) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
}

/**
 * Truncate a string to a specified length
 */
export function truncateString(str: string, maxLength: number = 30): string {
  if (!str) return '';
  if (str.length <= maxLength) return str;
  return `${str.substring(0, maxLength)}...`;
}

/**
 * Capitalize the first letter of a string
 */
export function capitalizeFirstLetter(string: string): string {
  if (!string) return '';
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Format a number with commas as thousands separators
 */
export function formatNumber(num: number): string {
  if (num === undefined || num === null) return 'N/A';
  return new Intl.NumberFormat('en-US').format(num);
}

/**
 * Sleep for a specified number of milliseconds
 */
export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Generate a random ID string
 */
export function generateId(): string {
  return Math.random().toString(36).substring(2, 9);
}
</file>

<file path="src/test/bun-custom-jsdom.ts">
// Create a custom test environment setup
import { JSDOM } from "jsdom";
import { vi } from "vitest";

// Create JSDOM instance
const dom = new JSDOM("<!DOCTYPE html><html><body></body></html>", {
  url: "http://localhost:3000",
  pretendToBeVisual: true,
  runScripts: "dangerously",
});

// Set up globals
declare global {
  var document: Document;
  var window: Window & typeof globalThis;
  var navigator: Navigator;
  var HTMLElement: typeof HTMLElement;
  var HTMLDivElement: typeof HTMLDivElement;
}

// Set globals before any tests run
console.log("Setting up custom JSDOM environment");
globalThis.document = dom.window.document;
globalThis.window = dom.window as unknown as Window & typeof globalThis;
globalThis.navigator = dom.window.navigator;
globalThis.HTMLElement = dom.window.HTMLElement;
globalThis.HTMLDivElement = dom.window.HTMLDivElement;

// Mock for matchMedia
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: vi.fn().mockImplementation((query: string) => ({
    matches: false,
    media: query,
    onchange: null,
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock for localStorage
Object.defineProperty(window, "localStorage", {
  value: {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
  },
});

// Mock for ResizeObserver
window.ResizeObserver = class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
};

console.log("Custom JSDOM environment setup complete");
console.log("document exists:", !!globalThis.document);
console.log("window exists:", !!globalThis.window);

// Export a cleanup function
export function cleanup() {
  // Clean document body
  if (document?.body) {
    document.body.innerHTML = "";
  }
}
</file>

<file path="src/test/pretest.js">
/**
 * This is a pretest hook that runs before all tests
 * It sets up the DOM environment manually to ensure it's available
 */
const { JSDOM } = require('jsdom');

console.log('Pretest hook: Setting up JSDOM environment');

// Set up a DOM environment
const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>', {
  url: 'http://localhost:3000',
  pretendToBeVisual: true,
  runScripts: 'dangerously',
});

// Set globals
global.window = dom.window;
global.document = dom.window.document;
global.navigator = dom.window.navigator;
global.Node = dom.window.Node;
global.HTMLElement = dom.window.HTMLElement;
global.HTMLDivElement = dom.window.HTMLDivElement;
global.Element = dom.window.Element;
global.getComputedStyle = dom.window.getComputedStyle;

// Set location
global.location = dom.window.location;

// Create required properties on global/window
global.requestAnimationFrame = function(callback) {
  return setTimeout(callback, 0);
};
global.cancelAnimationFrame = function(id) {
  clearTimeout(id);
};

// Mock for matchMedia
global.window.matchMedia = function() {
  return {
    matches: false,
    addListener: function() {},
    removeListener: function() {}
  };
};

// Create localStorage mock
global.localStorage = {
  getItem: function() { return null; },
  setItem: function() {},
  removeItem: function() {},
  clear: function() {}
};

// Create sessionStorage mock
global.sessionStorage = {
  getItem: function() { return null; },
  setItem: function() {},
  removeItem: function() {},
  clear: function() {}
};

// Create ResizeObserver mock
global.ResizeObserver = class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
};

console.log('Pretest hook: JSDOM environment set up, document and window are available');
console.log('document exists:', !!global.document);
console.log('window exists:', !!global.window);
</file>

<file path="src/test/setup.ts">
// Import test environment first to ensure DOM is set up
import './test-environment';

// Then import testing libraries
import '@testing-library/jest-dom';
import { vi } from 'vitest';
import { JSDOM } from 'jsdom';
import './vi-mock'; // Import the jest mock compatibility layer

// Set up JSDOM
const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>', {
  url: 'http://localhost:3000',
  pretendToBeVisual: true,
});

// Add DOM globals
global.window = dom.window as unknown as Window & typeof globalThis;
global.document = dom.window.document;
global.navigator = dom.window.navigator;
global.HTMLElement = dom.window.HTMLElement;
global.HTMLDivElement = dom.window.HTMLDivElement;
global.Element = dom.window.Element;
global.Node = dom.window.Node;
global.getComputedStyle = dom.window.getComputedStyle;

// Mock for matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(),
    removeListener: vi.fn(),
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock for localStorage
Object.defineProperty(window, 'localStorage', {
  value: {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
  },
});

// Mock for ResizeObserver
global.ResizeObserver = class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock for Next.js Image component
vi.mock('next/image', () => ({
  __esModule: true,
  default: (props: any) => {
    // Return a plain object representation of the image
    return {
      type: 'img',
      props: {
        ...props,
        'data-testid': 'next-image',
      },
    };
  },
}));
</file>

<file path="src/test/test-environment.ts">
/**
 * This file sets up the JSDOM environment for tests
 * It should be imported at the top of the setup file
 */
import { JSDOM } from 'jsdom';

// Set up a full DOM environment with all required globals
const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>', {
  url: 'http://localhost:3000',
  pretendToBeVisual: true,
  runScripts: 'dangerously',
});

// Critical: Set window and document in the global scope
global.window = dom.window as unknown as Window & typeof globalThis;
global.document = dom.window.document;

// Set all other DOM globals needed for testing
global.navigator = dom.window.navigator;
global.HTMLElement = dom.window.HTMLElement;
global.HTMLDivElement = dom.window.HTMLDivElement;
global.Element = dom.window.Element;
global.Node = dom.window.Node;
global.Text = dom.window.Text;
global.Event = dom.window.Event;
global.MouseEvent = dom.window.MouseEvent;
global.KeyboardEvent = dom.window.KeyboardEvent;
global.getComputedStyle = dom.window.getComputedStyle;

// Set up requestAnimationFrame
global.requestAnimationFrame = function(callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function(id) {
  clearTimeout(id);
};

// Add missing DOM properties and methods
if (!global.window.scrollTo) {
  global.window.scrollTo = () => {};
}

// Add missing fetch API
if (!global.fetch) {
  global.fetch = () => Promise.resolve({
    json: () => Promise.resolve({}),
    text: () => Promise.resolve(''),
    arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)),
    blob: () => Promise.resolve(new Blob()),
    ok: true,
    status: 200,
    statusText: 'OK',
    headers: new Headers(),
  } as Response);
}

// Add URL constructor if missing
if (!global.URL) {
  global.URL = dom.window.URL;
}

// ResizeObserver mock
class MockResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
}

// Set up ResizeObserver
global.ResizeObserver = global.ResizeObserver || MockResizeObserver;

console.log('JSDOM environment setup complete');
</file>

<file path="src/test/vi-mock.ts">
import { vi } from 'vitest';

// Jest-style mock utility for Vitest
// This helps tests that use jest.mock() syntax to work with Vitest

/**
 * Enhanced jest mock compatibility layer
 * Provides a closer approximation to Jest's module mocking behavior
 */

// Store original mock implementations
const originalMockFn = vi.fn;
const originalMock = vi.mock;
const originalSpyOn = vi.spyOn;

// Enhanced mock function with Jest compatibility
const enhancedMockFn = (...args: any[]) => {
  const mockFn = originalMockFn(...args);
  
  // Add Jest-specific mock properties
  if (!mockFn.mockName) {
    mockFn.mockName = (name: string) => {
      (mockFn as any)._mockName = name;
      return mockFn;
    };
  }
  
  return mockFn;
};

// Enhanced mock with better Jest compatibility
const enhancedMock = (moduleName: string, factory?: () => any) => {
  try {
    return originalMock(moduleName, factory);
  } catch (error) {
    console.warn(`Mock for "${moduleName}" failed, using fallback`, error);
    // Fallback to vi.mock without hoisting
    // @ts-ignore - Working around type constraints for compatibility
    return originalMock.call(vi, moduleName, () => {
      return factory ? factory() : {};
    });
  }
};

// Export a jest-like object that maps to vitest functions
const jest = {
  fn: enhancedMockFn,
  mock: enhancedMock,
  spyOn: originalSpyOn,
  clearAllMocks: vi.clearAllMocks,
  resetAllMocks: vi.resetAllMocks,
  
  // Add commonly used Jest functions
  resetModules: vi.resetModules,
  useFakeTimers: vi.useFakeTimers,
  useRealTimers: vi.useRealTimers,
  runAllTimers: vi.runAllTimers,
  advanceTimersByTime: vi.advanceTimersByTime,
};

// Add jest to global to mimic Jest's environment
(global as any).jest = jest;

// Log success message
console.log('Jest compatibility layer initialized');

export { jest };
</file>

<file path="src/config.ts">
// API configuration
export const API_CONFIG = {
  USE_LOCAL_API: process.env.NEXT_PUBLIC_USE_LOCAL_API === 'true' || true,
  LOCAL_API_URL: process.env.NEXT_PUBLIC_LOCAL_API_URL || 'http://localhost:8080',
  REMOTE_API_URL: process.env.NEXT_PUBLIC_REMOTE_API_URL || 'https://api.crypto-bot.example.com',
  
  // Websocket configuration
  WS_LOCAL_URL: process.env.NEXT_PUBLIC_WS_LOCAL_URL || 'ws://localhost:8080/ws',
  WS_REMOTE_URL: process.env.NEXT_PUBLIC_WS_REMOTE_URL || 'wss://api.crypto-bot.example.com/ws',
  
  // Other configuration
  REFRESH_INTERVAL: parseInt(process.env.NEXT_PUBLIC_REFRESH_INTERVAL || '30000', 10),
  DASHBOARD_REFRESH_INTERVAL: parseInt(process.env.NEXT_PUBLIC_DASHBOARD_REFRESH_INTERVAL || '60000', 10),
  
  // Return the appropriate API URL based on configuration
  get API_URL() {
    return this.USE_LOCAL_API ? this.LOCAL_API_URL : this.REMOTE_API_URL;
  },
  
  // Return the appropriate Websocket URL based on configuration
  get WS_URL() {
    return this.USE_LOCAL_API ? this.WS_LOCAL_URL : this.WS_REMOTE_URL;
  }
};
</file>

<file path="src/middleware.ts">
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'

const isPublicRoute = createRouteMatcher([
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/',
  '/api/webhooks/clerk'
]);

export default clerkMiddleware(async (auth, req) => {
  if (!isPublicRoute(req)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};
</file>

<file path="src/test-setup.ts">
import '@testing-library/jest-dom';
import { JSDOM } from 'jsdom';

// Set up JSDOM
const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>', {
  url: 'http://localhost:3000',
  pretendToBeVisual: true,
  runScripts: 'dangerously',
});

// Add DOM globals
(global as any).window = dom.window;
(global as any).document = dom.window.document;
(global as any).navigator = dom.window.navigator;
(global as any).HTMLElement = dom.window.HTMLElement;
(global as any).HTMLDivElement = dom.window.HTMLDivElement;
(global as any).Element = dom.window.Element;
(global as any).Node = dom.window.Node;
(global as any).getComputedStyle = dom.window.getComputedStyle;

// More complete Jest mocking implementation
const createMockFn = () => {
  type MockFn = {
    (...args: any[]): any;
    mock: {
      calls: any[][];
      instances: any[];
      invocationCallOrder: number[];
      results: any[];
    };
    mockImplementation: (implementation: Function) => MockFn;
    mockReturnValue: (value: any) => MockFn;
    mockReturnValueOnce: (value: any) => MockFn;
    mockReset: () => MockFn;
    _mockReturnValue?: any;
    _mockReturnValueOnce?: any;
  };

  const mockFn = function(this: any, ...args: any[]) {
    mockFn.mock.calls.push(args);
    mockFn.mock.instances.push(this);
    const value = mockFn._mockReturnValueOnce !== undefined 
      ? mockFn._mockReturnValueOnce 
      : mockFn._mockReturnValue;
    mockFn._mockReturnValueOnce = undefined;
    return value;
  } as unknown as MockFn;
  
  mockFn.mock = {
    calls: [],
    instances: [],
    invocationCallOrder: [],
    results: []
  };
  
  mockFn._mockReturnValue = undefined;
  mockFn._mockReturnValueOnce = undefined;
  
  mockFn.mockImplementation = function(implementation) {
    mockFn._mockReturnValue = implementation;
    return mockFn;
  };
  
  mockFn.mockReturnValue = function(value) {
    mockFn._mockReturnValue = value;
    return mockFn;
  };
  
  mockFn.mockReturnValueOnce = function(value) {
    mockFn._mockReturnValueOnce = value;
    return mockFn;
  };
  
  mockFn.mockReset = function() {
    mockFn.mock.calls = [];
    mockFn.mock.instances = [];
    mockFn.mock.invocationCallOrder = [];
    mockFn.mock.results = [];
    mockFn._mockReturnValue = undefined;
    mockFn._mockReturnValueOnce = undefined;
    return mockFn;
  };
  
  return mockFn;
};

// Jest global mock implementation
const jestMock = {
  fn: () => createMockFn(),
  spyOn: () => createMockFn(),
  mock: (moduleName: string, factory?: () => any) => {
    // This will be a no-op but at least it won't throw
    return jestMock;
  },
  resetAllMocks: () => {},
  clearAllMocks: () => {},
};

// Add Jest to global scope
(global as any).jest = jestMock;

// Mock modules that might be used in tests
(global as any).mockModule = (name: string, factory: () => any) => {
  (global as any).require = (moduleName: string) => {
    if (moduleName === name) {
      return factory();
    }
    return {};
  };
};

// Mock for React hooks tests
(global as any).ResizeObserver = class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Add any other global test mocks
(global as any).fetch = () => Promise.resolve({
  json: () => Promise.resolve({}),
  text: () => Promise.resolve(''),
  ok: true,
});

// Add any global test setup here
</file>

<file path="vitest-example/HelloWorld.test.tsx">
import { expect, test } from 'vitest'
import { render } from 'vitest-browser-react'
import HelloWorld from './HelloWorld.jsx'

test('renders name', async () => {
  const { getByText } = render(<HelloWorld name="Vitest" />)
  await expect.element(getByText('Hello Vitest!')).toBeInTheDocument()
})
</file>

<file path="vitest-example/HelloWorld.tsx">
export default function HelloWorld({ name }: { name: string }) {
  return (
    <div>
      <h1>Hello {name}!</h1>
    </div>
  )
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="bunfig.toml">
[install]
# Use the exact versions specified in package.json
exact = true
# Install dev dependencies by default
dev = true

[test]
# Use the DOM environment for tests
environment = "jsdom"
# Configure Jest compatibility
jsx = true
# Include test files matching these patterns
include = ["**/*.test.{ts,tsx,js,jsx}"]
# Setup files for tests - use our pretest hook first, then the regular setup
setupFiles = ["./src/test/pretest.js", "./src/test/setup.ts"]
# Create browser-like environment for testing
environmentOptions = { jsdom = { runScripts = "dangerously" } }
# Support for Jest mock functions
jestCompat = true
# Polyfill some Node.js modules
nodeCompat = true
# Avoid test timeouts
timeout = 30000
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.js">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  // Enable React strict mode for improved error detection
  reactStrictMode: true,
  
  // Environment variables that will be available in the browser
  env: {
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || '',
    NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL || '',
  },
  
  // Configure images to allow external domains if needed
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
  
  // Configure redirects for any needed path forwarding
  async redirects() {
    return [
      {
        source: '/home',
        destination: '/dashboard',
        permanent: true,
      },
    ];
  },
  
  // Add trailing slashes to all URLs
  trailingSlash: false,
  
  // Configure various compiler options
  compiler: {
    // Remove console.log in production
    removeConsole: process.env.NODE_ENV === 'production' 
      ? { exclude: ['error', 'warn'] } 
      : false,
  },
  
  // Transpile specific modules that require it
  transpilePackages: [],
  
  // Override the default webpack config if needed
  webpack: (config) => {
    // Add custom webpack configurations here if needed
    return config;
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "next_frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "bun --bun next dev",
    "build": "bun --bun next build",
    "start": "bun --bun next start",
    "lint": "bun --bun next lint",
    "test": "bun test",
    "type-check": "tsc --noEmit",
    "test:browser": "vitest --workspace=vitest.workspace.ts"
  },
  "dependencies": {
    "@clerk/nextjs": "6.15.0",
    "@hookform/resolvers": "5.0.1",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tanstack/react-query": "5.74.3",
    "@tanstack/react-query-devtools": "5.74.3",
    "@tremor/react": "3.18.7",
    "class-variance-authority": "0.7.1",
    "clsx": "2.1.1",
    "date-fns": "4.1.0",
    "lucide-react": "0.488.0",
    "next": "15.3.0",
    "next-themes": "^0.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "7.55.0",
    "recharts": "2.15.2",
    "sonner": "2.0.3",
    "tailwind-merge": "3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "zod": "3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@eslint/js": "9.24.0",
    "@radix-ui/react-toast": "1.2.7",
    "@tailwindcss/postcss": "^4",
    "@testing-library/jest-dom": "6.6.3",
    "@testing-library/react": "16.3.0",
    "@types/jest": "29.5.14",
    "@types/jsdom": "21.1.7",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@vitejs/plugin-react": "4.4.0",
    "@vitest/browser": "3.1.1",
    "autoprefixer": "10.4.21",
    "eslint": "9.24.0",
    "eslint-config-next": "15.3.0",
    "jsdom": "26.1.0",
    "playwright": "1.51.1",
    "postcss": "8.5.3",
    "tailwindcss": "4.1.4",
    "typescript": "5.8.3",
    "vitest": "3.1.1",
    "vitest-browser-react": "0.1.1"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
# Go Crypto Bot Frontend (Next.js + Bun)

## Migration Notice
This project was migrated from a Vite + React setup to Next.js 15 using Bun as the JavaScript runtime and package manager. All UI components, pages, and logic have been ported to the new structure. See `frontend/docs/guides/vite-to-nextjs-migration.md` for a detailed migration guide.

## Bun Usage
- All scripts and package management use Bun. Use `bun install`, `bun dev`, `bun run build`, etc.
- To install dependencies: `bun install`
- To start the dev server: `bun dev`
- To run tests: `bun test` or `bunx vitest run`

## Project Structure
- Source code is in `src/` (with `app/`, `components/`, `lib/`, `hooks/`, etc.)
- Static assets are in `public/`
- Configuration files: `tsconfig.json`, `tailwind.config.ts`, `next.config.ts`, etc.

---

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: "class",
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        'sm': '640px',
        'md': '768px',
        'lg': '1024px',
        'xl': '1280px',
        '2xl': '1400px'
      }
    },
    fontFamily: {
      'mono': ['JetBrains Mono', 'monospace'],
      'sans': ['JetBrains Mono', 'Inter', 'sans-serif']
    },
    colors: {
      transparent: 'transparent',
      current: 'currentColor',
      white: '#ffffff',
      black: '#000000',
      gray: {
        100: '#f3f4f6',
        200: '#e5e7eb',
        300: '#d1d5db',
        400: '#9ca3af',
        500: '#6b7280',
        600: '#4b5563',
        700: '#374151',
        800: '#1f2937',
        900: '#111827',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))'
        },
        // Brutalist theme specific colors
        brutal: {
          background: '#121212',
          panel: '#1e1e1e',
          border: '#333333',
          text: '#f7f7f7',
          error: '#ff4d4d',
          info: '#3a86ff',
          success: '#00b894',
          warning: '#fdcb6e',
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' }
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' }
        },
        'pulse': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.5' },
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      }
    }
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="tsconfig.test.json">
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "types": ["jest", "@testing-library/jest-dom"]
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.test.ts", "src/**/*.test.tsx"]
}
</file>

<file path="vitest.config.ts">
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./src/test/setup.ts'], // Point to our updated setup file
    include: ['src/**/*.test.{ts,tsx,js,jsx}'],
  },
});
</file>

<file path="vitest.workspace.ts">
import { defineWorkspace } from 'vitest/config'

export default defineWorkspace([
  // If you want to keep running your existing tests in Node.js, uncomment the next line.
  // 'vitest.config.ts',
  {
    extends: 'vitest.config.ts',
    test: {
      browser: {
        enabled: true,
        provider: 'playwright',
        // https://vitest.dev/guide/browser/playwright
        instances: [
        ],
      },
    },
  },
])
</file>

</files>
