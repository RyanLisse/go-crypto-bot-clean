// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	service "command-line-arguments"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// ExecuteFunction provides a mock function with given fields: ctx, userID, functionName, parameters
func (_m *AIService) ExecuteFunction(ctx context.Context, userID int, functionName string, parameters map[string]interface{}) (interface{}, error) {
	ret := _m.Called(ctx, userID, functionName, parameters)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteFunction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, map[string]interface{}) (interface{}, error)); ok {
		return rf(ctx, userID, functionName, parameters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, map[string]interface{}) interface{}); ok {
		r0 = rf(ctx, userID, functionName, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, userID, functionName, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateResponse provides a mock function with given fields: ctx, userID, message
func (_m *AIService) GenerateResponse(ctx context.Context, userID int, message string) (string, error) {
	ret := _m.Called(ctx, userID, message)

	if len(ret) == 0 {
		panic("no return value specified for GenerateResponse")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (string, error)); ok {
		return rf(ctx, userID, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) string); ok {
		r0 = rf(ctx, userID, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveConversation provides a mock function with given fields: ctx, userID, sessionID
func (_m *AIService) RetrieveConversation(ctx context.Context, userID int, sessionID string) (*service.ConversationMemory, error) {
	ret := _m.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveConversation")
	}

	var r0 *service.ConversationMemory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*service.ConversationMemory, error)); ok {
		return rf(ctx, userID, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *service.ConversationMemory); ok {
		r0 = rf(ctx, userID, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ConversationMemory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreConversation provides a mock function with given fields: ctx, userID, sessionID, messages
func (_m *AIService) StoreConversation(ctx context.Context, userID int, sessionID string, messages []service.Message) error {
	ret := _m.Called(ctx, userID, sessionID, messages)

	if len(ret) == 0 {
		panic("no return value specified for StoreConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []service.Message) error); ok {
		r0 = rf(ctx, userID, sessionID, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
