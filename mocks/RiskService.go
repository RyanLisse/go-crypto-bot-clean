// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	service "go-crypto-bot-clean/backend/internal/domain/risk/service"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RiskService is an autogenerated mock type for the RiskService type
type RiskService struct {
	mock.Mock
}

// CheckDailyLossLimit provides a mock function with given fields: ctx, userID
func (_m *RiskService) CheckDailyLossLimit(ctx context.Context, userID int) (*service.RiskCheck, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDailyLossLimit")
	}

	var r0 *service.RiskCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*service.RiskCheck, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *service.RiskCheck); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.RiskCheck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckExposureLimit provides a mock function with given fields: ctx, userID, symbol
func (_m *RiskService) CheckExposureLimit(ctx context.Context, userID int, symbol string) (*service.RiskCheck, error) {
	ret := _m.Called(ctx, userID, symbol)

	if len(ret) == 0 {
		panic("no return value specified for CheckExposureLimit")
	}

	var r0 *service.RiskCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*service.RiskCheck, error)); ok {
		return rf(ctx, userID, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *service.RiskCheck); ok {
		r0 = rf(ctx, userID, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.RiskCheck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckMaximumDrawdown provides a mock function with given fields: ctx, userID
func (_m *RiskService) CheckMaximumDrawdown(ctx context.Context, userID int) (*service.RiskCheck, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckMaximumDrawdown")
	}

	var r0 *service.RiskCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*service.RiskCheck, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *service.RiskCheck); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.RiskCheck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRiskService creates a new instance of RiskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRiskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RiskService {
	mock := &RiskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
